var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.DEBUG = true;
goog.LOCALE = "en";
goog.TRUSTED_SITE = true;
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + opt_message ? ": " + opt_message : ".");
  }
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && !!goog.getObjectByName(name);
  };
  goog.implicitNamespaces_ = {};
}
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (!COMPILED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.ENABLE_DEBUG_LOADER = true;
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
if (!COMPILED && goog.ENABLE_DEBUG_LOADER) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && (typeof value.splice != "undefined" && (typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")))) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && (typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call"))) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isDef = function(val) {
  return val !== undefined;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = Array.prototype.slice.call(arguments);
    newArgs.unshift.apply(newArgs, args);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  var values = opt_values || {};
  for (var key in values) {
    var value = ("" + values[key]).replace(/\$/g, "$$$$");
    str = str.replace(new RegExp("\\{\\$" + key + "\\}", "gi"), value);
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.subs = function(str, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var replacement = String(arguments[i]).replace(/\$/g, "$$$$");
    str = str.replace(/\%s/, replacement);
  }
  return str;
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && (ch >= " " && ch <= "~") || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    return str.replace(goog.string.amperRe_, "\x26amp;").replace(goog.string.ltRe_, "\x26lt;").replace(goog.string.gtRe_, "\x26gt;").replace(goog.string.quotRe_, "\x26quot;");
  } else {
    if (!goog.string.allRe_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.amperRe_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.ltRe_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.gtRe_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.quotRe_, "\x26quot;");
    }
    return str;
  }
};
goog.string.amperRe_ = /&/g;
goog.string.ltRe_ = /</g;
goog.string.gtRe_ = />/g;
goog.string.quotRe_ = /\"/g;
goog.string.allRe_ = /[&<>\"]/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div = document.createElement("div");
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(s, ss) {
  return s.indexOf(ss) != -1;
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && (index < s.length && stringLength > 0)) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || (goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]));
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    this.stack = (new Error).stack || "";
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.string");
goog.asserts.ENABLE_ASSERTS = goog.DEBUG;
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  throw new goog.asserts.AssertionError("" + message, args || []);
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    throw new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return(value);
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.NATIVE_ARRAY_PROTOTYPES = goog.TRUSTED_SITE;
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.indexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.lastIndexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.forEach ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.filter ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.map ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = function(arr, f, val, opt_obj) {
  if (arr.reduce) {
    if (opt_obj) {
      return arr.reduce(goog.bind(f, opt_obj), val);
    } else {
      return arr.reduce(f, val);
    }
  }
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = function(arr, f, val, opt_obj) {
  if (arr.reduceRight) {
    if (opt_obj) {
      return arr.reduceRight(goog.bind(f, opt_obj), val);
    } else {
      return arr.reduceRight(f, val);
    }
  }
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.some ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.every ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv) {
  var returnArray = opt_rv || arr;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.sort.call(arr, opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || (!goog.isArrayLike(arr2) || arr1.length != arr2.length)) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare = function(arr1, arr2, opt_equalsFn) {
  return goog.array.equals(arr1, arr2, opt_equalsFn);
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter(value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("cljs.core");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-2156";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
  throw new Error("No *print-fn* fn set for evaluation environment");
};
cljs.core.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
cljs.core.pr_opts = function pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 4441712502), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1017252215), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 1014004081), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  3960797560), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__16886__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.call(null, args));
    };
    var G__16886 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__16886__delegate.call(this, args);
    };
    G__16886.cljs$lang$maxFixedArity = 0;
    G__16886.cljs$lang$applyTo = function(arglist__16887) {
      var args = cljs.core.seq(arglist__16887);
      return G__16886__delegate(args);
    };
    G__16886.cljs$core$IFn$_invoke$arity$variadic = G__16886__delegate;
    return G__16886;
  }();
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function array_QMARK_(x) {
  return x instanceof Array;
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.object_QMARK_ = function object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  return goog.isString(x);
};
cljs.core.native_satisfies_QMARK_ = function native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[goog.typeOf(x__$1)]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return false;
      } else {
        return null;
      }
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  var ty = cljs.core.type.call(null, obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__15530__auto__ = ty;
    if (cljs.core.truth_(and__15530__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__15530__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function type__GT_str(ty) {
  var temp__4090__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4090__auto__)) {
    var s = temp__4090__auto__;
    return s;
  } else {
    return[cljs.core.str(ty)].join("");
  }
};
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size);
  };
  var make_array__2 = function(type, size) {
    return make_array.call(null, size);
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$core$IFn$_invoke$arity$1 = make_array__1;
  make_array.cljs$core$IFn$_invoke$arity$2 = make_array__2;
  return make_array;
}();
cljs.core.aclone = function aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__16390__auto___16888 = len;
  var i_16889 = 0;
  while (true) {
    if (i_16889 < n__16390__auto___16888) {
      new_arr[i_16889] = arr[i_16889];
      var G__16890 = i_16889 + 1;
      i_16889 = G__16890;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function array(var_args) {
  return Array.prototype.slice.call(arguments);
};
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i];
  };
  var aget__3 = function() {
    var G__16891__delegate = function(array, i, idxs) {
      return cljs.core.apply.call(null, aget, aget.call(null, array, i), idxs);
    };
    var G__16891 = function(array, i, var_args) {
      var idxs = null;
      if (arguments.length > 2) {
        idxs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16891__delegate.call(this, array, i, idxs);
    };
    G__16891.cljs$lang$maxFixedArity = 2;
    G__16891.cljs$lang$applyTo = function(arglist__16892) {
      var array = cljs.core.first(arglist__16892);
      arglist__16892 = cljs.core.next(arglist__16892);
      var i = cljs.core.first(arglist__16892);
      var idxs = cljs.core.rest(arglist__16892);
      return G__16891__delegate(array, i, idxs);
    };
    G__16891.cljs$core$IFn$_invoke$arity$variadic = G__16891__delegate;
    return G__16891;
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        return aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$core$IFn$_invoke$arity$2 = aget__2;
  aget.cljs$core$IFn$_invoke$arity$variadic = aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return aget;
}();
cljs.core.aset = function() {
  var aset = null;
  var aset__3 = function(array, i, val) {
    return array[i] = val;
  };
  var aset__4 = function() {
    var G__16893__delegate = function(array, idx, idx2, idxv) {
      return cljs.core.apply.call(null, aset, array[idx], idx2, idxv);
    };
    var G__16893 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if (arguments.length > 3) {
        idxv = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__16893__delegate.call(this, array, idx, idx2, idxv);
    };
    G__16893.cljs$lang$maxFixedArity = 3;
    G__16893.cljs$lang$applyTo = function(arglist__16894) {
      var array = cljs.core.first(arglist__16894);
      arglist__16894 = cljs.core.next(arglist__16894);
      var idx = cljs.core.first(arglist__16894);
      arglist__16894 = cljs.core.next(arglist__16894);
      var idx2 = cljs.core.first(arglist__16894);
      var idxv = cljs.core.rest(arglist__16894);
      return G__16893__delegate(array, idx, idx2, idxv);
    };
    G__16893.cljs$core$IFn$_invoke$arity$variadic = G__16893__delegate;
    return G__16893;
  }();
  aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return aset__3.call(this, array, idx, idx2);
      default:
        return aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset.cljs$lang$maxFixedArity = 3;
  aset.cljs$lang$applyTo = aset__4.cljs$lang$applyTo;
  aset.cljs$core$IFn$_invoke$arity$3 = aset__3;
  aset.cljs$core$IFn$_invoke$arity$variadic = aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return aset;
}();
cljs.core.alength = function alength(array) {
  return array.length;
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.call(null, null, aseq);
  };
  var into_array__2 = function(type, aseq) {
    return cljs.core.reduce.call(null, function(a, x) {
      a.push(x);
      return a;
    }, [], aseq);
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$core$IFn$_invoke$arity$1 = into_array__1;
  into_array.cljs$core$IFn$_invoke$arity$2 = into_array__2;
  return into_array;
}();
cljs.core.Fn = function() {
  var obj16896 = {};
  return obj16896;
}();
cljs.core.IFn = function() {
  var obj16898 = {};
  return obj16898;
}();
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if (function() {
      var and__15530__auto__ = this$;
      if (and__15530__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1;
      } else {
        return and__15530__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$);
    } else {
      var x__16169__auto__ = this$ == null ? null : this$;
      return function() {
        var or__15542__auto__ = cljs.core._invoke[goog.typeOf(x__16169__auto__)];
        if (or__15542__auto__) {
          return or__15542__auto__;
        } else {
          var or__15542__auto____$1 = cljs.core._invoke["_"];
          if (or__15542__auto____$1) {
            return or__15542__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _invoke__2 = function(this$, a) {
    if (function() {
      var and__15530__auto__ = this$;
      if (and__15530__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2;
      } else {
        return and__15530__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
    } else {
      var x__16169__auto__ = this$ == null ? null : this$;
      return function() {
        var or__15542__auto__ = cljs.core._invoke[goog.typeOf(x__16169__auto__)];
        if (or__15542__auto__) {
          return or__15542__auto__;
        } else {
          var or__15542__auto____$1 = cljs.core._invoke["_"];
          if (or__15542__auto____$1) {
            return or__15542__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a);
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if (function() {
      var and__15530__auto__ = this$;
      if (and__15530__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3;
      } else {
        return and__15530__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
    } else {
      var x__16169__auto__ = this$ == null ? null : this$;
      return function() {
        var or__15542__auto__ = cljs.core._invoke[goog.typeOf(x__16169__auto__)];
        if (or__15542__auto__) {
          return or__15542__auto__;
        } else {
          var or__15542__auto____$1 = cljs.core._invoke["_"];
          if (or__15542__auto____$1) {
            return or__15542__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b);
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if (function() {
      var and__15530__auto__ = this$;
      if (and__15530__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4;
      } else {
        return and__15530__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
    } else {
      var x__16169__auto__ = this$ == null ? null : this$;
      return function() {
        var or__15542__auto__ = cljs.core._invoke[goog.typeOf(x__16169__auto__)];
        if (or__15542__auto__) {
          return or__15542__auto__;
        } else {
          var or__15542__auto____$1 = cljs.core._invoke["_"];
          if (or__15542__auto____$1) {
            return or__15542__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c);
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if (function() {
      var and__15530__auto__ = this$;
      if (and__15530__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5;
      } else {
        return and__15530__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
    } else {
      var x__16169__auto__ = this$ == null ? null : this$;
      return function() {
        var or__15542__auto__ = cljs.core._invoke[goog.typeOf(x__16169__auto__)];
        if (or__15542__auto__) {
          return or__15542__auto__;
        } else {
          var or__15542__auto____$1 = cljs.core._invoke["_"];
          if (or__15542__auto____$1) {
            return or__15542__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d);
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if (function() {
      var and__15530__auto__ = this$;
      if (and__15530__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6;
      } else {
        return and__15530__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
    } else {
      var x__16169__auto__ = this$ == null ? null : this$;
      return function() {
        var or__15542__auto__ = cljs.core._invoke[goog.typeOf(x__16169__auto__)];
        if (or__15542__auto__) {
          return or__15542__auto__;
        } else {
          var or__15542__auto____$1 = cljs.core._invoke["_"];
          if (or__15542__auto____$1) {
            return or__15542__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e);
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if (function() {
      var and__15530__auto__ = this$;
      if (and__15530__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7;
      } else {
        return and__15530__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
    } else {
      var x__16169__auto__ = this$ == null ? null : this$;
      return function() {
        var or__15542__auto__ = cljs.core._invoke[goog.typeOf(x__16169__auto__)];
        if (or__15542__auto__) {
          return or__15542__auto__;
        } else {
          var or__15542__auto____$1 = cljs.core._invoke["_"];
          if (or__15542__auto____$1) {
            return or__15542__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f);
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if (function() {
      var and__15530__auto__ = this$;
      if (and__15530__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8;
      } else {
        return and__15530__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
    } else {
      var x__16169__auto__ = this$ == null ? null : this$;
      return function() {
        var or__15542__auto__ = cljs.core._invoke[goog.typeOf(x__16169__auto__)];
        if (or__15542__auto__) {
          return or__15542__auto__;
        } else {
          var or__15542__auto____$1 = cljs.core._invoke["_"];
          if (or__15542__auto____$1) {
            return or__15542__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g);
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if (function() {
      var and__15530__auto__ = this$;
      if (and__15530__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9;
      } else {
        return and__15530__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
    } else {
      var x__16169__auto__ = this$ == null ? null : this$;
      return function() {
        var or__15542__auto__ = cljs.core._invoke[goog.typeOf(x__16169__auto__)];
        if (or__15542__auto__) {
          return or__15542__auto__;
        } else {
          var or__15542__auto____$1 = cljs.core._invoke["_"];
          if (or__15542__auto____$1) {
            return or__15542__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h);
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if (function() {
      var and__15530__auto__ = this$;
      if (and__15530__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10;
      } else {
        return and__15530__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
    } else {
      var x__16169__auto__ = this$ == null ? null : this$;
      return function() {
        var or__15542__auto__ = cljs.core._invoke[goog.typeOf(x__16169__auto__)];
        if (or__15542__auto__) {
          return or__15542__auto__;
        } else {
          var or__15542__auto____$1 = cljs.core._invoke["_"];
          if (or__15542__auto____$1) {
            return or__15542__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i);
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if (function() {
      var and__15530__auto__ = this$;
      if (and__15530__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11;
      } else {
        return and__15530__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var x__16169__auto__ = this$ == null ? null : this$;
      return function() {
        var or__15542__auto__ = cljs.core._invoke[goog.typeOf(x__16169__auto__)];
        if (or__15542__auto__) {
          return or__15542__auto__;
        } else {
          var or__15542__auto____$1 = cljs.core._invoke["_"];
          if (or__15542__auto____$1) {
            return or__15542__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if (function() {
      var and__15530__auto__ = this$;
      if (and__15530__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12;
      } else {
        return and__15530__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var x__16169__auto__ = this$ == null ? null : this$;
      return function() {
        var or__15542__auto__ = cljs.core._invoke[goog.typeOf(x__16169__auto__)];
        if (or__15542__auto__) {
          return or__15542__auto__;
        } else {
          var or__15542__auto____$1 = cljs.core._invoke["_"];
          if (or__15542__auto____$1) {
            return or__15542__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if (function() {
      var and__15530__auto__ = this$;
      if (and__15530__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13;
      } else {
        return and__15530__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var x__16169__auto__ = this$ == null ? null : this$;
      return function() {
        var or__15542__auto__ = cljs.core._invoke[goog.typeOf(x__16169__auto__)];
        if (or__15542__auto__) {
          return or__15542__auto__;
        } else {
          var or__15542__auto____$1 = cljs.core._invoke["_"];
          if (or__15542__auto____$1) {
            return or__15542__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if (function() {
      var and__15530__auto__ = this$;
      if (and__15530__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14;
      } else {
        return and__15530__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var x__16169__auto__ = this$ == null ? null : this$;
      return function() {
        var or__15542__auto__ = cljs.core._invoke[goog.typeOf(x__16169__auto__)];
        if (or__15542__auto__) {
          return or__15542__auto__;
        } else {
          var or__15542__auto____$1 = cljs.core._invoke["_"];
          if (or__15542__auto____$1) {
            return or__15542__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if (function() {
      var and__15530__auto__ = this$;
      if (and__15530__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15;
      } else {
        return and__15530__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var x__16169__auto__ = this$ == null ? null : this$;
      return function() {
        var or__15542__auto__ = cljs.core._invoke[goog.typeOf(x__16169__auto__)];
        if (or__15542__auto__) {
          return or__15542__auto__;
        } else {
          var or__15542__auto____$1 = cljs.core._invoke["_"];
          if (or__15542__auto____$1) {
            return or__15542__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if (function() {
      var and__15530__auto__ = this$;
      if (and__15530__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16;
      } else {
        return and__15530__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var x__16169__auto__ = this$ == null ? null : this$;
      return function() {
        var or__15542__auto__ = cljs.core._invoke[goog.typeOf(x__16169__auto__)];
        if (or__15542__auto__) {
          return or__15542__auto__;
        } else {
          var or__15542__auto____$1 = cljs.core._invoke["_"];
          if (or__15542__auto____$1) {
            return or__15542__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if (function() {
      var and__15530__auto__ = this$;
      if (and__15530__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17;
      } else {
        return and__15530__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var x__16169__auto__ = this$ == null ? null : this$;
      return function() {
        var or__15542__auto__ = cljs.core._invoke[goog.typeOf(x__16169__auto__)];
        if (or__15542__auto__) {
          return or__15542__auto__;
        } else {
          var or__15542__auto____$1 = cljs.core._invoke["_"];
          if (or__15542__auto____$1) {
            return or__15542__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if (function() {
      var and__15530__auto__ = this$;
      if (and__15530__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18;
      } else {
        return and__15530__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var x__16169__auto__ = this$ == null ? null : this$;
      return function() {
        var or__15542__auto__ = cljs.core._invoke[goog.typeOf(x__16169__auto__)];
        if (or__15542__auto__) {
          return or__15542__auto__;
        } else {
          var or__15542__auto____$1 = cljs.core._invoke["_"];
          if (or__15542__auto____$1) {
            return or__15542__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s) {
    if (function() {
      var and__15530__auto__ = this$;
      if (and__15530__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19;
      } else {
        return and__15530__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    } else {
      var x__16169__auto__ = this$ == null ? null : this$;
      return function() {
        var or__15542__auto__ = cljs.core._invoke[goog.typeOf(x__16169__auto__)];
        if (or__15542__auto__) {
          return or__15542__auto__;
        } else {
          var or__15542__auto____$1 = cljs.core._invoke["_"];
          if (or__15542__auto____$1) {
            return or__15542__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t) {
    if (function() {
      var and__15530__auto__ = this$;
      if (and__15530__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20;
      } else {
        return and__15530__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    } else {
      var x__16169__auto__ = this$ == null ? null : this$;
      return function() {
        var or__15542__auto__ = cljs.core._invoke[goog.typeOf(x__16169__auto__)];
        if (or__15542__auto__) {
          return or__15542__auto__;
        } else {
          var or__15542__auto____$1 = cljs.core._invoke["_"];
          if (or__15542__auto____$1) {
            return or__15542__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    if (function() {
      var and__15530__auto__ = this$;
      if (and__15530__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21;
      } else {
        return and__15530__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    } else {
      var x__16169__auto__ = this$ == null ? null : this$;
      return function() {
        var or__15542__auto__ = cljs.core._invoke[goog.typeOf(x__16169__auto__)];
        if (or__15542__auto__) {
          return or__15542__auto__;
        } else {
          var or__15542__auto____$1 = cljs.core._invoke["_"];
          if (or__15542__auto____$1) {
            return or__15542__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$core$IFn$_invoke$arity$1 = _invoke__1;
  _invoke.cljs$core$IFn$_invoke$arity$2 = _invoke__2;
  _invoke.cljs$core$IFn$_invoke$arity$3 = _invoke__3;
  _invoke.cljs$core$IFn$_invoke$arity$4 = _invoke__4;
  _invoke.cljs$core$IFn$_invoke$arity$5 = _invoke__5;
  _invoke.cljs$core$IFn$_invoke$arity$6 = _invoke__6;
  _invoke.cljs$core$IFn$_invoke$arity$7 = _invoke__7;
  _invoke.cljs$core$IFn$_invoke$arity$8 = _invoke__8;
  _invoke.cljs$core$IFn$_invoke$arity$9 = _invoke__9;
  _invoke.cljs$core$IFn$_invoke$arity$10 = _invoke__10;
  _invoke.cljs$core$IFn$_invoke$arity$11 = _invoke__11;
  _invoke.cljs$core$IFn$_invoke$arity$12 = _invoke__12;
  _invoke.cljs$core$IFn$_invoke$arity$13 = _invoke__13;
  _invoke.cljs$core$IFn$_invoke$arity$14 = _invoke__14;
  _invoke.cljs$core$IFn$_invoke$arity$15 = _invoke__15;
  _invoke.cljs$core$IFn$_invoke$arity$16 = _invoke__16;
  _invoke.cljs$core$IFn$_invoke$arity$17 = _invoke__17;
  _invoke.cljs$core$IFn$_invoke$arity$18 = _invoke__18;
  _invoke.cljs$core$IFn$_invoke$arity$19 = _invoke__19;
  _invoke.cljs$core$IFn$_invoke$arity$20 = _invoke__20;
  _invoke.cljs$core$IFn$_invoke$arity$21 = _invoke__21;
  return _invoke;
}();
cljs.core.ICloneable = function() {
  var obj16900 = {};
  return obj16900;
}();
cljs.core._clone = function _clone(value) {
  if (function() {
    var and__15530__auto__ = value;
    if (and__15530__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__16169__auto__ = value == null ? null : value;
    return function() {
      var or__15542__auto__ = cljs.core._clone[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._clone["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj16902 = {};
  return obj16902;
}();
cljs.core._count = function _count(coll) {
  if (function() {
    var and__15530__auto__ = coll;
    if (and__15530__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__16169__auto__ = coll == null ? null : coll;
    return function() {
      var or__15542__auto__ = cljs.core._count[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._count["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj16904 = {};
  return obj16904;
}();
cljs.core._empty = function _empty(coll) {
  if (function() {
    var and__15530__auto__ = coll;
    if (and__15530__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__16169__auto__ = coll == null ? null : coll;
    return function() {
      var or__15542__auto__ = cljs.core._empty[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._empty["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj16906 = {};
  return obj16906;
}();
cljs.core._conj = function _conj(coll, o) {
  if (function() {
    var and__15530__auto__ = coll;
    if (and__15530__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__16169__auto__ = coll == null ? null : coll;
    return function() {
      var or__15542__auto__ = cljs.core._conj[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._conj["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj16908 = {};
  return obj16908;
}();
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if (function() {
      var and__15530__auto__ = coll;
      if (and__15530__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2;
      } else {
        return and__15530__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
    } else {
      var x__16169__auto__ = coll == null ? null : coll;
      return function() {
        var or__15542__auto__ = cljs.core._nth[goog.typeOf(x__16169__auto__)];
        if (or__15542__auto__) {
          return or__15542__auto__;
        } else {
          var or__15542__auto____$1 = cljs.core._nth["_"];
          if (or__15542__auto____$1) {
            return or__15542__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n);
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if (function() {
      var and__15530__auto__ = coll;
      if (and__15530__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3;
      } else {
        return and__15530__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
    } else {
      var x__16169__auto__ = coll == null ? null : coll;
      return function() {
        var or__15542__auto__ = cljs.core._nth[goog.typeOf(x__16169__auto__)];
        if (or__15542__auto__) {
          return or__15542__auto__;
        } else {
          var or__15542__auto____$1 = cljs.core._nth["_"];
          if (or__15542__auto____$1) {
            return or__15542__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found);
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$core$IFn$_invoke$arity$2 = _nth__2;
  _nth.cljs$core$IFn$_invoke$arity$3 = _nth__3;
  return _nth;
}();
cljs.core.ASeq = function() {
  var obj16910 = {};
  return obj16910;
}();
cljs.core.ISeq = function() {
  var obj16912 = {};
  return obj16912;
}();
cljs.core._first = function _first(coll) {
  if (function() {
    var and__15530__auto__ = coll;
    if (and__15530__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__16169__auto__ = coll == null ? null : coll;
    return function() {
      var or__15542__auto__ = cljs.core._first[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._first["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function _rest(coll) {
  if (function() {
    var and__15530__auto__ = coll;
    if (and__15530__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__16169__auto__ = coll == null ? null : coll;
    return function() {
      var or__15542__auto__ = cljs.core._rest[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._rest["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj16914 = {};
  return obj16914;
}();
cljs.core._next = function _next(coll) {
  if (function() {
    var and__15530__auto__ = coll;
    if (and__15530__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__16169__auto__ = coll == null ? null : coll;
    return function() {
      var or__15542__auto__ = cljs.core._next[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._next["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj16916 = {};
  return obj16916;
}();
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if (function() {
      var and__15530__auto__ = o;
      if (and__15530__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2;
      } else {
        return and__15530__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k);
    } else {
      var x__16169__auto__ = o == null ? null : o;
      return function() {
        var or__15542__auto__ = cljs.core._lookup[goog.typeOf(x__16169__auto__)];
        if (or__15542__auto__) {
          return or__15542__auto__;
        } else {
          var or__15542__auto____$1 = cljs.core._lookup["_"];
          if (or__15542__auto____$1) {
            return or__15542__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k);
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if (function() {
      var and__15530__auto__ = o;
      if (and__15530__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3;
      } else {
        return and__15530__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
    } else {
      var x__16169__auto__ = o == null ? null : o;
      return function() {
        var or__15542__auto__ = cljs.core._lookup[goog.typeOf(x__16169__auto__)];
        if (or__15542__auto__) {
          return or__15542__auto__;
        } else {
          var or__15542__auto____$1 = cljs.core._lookup["_"];
          if (or__15542__auto____$1) {
            return or__15542__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found);
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$core$IFn$_invoke$arity$2 = _lookup__2;
  _lookup.cljs$core$IFn$_invoke$arity$3 = _lookup__3;
  return _lookup;
}();
cljs.core.IAssociative = function() {
  var obj16918 = {};
  return obj16918;
}();
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if (function() {
    var and__15530__auto__ = coll;
    if (and__15530__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__16169__auto__ = coll == null ? null : coll;
    return function() {
      var or__15542__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if (function() {
    var and__15530__auto__ = coll;
    if (and__15530__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__16169__auto__ = coll == null ? null : coll;
    return function() {
      var or__15542__auto__ = cljs.core._assoc[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._assoc["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj16920 = {};
  return obj16920;
}();
cljs.core._dissoc = function _dissoc(coll, k) {
  if (function() {
    var and__15530__auto__ = coll;
    if (and__15530__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__16169__auto__ = coll == null ? null : coll;
    return function() {
      var or__15542__auto__ = cljs.core._dissoc[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._dissoc["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj16922 = {};
  return obj16922;
}();
cljs.core._key = function _key(coll) {
  if (function() {
    var and__15530__auto__ = coll;
    if (and__15530__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__16169__auto__ = coll == null ? null : coll;
    return function() {
      var or__15542__auto__ = cljs.core._key[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._key["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function _val(coll) {
  if (function() {
    var and__15530__auto__ = coll;
    if (and__15530__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__16169__auto__ = coll == null ? null : coll;
    return function() {
      var or__15542__auto__ = cljs.core._val[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._val["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj16924 = {};
  return obj16924;
}();
cljs.core._disjoin = function _disjoin(coll, v) {
  if (function() {
    var and__15530__auto__ = coll;
    if (and__15530__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__16169__auto__ = coll == null ? null : coll;
    return function() {
      var or__15542__auto__ = cljs.core._disjoin[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._disjoin["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj16926 = {};
  return obj16926;
}();
cljs.core._peek = function _peek(coll) {
  if (function() {
    var and__15530__auto__ = coll;
    if (and__15530__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__16169__auto__ = coll == null ? null : coll;
    return function() {
      var or__15542__auto__ = cljs.core._peek[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._peek["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function _pop(coll) {
  if (function() {
    var and__15530__auto__ = coll;
    if (and__15530__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__16169__auto__ = coll == null ? null : coll;
    return function() {
      var or__15542__auto__ = cljs.core._pop[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._pop["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj16928 = {};
  return obj16928;
}();
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if (function() {
    var and__15530__auto__ = coll;
    if (and__15530__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__16169__auto__ = coll == null ? null : coll;
    return function() {
      var or__15542__auto__ = cljs.core._assoc_n[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._assoc_n["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj16930 = {};
  return obj16930;
}();
cljs.core._deref = function _deref(o) {
  if (function() {
    var and__15530__auto__ = o;
    if (and__15530__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__16169__auto__ = o == null ? null : o;
    return function() {
      var or__15542__auto__ = cljs.core._deref[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._deref["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj16932 = {};
  return obj16932;
}();
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__15530__auto__ = o;
    if (and__15530__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__16169__auto__ = o == null ? null : o;
    return function() {
      var or__15542__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj16934 = {};
  return obj16934;
}();
cljs.core._meta = function _meta(o) {
  if (function() {
    var and__15530__auto__ = o;
    if (and__15530__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__16169__auto__ = o == null ? null : o;
    return function() {
      var or__15542__auto__ = cljs.core._meta[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._meta["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj16936 = {};
  return obj16936;
}();
cljs.core._with_meta = function _with_meta(o, meta) {
  if (function() {
    var and__15530__auto__ = o;
    if (and__15530__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__16169__auto__ = o == null ? null : o;
    return function() {
      var or__15542__auto__ = cljs.core._with_meta[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._with_meta["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj16938 = {};
  return obj16938;
}();
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if (function() {
      var and__15530__auto__ = coll;
      if (and__15530__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2;
      } else {
        return and__15530__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
    } else {
      var x__16169__auto__ = coll == null ? null : coll;
      return function() {
        var or__15542__auto__ = cljs.core._reduce[goog.typeOf(x__16169__auto__)];
        if (or__15542__auto__) {
          return or__15542__auto__;
        } else {
          var or__15542__auto____$1 = cljs.core._reduce["_"];
          if (or__15542__auto____$1) {
            return or__15542__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f);
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if (function() {
      var and__15530__auto__ = coll;
      if (and__15530__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3;
      } else {
        return and__15530__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
    } else {
      var x__16169__auto__ = coll == null ? null : coll;
      return function() {
        var or__15542__auto__ = cljs.core._reduce[goog.typeOf(x__16169__auto__)];
        if (or__15542__auto__) {
          return or__15542__auto__;
        } else {
          var or__15542__auto____$1 = cljs.core._reduce["_"];
          if (or__15542__auto____$1) {
            return or__15542__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start);
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$core$IFn$_invoke$arity$2 = _reduce__2;
  _reduce.cljs$core$IFn$_invoke$arity$3 = _reduce__3;
  return _reduce;
}();
cljs.core.IKVReduce = function() {
  var obj16940 = {};
  return obj16940;
}();
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if (function() {
    var and__15530__auto__ = coll;
    if (and__15530__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__16169__auto__ = coll == null ? null : coll;
    return function() {
      var or__15542__auto__ = cljs.core._kv_reduce[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj16942 = {};
  return obj16942;
}();
cljs.core._equiv = function _equiv(o, other) {
  if (function() {
    var and__15530__auto__ = o;
    if (and__15530__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__16169__auto__ = o == null ? null : o;
    return function() {
      var or__15542__auto__ = cljs.core._equiv[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._equiv["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj16944 = {};
  return obj16944;
}();
cljs.core._hash = function _hash(o) {
  if (function() {
    var and__15530__auto__ = o;
    if (and__15530__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__16169__auto__ = o == null ? null : o;
    return function() {
      var or__15542__auto__ = cljs.core._hash[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._hash["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj16946 = {};
  return obj16946;
}();
cljs.core._seq = function _seq(o) {
  if (function() {
    var and__15530__auto__ = o;
    if (and__15530__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__16169__auto__ = o == null ? null : o;
    return function() {
      var or__15542__auto__ = cljs.core._seq[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._seq["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj16948 = {};
  return obj16948;
}();
cljs.core.IList = function() {
  var obj16950 = {};
  return obj16950;
}();
cljs.core.IRecord = function() {
  var obj16952 = {};
  return obj16952;
}();
cljs.core.IReversible = function() {
  var obj16954 = {};
  return obj16954;
}();
cljs.core._rseq = function _rseq(coll) {
  if (function() {
    var and__15530__auto__ = coll;
    if (and__15530__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__16169__auto__ = coll == null ? null : coll;
    return function() {
      var or__15542__auto__ = cljs.core._rseq[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._rseq["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj16956 = {};
  return obj16956;
}();
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__15530__auto__ = coll;
    if (and__15530__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__16169__auto__ = coll == null ? null : coll;
    return function() {
      var or__15542__auto__ = cljs.core._sorted_seq[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__15530__auto__ = coll;
    if (and__15530__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__16169__auto__ = coll == null ? null : coll;
    return function() {
      var or__15542__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if (function() {
    var and__15530__auto__ = coll;
    if (and__15530__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__16169__auto__ = coll == null ? null : coll;
    return function() {
      var or__15542__auto__ = cljs.core._entry_key[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._entry_key["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function _comparator(coll) {
  if (function() {
    var and__15530__auto__ = coll;
    if (and__15530__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__16169__auto__ = coll == null ? null : coll;
    return function() {
      var or__15542__auto__ = cljs.core._comparator[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._comparator["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj16958 = {};
  return obj16958;
}();
cljs.core._write = function _write(writer, s) {
  if (function() {
    var and__15530__auto__ = writer;
    if (and__15530__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__16169__auto__ = writer == null ? null : writer;
    return function() {
      var or__15542__auto__ = cljs.core._write[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._write["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function _flush(writer) {
  if (function() {
    var and__15530__auto__ = writer;
    if (and__15530__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__16169__auto__ = writer == null ? null : writer;
    return function() {
      var or__15542__auto__ = cljs.core._flush[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._flush["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj16960 = {};
  return obj16960;
}();
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if (function() {
    var and__15530__auto__ = o;
    if (and__15530__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__16169__auto__ = o == null ? null : o;
    return function() {
      var or__15542__auto__ = cljs.core._pr_writer[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._pr_writer["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj16962 = {};
  return obj16962;
}();
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if (function() {
    var and__15530__auto__ = d;
    if (and__15530__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__16169__auto__ = d == null ? null : d;
    return function() {
      var or__15542__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj16964 = {};
  return obj16964;
}();
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if (function() {
    var and__15530__auto__ = this$;
    if (and__15530__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__16169__auto__ = this$ == null ? null : this$;
    return function() {
      var or__15542__auto__ = cljs.core._notify_watches[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._notify_watches["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if (function() {
    var and__15530__auto__ = this$;
    if (and__15530__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__16169__auto__ = this$ == null ? null : this$;
    return function() {
      var or__15542__auto__ = cljs.core._add_watch[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._add_watch["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if (function() {
    var and__15530__auto__ = this$;
    if (and__15530__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__16169__auto__ = this$ == null ? null : this$;
    return function() {
      var or__15542__auto__ = cljs.core._remove_watch[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._remove_watch["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj16966 = {};
  return obj16966;
}();
cljs.core._as_transient = function _as_transient(coll) {
  if (function() {
    var and__15530__auto__ = coll;
    if (and__15530__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__16169__auto__ = coll == null ? null : coll;
    return function() {
      var or__15542__auto__ = cljs.core._as_transient[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._as_transient["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj16968 = {};
  return obj16968;
}();
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if (function() {
    var and__15530__auto__ = tcoll;
    if (and__15530__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__16169__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__15542__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if (function() {
    var and__15530__auto__ = tcoll;
    if (and__15530__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__16169__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__15542__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj16970 = {};
  return obj16970;
}();
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__15530__auto__ = tcoll;
    if (and__15530__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__16169__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__15542__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj16972 = {};
  return obj16972;
}();
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__15530__auto__ = tcoll;
    if (and__15530__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__16169__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__15542__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj16974 = {};
  return obj16974;
}();
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__15530__auto__ = tcoll;
    if (and__15530__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__16169__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__15542__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if (function() {
    var and__15530__auto__ = tcoll;
    if (and__15530__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__16169__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__15542__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj16976 = {};
  return obj16976;
}();
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__15530__auto__ = tcoll;
    if (and__15530__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__16169__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__15542__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj16978 = {};
  return obj16978;
}();
cljs.core._compare = function _compare(x, y) {
  if (function() {
    var and__15530__auto__ = x;
    if (and__15530__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__16169__auto__ = x == null ? null : x;
    return function() {
      var or__15542__auto__ = cljs.core._compare[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._compare["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj16980 = {};
  return obj16980;
}();
cljs.core._drop_first = function _drop_first(coll) {
  if (function() {
    var and__15530__auto__ = coll;
    if (and__15530__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__16169__auto__ = coll == null ? null : coll;
    return function() {
      var or__15542__auto__ = cljs.core._drop_first[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._drop_first["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj16982 = {};
  return obj16982;
}();
cljs.core._chunked_first = function _chunked_first(coll) {
  if (function() {
    var and__15530__auto__ = coll;
    if (and__15530__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__16169__auto__ = coll == null ? null : coll;
    return function() {
      var or__15542__auto__ = cljs.core._chunked_first[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._chunked_first["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if (function() {
    var and__15530__auto__ = coll;
    if (and__15530__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__16169__auto__ = coll == null ? null : coll;
    return function() {
      var or__15542__auto__ = cljs.core._chunked_rest[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj16984 = {};
  return obj16984;
}();
cljs.core._chunked_next = function _chunked_next(coll) {
  if (function() {
    var and__15530__auto__ = coll;
    if (and__15530__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__16169__auto__ = coll == null ? null : coll;
    return function() {
      var or__15542__auto__ = cljs.core._chunked_next[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._chunked_next["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj16986 = {};
  return obj16986;
}();
cljs.core._name = function _name(x) {
  if (function() {
    var and__15530__auto__ = x;
    if (and__15530__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__16169__auto__ = x == null ? null : x;
    return function() {
      var or__15542__auto__ = cljs.core._name[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._name["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function _namespace(x) {
  if (function() {
    var and__15530__auto__ = x;
    if (and__15530__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__16169__auto__ = x == null ? null : x;
    return function() {
      var or__15542__auto__ = cljs.core._namespace[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._namespace["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.__GT_StringBufferWriter = function __GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core._pr_writer.call(null, obj, writer, cljs.core.pr_opts.call(null));
  cljs.core._flush.call(null, writer);
  return[cljs.core.str(sb)].join("");
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function hash_symbol(sym) {
  return cljs.core.hash_combine.call(null, cljs.core.hash.call(null, sym.ns), cljs.core.hash.call(null, sym.name));
};
cljs.core.compare_symbols = function compare_symbols(a, b) {
  if (cljs.core.truth_(cljs.core._EQ_.call(null, a, b))) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__15530__auto__ = cljs.core.not.call(null, a.ns);
      if (and__15530__auto__) {
        return b.ns;
      } else {
        return and__15530__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not.call(null, b.ns)) {
          return 1;
        } else {
          var nsc = cljs.core.compare.call(null, a.ns, b.ns);
          if (nsc === 0) {
            return cljs.core.compare.call(null, a.name, b.name);
          } else {
            return nsc;
          }
        }
      } else {
        if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
          return cljs.core.compare.call(null, a.name, b.name);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core/Symbol");
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__15953__auto__ = self__._hash;
  if (!(h__15953__auto__ == null)) {
    return h__15953__auto__;
  } else {
    var h__15953__auto____$1 = cljs.core.hash_symbol.call(null, sym__$1);
    self__._hash = h__15953__auto____$1;
    return h__15953__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__16988 = null;
  var G__16988__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, null);
  };
  var G__16988__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, not_found);
  };
  G__16988 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16988__2.call(this, self__, coll);
      case 3:
        return G__16988__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16988;
}();
cljs.core.Symbol.prototype.apply = function(self__, args16987) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16987)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.__GT_Symbol = function __GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      return symbol.call(null, null, name);
    }
  };
  var symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null);
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$core$IFn$_invoke$arity$1 = symbol__1;
  symbol.cljs$core$IFn$_invoke$arity$2 = symbol__2;
  return symbol;
}();
cljs.core.clone = function clone(value) {
  return cljs.core._clone.call(null, value);
};
cljs.core.cloneable_QMARK_ = function cloneable_QMARK_(value) {
  var G__16990 = value;
  if (G__16990) {
    var bit__16192__auto__ = G__16990.cljs$lang$protocol_mask$partition1$ & 8192;
    if (bit__16192__auto__ || G__16990.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!G__16990.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__16990);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__16990);
  }
};
cljs.core.seq = function seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__16992 = coll;
      if (G__16992) {
        var bit__16185__auto__ = G__16992.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__16185__auto__ || G__16992.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._seq.call(null, coll);
    } else {
      if (coll instanceof Array) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, coll)) {
            return cljs.core._seq.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              throw new Error([cljs.core.str(coll), cljs.core.str("is not ISeqable")].join(""));
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.core.first = function first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__16994 = coll;
      if (G__16994) {
        var bit__16185__auto__ = G__16994.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__16185__auto__ || G__16994.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._first.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first.call(null, s);
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__16996 = coll;
      if (G__16996) {
        var bit__16185__auto__ = G__16996.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__16185__auto__ || G__16996.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._rest.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s) {
        return cljs.core._rest.call(null, s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__16998 = coll;
      if (G__16998) {
        var bit__16185__auto__ = G__16998.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__16185__auto__ || G__16998.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._next.call(null, coll);
    } else {
      return cljs.core.seq.call(null, cljs.core.rest.call(null, coll));
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true;
  };
  var _EQ___2 = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      return x === y || cljs.core._equiv.call(null, x, y);
    }
  };
  var _EQ___3 = function() {
    var G__16999__delegate = function(x, y, more) {
      while (true) {
        if (_EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__17000 = y;
            var G__17001 = cljs.core.first.call(null, more);
            var G__17002 = cljs.core.next.call(null, more);
            x = G__17000;
            y = G__17001;
            more = G__17002;
            continue;
          } else {
            return _EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__16999 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16999__delegate.call(this, x, y, more);
    };
    G__16999.cljs$lang$maxFixedArity = 2;
    G__16999.cljs$lang$applyTo = function(arglist__17003) {
      var x = cljs.core.first(arglist__17003);
      arglist__17003 = cljs.core.next(arglist__17003);
      var y = cljs.core.first(arglist__17003);
      var more = cljs.core.rest(arglist__17003);
      return G__16999__delegate(x, y, more);
    };
    G__16999.cljs$core$IFn$_invoke$arity$variadic = G__16999__delegate;
    return G__16999;
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        return _EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ___1;
  _EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ___2;
  _EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ_;
}();
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.toString() === other.toString();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o);
};
cljs.core.inc = function inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core/Reduced");
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.__GT_Reduced = function __GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count.call(null, cicoll);
    if (cnt === 0) {
      return f.call(null);
    } else {
      var val = cljs.core._nth.call(null, cicoll, 0);
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, cljs.core._nth.call(null, cicoll, n));
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__17004 = nval;
            var G__17005 = n + 1;
            val = G__17004;
            n = G__17005;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__17006 = nval;
          var G__17007 = n + 1;
          val__$1 = G__17006;
          n = G__17007;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__17008 = nval;
          var G__17009 = n + 1;
          val__$1 = G__17008;
          n = G__17009;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$core$IFn$_invoke$arity$2 = ci_reduce__2;
  ci_reduce.cljs$core$IFn$_invoke$arity$3 = ci_reduce__3;
  ci_reduce.cljs$core$IFn$_invoke$arity$4 = ci_reduce__4;
  return ci_reduce;
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if (arr.length === 0) {
      return f.call(null);
    } else {
      var val = arr[0];
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, arr[n]);
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__17010 = nval;
            var G__17011 = n + 1;
            val = G__17010;
            n = G__17011;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__17012 = nval;
          var G__17013 = n + 1;
          val__$1 = G__17012;
          n = G__17013;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__17014 = nval;
          var G__17015 = n + 1;
          val__$1 = G__17014;
          n = G__17015;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$core$IFn$_invoke$arity$2 = array_reduce__2;
  array_reduce.cljs$core$IFn$_invoke$arity$3 = array_reduce__3;
  array_reduce.cljs$core$IFn$_invoke$arity$4 = array_reduce__4;
  return array_reduce;
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__17017 = x;
  if (G__17017) {
    var bit__16192__auto__ = G__17017.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__16192__auto__ || G__17017.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__17017.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__17017);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__17017);
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__17019 = x;
  if (G__17019) {
    var bit__16192__auto__ = G__17019.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__16192__auto__ || G__17019.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__17019.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__17019);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__17019);
  }
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core/IndexedSeq");
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count.call(null, coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.__GT_IndexedSeq = function __GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.call(null, prim, 0);
  };
  var prim_seq__2 = function(prim, i) {
    if (i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i);
    } else {
      return null;
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$core$IFn$_invoke$arity$1 = prim_seq__1;
  prim_seq.cljs$core$IFn$_invoke$arity$2 = prim_seq__2;
  return prim_seq;
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.call(null, array, 0);
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.call(null, array, i);
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$core$IFn$_invoke$arity$1 = array_seq__1;
  array_seq.cljs$core$IFn$_invoke$arity$2 = array_seq__2;
  return array_seq;
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core/RSeq");
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_RSeq = function __GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.second = function second(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first.call(null, cljs.core.first.call(null, coll));
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next.call(null, cljs.core.first.call(null, coll));
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next.call(null, cljs.core.next.call(null, coll));
};
cljs.core.last = function last(s) {
  while (true) {
    var sn = cljs.core.next.call(null, s);
    if (!(sn == null)) {
      var G__17020 = sn;
      s = G__17020;
      continue;
    } else {
      return cljs.core.first.call(null, s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function() {
  var conj = null;
  var conj__2 = function(coll, x) {
    if (!(coll == null)) {
      return cljs.core._conj.call(null, coll, x);
    } else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x);
    }
  };
  var conj__3 = function() {
    var G__17021__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__17022 = conj.call(null, coll, x);
          var G__17023 = cljs.core.first.call(null, xs);
          var G__17024 = cljs.core.next.call(null, xs);
          coll = G__17022;
          x = G__17023;
          xs = G__17024;
          continue;
        } else {
          return conj.call(null, coll, x);
        }
        break;
      }
    };
    var G__17021 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17021__delegate.call(this, coll, x, xs);
    };
    G__17021.cljs$lang$maxFixedArity = 2;
    G__17021.cljs$lang$applyTo = function(arglist__17025) {
      var coll = cljs.core.first(arglist__17025);
      arglist__17025 = cljs.core.next(arglist__17025);
      var x = cljs.core.first(arglist__17025);
      var xs = cljs.core.rest(arglist__17025);
      return G__17021__delegate(coll, x, xs);
    };
    G__17021.cljs$core$IFn$_invoke$arity$variadic = G__17021__delegate;
    return G__17021;
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 2:
        return conj__2.call(this, coll, x);
      default:
        return conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$core$IFn$_invoke$arity$2 = conj__2;
  conj.cljs$core$IFn$_invoke$arity$variadic = conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj;
}();
cljs.core.empty = function empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty.call(null, coll);
  }
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq.call(null, coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_.call(null, s)) {
      return acc + cljs.core._count.call(null, s);
    } else {
      var G__17026 = cljs.core.next.call(null, s);
      var G__17027 = acc + 1;
      s = G__17026;
      acc = G__17027;
      continue;
    }
    break;
  }
};
cljs.core.count = function count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__17029 = coll;
      if (G__17029) {
        var bit__16185__auto__ = G__17029.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__16185__auto__ || G__17029.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._count.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, coll)) {
            return cljs.core._count.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.accumulating_seq_count.call(null, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while (true) {
      if (coll == null) {
        throw new Error("Index out of bounds");
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__17030 = cljs.core.next.call(null, coll);
              var G__17031 = n - 1;
              coll = G__17030;
              n = G__17031;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                throw new Error("Index out of bounds");
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while (true) {
      if (coll == null) {
        return not_found;
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n, not_found);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__17032 = cljs.core.next.call(null, coll);
              var G__17033 = n - 1;
              var G__17034 = not_found;
              coll = G__17032;
              n = G__17033;
              not_found = G__17034;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth;
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if (coll == null) {
      return null;
    } else {
      if (function() {
        var G__17039 = coll;
        if (G__17039) {
          var bit__16185__auto__ = G__17039.cljs$lang$protocol_mask$partition0$ & 16;
          if (bit__16185__auto__ || G__17039.cljs$core$IIndexed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._nth.call(null, coll, n);
      } else {
        if (coll instanceof Array) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return null;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
              return cljs.core._nth.call(null, coll, n);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                if (function() {
                  var G__17040 = coll;
                  if (G__17040) {
                    var bit__16192__auto__ = G__17040.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__16192__auto__ || G__17040.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__17040.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__17040);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__17040);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll)))].join(""));
                }
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if (!(coll == null)) {
      if (function() {
        var G__17041 = coll;
        if (G__17041) {
          var bit__16185__auto__ = G__17041.cljs$lang$protocol_mask$partition0$ & 16;
          if (bit__16185__auto__ || G__17041.cljs$core$IIndexed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._nth.call(null, coll, n, not_found);
      } else {
        if (coll instanceof Array) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return not_found;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
              return cljs.core._nth.call(null, coll, n);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                if (function() {
                  var G__17042 = coll;
                  if (G__17042) {
                    var bit__16192__auto__ = G__17042.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__16192__auto__ || G__17042.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__17042.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__17042);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__17042);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n, not_found);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll)))].join(""));
                }
              } else {
                return null;
              }
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$core$IFn$_invoke$arity$2 = nth__2;
  nth.cljs$core$IFn$_invoke$arity$3 = nth__3;
  return nth;
}();
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    if (o == null) {
      return null;
    } else {
      if (function() {
        var G__17045 = o;
        if (G__17045) {
          var bit__16185__auto__ = G__17045.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__16185__auto__ || G__17045.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return null;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  };
  var get__3 = function(o, k, not_found) {
    if (!(o == null)) {
      if (function() {
        var G__17046 = o;
        if (G__17046) {
          var bit__16185__auto__ = G__17046.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__16185__auto__ || G__17046.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k, not_found);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k, not_found);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$core$IFn$_invoke$arity$2 = get__2;
  get.cljs$core$IFn$_invoke$arity$3 = get__3;
  return get;
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    if (!(coll == null)) {
      return cljs.core._assoc.call(null, coll, k, v);
    } else {
      return cljs.core.PersistentHashMap.fromArrays.call(null, [k], [v]);
    }
  };
  var assoc__4 = function() {
    var G__17047__delegate = function(coll, k, v, kvs) {
      while (true) {
        var ret = assoc.call(null, coll, k, v);
        if (cljs.core.truth_(kvs)) {
          var G__17048 = ret;
          var G__17049 = cljs.core.first.call(null, kvs);
          var G__17050 = cljs.core.second.call(null, kvs);
          var G__17051 = cljs.core.nnext.call(null, kvs);
          coll = G__17048;
          k = G__17049;
          v = G__17050;
          kvs = G__17051;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__17047 = function(coll, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__17047__delegate.call(this, coll, k, v, kvs);
    };
    G__17047.cljs$lang$maxFixedArity = 3;
    G__17047.cljs$lang$applyTo = function(arglist__17052) {
      var coll = cljs.core.first(arglist__17052);
      arglist__17052 = cljs.core.next(arglist__17052);
      var k = cljs.core.first(arglist__17052);
      arglist__17052 = cljs.core.next(arglist__17052);
      var v = cljs.core.first(arglist__17052);
      var kvs = cljs.core.rest(arglist__17052);
      return G__17047__delegate(coll, k, v, kvs);
    };
    G__17047.cljs$core$IFn$_invoke$arity$variadic = G__17047__delegate;
    return G__17047;
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        return assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$core$IFn$_invoke$arity$3 = assoc__3;
  assoc.cljs$core$IFn$_invoke$arity$variadic = assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc;
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll;
  };
  var dissoc__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._dissoc.call(null, coll, k);
    }
  };
  var dissoc__3 = function() {
    var G__17053__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = dissoc.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__17054 = ret;
            var G__17055 = cljs.core.first.call(null, ks);
            var G__17056 = cljs.core.next.call(null, ks);
            coll = G__17054;
            k = G__17055;
            ks = G__17056;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__17053 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17053__delegate.call(this, coll, k, ks);
    };
    G__17053.cljs$lang$maxFixedArity = 2;
    G__17053.cljs$lang$applyTo = function(arglist__17057) {
      var coll = cljs.core.first(arglist__17057);
      arglist__17057 = cljs.core.next(arglist__17057);
      var k = cljs.core.first(arglist__17057);
      var ks = cljs.core.rest(arglist__17057);
      return G__17053__delegate(coll, k, ks);
    };
    G__17053.cljs$core$IFn$_invoke$arity$variadic = G__17053__delegate;
    return G__17053;
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        return dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$core$IFn$_invoke$arity$1 = dissoc__1;
  dissoc.cljs$core$IFn$_invoke$arity$2 = dissoc__2;
  dissoc.cljs$core$IFn$_invoke$arity$variadic = dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc;
}();
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__15542__auto__ = goog.isFunction(f);
  if (or__15542__auto__) {
    return or__15542__auto__;
  } else {
    var G__17061 = f;
    if (G__17061) {
      var bit__16192__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__15542__auto____$1 = bit__16192__auto__;
        if (cljs.core.truth_(or__15542__auto____$1)) {
          return or__15542__auto____$1;
        } else {
          return G__17061.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__17061.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__17061);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__17061);
    }
  }
};
cljs.core.with_meta = function with_meta(o, meta) {
  if (cljs.core.fn_QMARK_.call(null, o) && !function() {
    var G__17069 = o;
    if (G__17069) {
      var bit__16192__auto__ = G__17069.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__16192__auto__ || G__17069.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__17069.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__17069);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__17069);
    }
  }()) {
    return with_meta.call(null, function() {
      if (typeof cljs.core.t17070 !== "undefined") {
      } else {
        cljs.core.t17070 = function(meta, o, with_meta, meta17071) {
          this.meta = meta;
          this.o = o;
          this.with_meta = with_meta;
          this.meta17071 = meta17071;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393217;
        };
        cljs.core.t17070.cljs$lang$type = true;
        cljs.core.t17070.cljs$lang$ctorStr = "cljs.core/t17070";
        cljs.core.t17070.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
          return cljs.core._write.call(null, writer__16110__auto__, "cljs.core/t17070");
        };
        cljs.core.t17070.prototype.call = function() {
          var G__17074__delegate = function(self__, args) {
            var self____$1 = this;
            var _ = self____$1;
            return cljs.core.apply.call(null, self__.o, args);
          };
          var G__17074 = function(self__, var_args) {
            var self__ = this;
            var args = null;
            if (arguments.length > 1) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
            }
            return G__17074__delegate.call(this, self__, args);
          };
          G__17074.cljs$lang$maxFixedArity = 1;
          G__17074.cljs$lang$applyTo = function(arglist__17075) {
            var self__ = cljs.core.first(arglist__17075);
            var args = cljs.core.rest(arglist__17075);
            return G__17074__delegate(self__, args);
          };
          G__17074.cljs$core$IFn$_invoke$arity$variadic = G__17074__delegate;
          return G__17074;
        }();
        cljs.core.t17070.prototype.apply = function(self__, args17073) {
          var self__ = this;
          var self____$1 = this;
          return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args17073)));
        };
        cljs.core.t17070.prototype.cljs$core$IFn$_invoke$arity$2 = function() {
          var G__17076__delegate = function(args) {
            var _ = this;
            return cljs.core.apply.call(null, self__.o, args);
          };
          var G__17076 = function(var_args) {
            var self__ = this;
            var args = null;
            if (arguments.length > 0) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
            }
            return G__17076__delegate.call(this, args);
          };
          G__17076.cljs$lang$maxFixedArity = 0;
          G__17076.cljs$lang$applyTo = function(arglist__17077) {
            var args = cljs.core.seq(arglist__17077);
            return G__17076__delegate(args);
          };
          G__17076.cljs$core$IFn$_invoke$arity$variadic = G__17076__delegate;
          return G__17076;
        }();
        cljs.core.t17070.prototype.cljs$core$Fn$ = true;
        cljs.core.t17070.prototype.cljs$core$IMeta$_meta$arity$1 = function(_17072) {
          var self__ = this;
          var _17072__$1 = this;
          return self__.meta17071;
        };
        cljs.core.t17070.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_17072, meta17071__$1) {
          var self__ = this;
          var _17072__$1 = this;
          return new cljs.core.t17070(self__.meta, self__.o, self__.with_meta, meta17071__$1);
        };
        cljs.core.__GT_t17070 = function __GT_t17070(meta__$1, o__$1, with_meta__$1, meta17071) {
          return new cljs.core.t17070(meta__$1, o__$1, with_meta__$1, meta17071);
        };
      }
      return new cljs.core.t17070(meta, o, with_meta, null);
    }(), meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta.call(null, o, meta);
    }
  }
};
cljs.core.meta = function meta(o) {
  if (function() {
    var and__15530__auto__ = !(o == null);
    if (and__15530__auto__) {
      var G__17081 = o;
      if (G__17081) {
        var bit__16192__auto__ = G__17081.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__16192__auto__ || G__17081.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__17081.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__17081);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__17081);
      }
    } else {
      return and__15530__auto__;
    }
  }()) {
    return cljs.core._meta.call(null, o);
  } else {
    return null;
  }
};
cljs.core.peek = function peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek.call(null, coll);
  }
};
cljs.core.pop = function pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop.call(null, coll);
  }
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll;
  };
  var disj__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._disjoin.call(null, coll, k);
    }
  };
  var disj__3 = function() {
    var G__17082__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = disj.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__17083 = ret;
            var G__17084 = cljs.core.first.call(null, ks);
            var G__17085 = cljs.core.next.call(null, ks);
            coll = G__17083;
            k = G__17084;
            ks = G__17085;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__17082 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17082__delegate.call(this, coll, k, ks);
    };
    G__17082.cljs$lang$maxFixedArity = 2;
    G__17082.cljs$lang$applyTo = function(arglist__17086) {
      var coll = cljs.core.first(arglist__17086);
      arglist__17086 = cljs.core.next(arglist__17086);
      var k = cljs.core.first(arglist__17086);
      var ks = cljs.core.rest(arglist__17086);
      return G__17082__delegate(coll, k, ks);
    };
    G__17082.cljs$core$IFn$_invoke$arity$variadic = G__17082__delegate;
    return G__17082;
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        return disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$core$IFn$_invoke$arity$1 = disj__1;
  disj.cljs$core$IFn$_invoke$arity$2 = disj__2;
  disj.cljs$core$IFn$_invoke$arity$variadic = disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return disj;
}();
cljs.core.string_hash_cache = function() {
  var obj17088 = {};
  return obj17088;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = goog.string.hashCode(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.check_string_hash_cache = function check_string_hash_cache(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj17092 = {};
      return obj17092;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache.call(null, k);
  }
};
cljs.core.hash = function hash(o) {
  if (function() {
    var G__17094 = o;
    if (G__17094) {
      var bit__16185__auto__ = G__17094.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__16185__auto__ || G__17094.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._hash.call(null, o);
  } else {
    if (typeof o === "number") {
      return Math.floor(o) % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.check_string_hash_cache.call(null, o);
          } else {
            if (o == null) {
              return 0;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return cljs.core._hash.call(null, o);
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  return coll == null || cljs.core.not.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__17096 = x;
    if (G__17096) {
      var bit__16192__auto__ = G__17096.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__16192__auto__ || G__17096.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__17096.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__17096);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__17096);
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__17098 = x;
    if (G__17098) {
      var bit__16192__auto__ = G__17098.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__16192__auto__ || G__17098.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__17098.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__17098);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__17098);
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__17100 = x;
  if (G__17100) {
    var bit__16192__auto__ = G__17100.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__16192__auto__ || G__17100.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__17100.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__17100);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__17100);
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__17102 = x;
  if (G__17102) {
    var bit__16192__auto__ = G__17102.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__16192__auto__ || G__17102.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__17102.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__17102);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__17102);
  }
};
cljs.core.sorted_QMARK_ = function sorted_QMARK_(x) {
  var G__17104 = x;
  if (G__17104) {
    var bit__16192__auto__ = G__17104.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__16192__auto__ || G__17104.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__17104.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__17104);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__17104);
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__17106 = x;
  if (G__17106) {
    var bit__16192__auto__ = G__17106.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__16192__auto__ || G__17106.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__17106.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__17106);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__17106);
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__17108 = x;
    if (G__17108) {
      var bit__16192__auto__ = G__17108.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__16192__auto__ || G__17108.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__17108.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__17108);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__17108);
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__17110 = x;
  if (G__17110) {
    var bit__16192__auto__ = G__17110.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__16192__auto__ || G__17110.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__17110.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__17110);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__17110);
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__17112 = x;
  if (G__17112) {
    var bit__16185__auto__ = G__17112.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__16185__auto__ || G__17112.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    var obj17116 = {};
    return obj17116;
  };
  var js_obj__1 = function() {
    var G__17117__delegate = function(keyvals) {
      return cljs.core.apply.call(null, goog.object.create, keyvals);
    };
    var G__17117 = function(var_args) {
      var keyvals = null;
      if (arguments.length > 0) {
        keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__17117__delegate.call(this, keyvals);
    };
    G__17117.cljs$lang$maxFixedArity = 0;
    G__17117.cljs$lang$applyTo = function(arglist__17118) {
      var keyvals = cljs.core.seq(arglist__17118);
      return G__17117__delegate(keyvals);
    };
    G__17117.cljs$core$IFn$_invoke$arity$variadic = G__17117__delegate;
    return G__17117;
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        return js_obj__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$core$IFn$_invoke$arity$0 = js_obj__0;
  js_obj.cljs$core$IFn$_invoke$arity$variadic = js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return js_obj;
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  goog.object.forEach(obj, function(val, key, obj__$1) {
    return keys.push(key);
  });
  return keys;
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__17119 = i__$1 + 1;
      var G__17120 = j__$1 + 1;
      var G__17121 = len__$1 - 1;
      i__$1 = G__17119;
      j__$1 = G__17120;
      len__$1 = G__17121;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__17122 = i__$1 - 1;
      var G__17123 = j__$1 - 1;
      var G__17124 = len__$1 - 1;
      i__$1 = G__17122;
      j__$1 = G__17123;
      len__$1 = G__17124;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj17126 = {};
  return obj17126;
}();
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__17128 = s;
    if (G__17128) {
      var bit__16192__auto__ = G__17128.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__16192__auto__ || G__17128.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__17128.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__17128);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__17128);
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__17130 = s;
  if (G__17130) {
    var bit__16192__auto__ = G__17130.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__16192__auto__ || G__17130.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__17130.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__17130);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__17130);
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__15542__auto__ = cljs.core.fn_QMARK_.call(null, f);
  if (or__15542__auto__) {
    return or__15542__auto__;
  } else {
    var G__17134 = f;
    if (G__17134) {
      var bit__16192__auto__ = G__17134.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__16192__auto__ || G__17134.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__17134.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__17134);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__17134);
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  return typeof n === "number" && (!isNaN(n) && (!(n === Infinity) && parseFloat(n) === parseInt(n, 10)));
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if (cljs.core.get.call(null, coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function find(coll, k) {
  if (!(coll == null) && (cljs.core.associative_QMARK_.call(null, coll) && cljs.core.contains_QMARK_.call(null, coll, k))) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.call(null, coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true;
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var distinct_QMARK___3 = function() {
    var G__17135__delegate = function(x, y, more) {
      if (!cljs.core._EQ_.call(null, x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([y, x], true);
        var xs = more;
        while (true) {
          var x__$1 = cljs.core.first.call(null, xs);
          var etc = cljs.core.next.call(null, xs);
          if (cljs.core.truth_(xs)) {
            if (cljs.core.contains_QMARK_.call(null, s, x__$1)) {
              return false;
            } else {
              var G__17136 = cljs.core.conj.call(null, s, x__$1);
              var G__17137 = etc;
              s = G__17136;
              xs = G__17137;
              continue;
            }
          } else {
            return true;
          }
          break;
        }
      } else {
        return false;
      }
    };
    var G__17135 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17135__delegate.call(this, x, y, more);
    };
    G__17135.cljs$lang$maxFixedArity = 2;
    G__17135.cljs$lang$applyTo = function(arglist__17138) {
      var x = cljs.core.first(arglist__17138);
      arglist__17138 = cljs.core.next(arglist__17138);
      var y = cljs.core.first(arglist__17138);
      var more = cljs.core.rest(arglist__17138);
      return G__17135__delegate(x, y, more);
    };
    G__17135.cljs$core$IFn$_invoke$arity$variadic = G__17135__delegate;
    return G__17135;
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        return distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return distinct_QMARK_;
}();
cljs.core.sequence = function sequence(coll) {
  if (cljs.core.seq_QMARK_.call(null, coll)) {
    return coll;
  } else {
    var or__15542__auto__ = cljs.core.seq.call(null, coll);
    if (or__15542__auto__) {
      return or__15542__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.compare = function compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type.call(null, x) === cljs.core.type.call(null, y)) {
          if (function() {
            var G__17140 = x;
            if (G__17140) {
              var bit__16185__auto__ = G__17140.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__16185__auto__ || G__17140.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._compare.call(null, x, y);
          } else {
            return goog.array.defaultCompare(x, y);
          }
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            throw new Error("compare on non-nil objects of different types");
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count.call(null, xs);
    var yl = cljs.core.count.call(null, ys);
    if (xl < yl) {
      return-1;
    } else {
      if (xl > yl) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return compare_indexed.call(null, xs, ys, xl, 0);
        } else {
          return null;
        }
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while (true) {
      var d = cljs.core.compare.call(null, cljs.core.nth.call(null, xs, n), cljs.core.nth.call(null, ys, n));
      if (d === 0 && n + 1 < len) {
        var G__17141 = xs;
        var G__17142 = ys;
        var G__17143 = len;
        var G__17144 = n + 1;
        xs = G__17141;
        ys = G__17142;
        len = G__17143;
        n = G__17144;
        continue;
      } else {
        return d;
      }
      break;
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$core$IFn$_invoke$arity$2 = compare_indexed__2;
  compare_indexed.cljs$core$IFn$_invoke$arity$4 = compare_indexed__4;
  return compare_indexed;
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if (cljs.core._EQ_.call(null, f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = f.call(null, x, y);
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(f.call(null, y, x))) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.call(null, cljs.core.compare, coll);
  };
  var sort__2 = function(comp, coll) {
    if (cljs.core.seq.call(null, coll)) {
      var a = cljs.core.to_array.call(null, coll);
      goog.array.stableSort(a, cljs.core.fn__GT_comparator.call(null, comp));
      return cljs.core.seq.call(null, a);
    } else {
      return cljs.core.List.EMPTY;
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$core$IFn$_invoke$arity$1 = sort__1;
  sort.cljs$core$IFn$_invoke$arity$2 = sort__2;
  return sort;
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.call(null, keyfn, cljs.core.compare, coll);
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.call(null, function(x, y) {
      return cljs.core.fn__GT_comparator.call(null, comp).call(null, keyfn.call(null, x), keyfn.call(null, y));
    }, coll);
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$core$IFn$_invoke$arity$2 = sort_by__2;
  sort_by.cljs$core$IFn$_invoke$arity$3 = sort_by__3;
  return sort_by;
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4090__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4090__auto__) {
      var s = temp__4090__auto__;
      return cljs.core.reduce.call(null, f, cljs.core.first.call(null, s), cljs.core.next.call(null, s));
    } else {
      return f.call(null);
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        var nval = f.call(null, val__$1, cljs.core.first.call(null, coll__$1));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__17145 = nval;
          var G__17146 = cljs.core.next.call(null, coll__$1);
          val__$1 = G__17145;
          coll__$1 = G__17146;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$core$IFn$_invoke$arity$2 = seq_reduce__2;
  seq_reduce.cljs$core$IFn$_invoke$arity$3 = seq_reduce__3;
  return seq_reduce;
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.call(null, a);
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if (function() {
      var G__17149 = coll;
      if (G__17149) {
        var bit__16185__auto__ = G__17149.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__16185__auto__ || G__17149.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  var reduce__3 = function(f, val, coll) {
    if (function() {
      var G__17150 = coll;
      if (G__17150) {
        var bit__16185__auto__ = G__17150.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__16185__auto__ || G__17150.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f, val);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f, val);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f, val);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f, val);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, val, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$core$IFn$_invoke$arity$2 = reduce__2;
  reduce.cljs$core$IFn$_invoke$arity$3 = reduce__3;
  return reduce;
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce.call(null, coll, f, init);
  } else {
    return init;
  }
};
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0;
  };
  var _PLUS___1 = function(x) {
    return x;
  };
  var _PLUS___2 = function(x, y) {
    return x + y;
  };
  var _PLUS___3 = function() {
    var G__17151__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _PLUS_, x + y, more);
    };
    var G__17151 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17151__delegate.call(this, x, y, more);
    };
    G__17151.cljs$lang$maxFixedArity = 2;
    G__17151.cljs$lang$applyTo = function(arglist__17152) {
      var x = cljs.core.first(arglist__17152);
      arglist__17152 = cljs.core.next(arglist__17152);
      var y = cljs.core.first(arglist__17152);
      var more = cljs.core.rest(arglist__17152);
      return G__17151__delegate(x, y, more);
    };
    G__17151.cljs$core$IFn$_invoke$arity$variadic = G__17151__delegate;
    return G__17151;
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        return _PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$core$IFn$_invoke$arity$0 = _PLUS___0;
  _PLUS_.cljs$core$IFn$_invoke$arity$1 = _PLUS___1;
  _PLUS_.cljs$core$IFn$_invoke$arity$2 = _PLUS___2;
  _PLUS_.cljs$core$IFn$_invoke$arity$variadic = _PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return _PLUS_;
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x;
  };
  var ___2 = function(x, y) {
    return x - y;
  };
  var ___3 = function() {
    var G__17153__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _, x - y, more);
    };
    var G__17153 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17153__delegate.call(this, x, y, more);
    };
    G__17153.cljs$lang$maxFixedArity = 2;
    G__17153.cljs$lang$applyTo = function(arglist__17154) {
      var x = cljs.core.first(arglist__17154);
      arglist__17154 = cljs.core.next(arglist__17154);
      var y = cljs.core.first(arglist__17154);
      var more = cljs.core.rest(arglist__17154);
      return G__17153__delegate(x, y, more);
    };
    G__17153.cljs$core$IFn$_invoke$arity$variadic = G__17153__delegate;
    return G__17153;
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        return ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$core$IFn$_invoke$arity$1 = ___1;
  _.cljs$core$IFn$_invoke$arity$2 = ___2;
  _.cljs$core$IFn$_invoke$arity$variadic = ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _;
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1;
  };
  var _STAR___1 = function(x) {
    return x;
  };
  var _STAR___2 = function(x, y) {
    return x * y;
  };
  var _STAR___3 = function() {
    var G__17155__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _STAR_, x * y, more);
    };
    var G__17155 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17155__delegate.call(this, x, y, more);
    };
    G__17155.cljs$lang$maxFixedArity = 2;
    G__17155.cljs$lang$applyTo = function(arglist__17156) {
      var x = cljs.core.first(arglist__17156);
      arglist__17156 = cljs.core.next(arglist__17156);
      var y = cljs.core.first(arglist__17156);
      var more = cljs.core.rest(arglist__17156);
      return G__17155__delegate(x, y, more);
    };
    G__17155.cljs$core$IFn$_invoke$arity$variadic = G__17155__delegate;
    return G__17155;
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        return _STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$core$IFn$_invoke$arity$0 = _STAR___0;
  _STAR_.cljs$core$IFn$_invoke$arity$1 = _STAR___1;
  _STAR_.cljs$core$IFn$_invoke$arity$2 = _STAR___2;
  _STAR_.cljs$core$IFn$_invoke$arity$variadic = _STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return _STAR_;
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.call(null, 1, x);
  };
  var _SLASH___2 = function(x, y) {
    return x / y;
  };
  var _SLASH___3 = function() {
    var G__17157__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _SLASH_, _SLASH_.call(null, x, y), more);
    };
    var G__17157 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17157__delegate.call(this, x, y, more);
    };
    G__17157.cljs$lang$maxFixedArity = 2;
    G__17157.cljs$lang$applyTo = function(arglist__17158) {
      var x = cljs.core.first(arglist__17158);
      arglist__17158 = cljs.core.next(arglist__17158);
      var y = cljs.core.first(arglist__17158);
      var more = cljs.core.rest(arglist__17158);
      return G__17157__delegate(x, y, more);
    };
    G__17157.cljs$core$IFn$_invoke$arity$variadic = G__17157__delegate;
    return G__17157;
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        return _SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$core$IFn$_invoke$arity$1 = _SLASH___1;
  _SLASH_.cljs$core$IFn$_invoke$arity$2 = _SLASH___2;
  _SLASH_.cljs$core$IFn$_invoke$arity$variadic = _SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return _SLASH_;
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true;
  };
  var _LT___2 = function(x, y) {
    return x < y;
  };
  var _LT___3 = function() {
    var G__17159__delegate = function(x, y, more) {
      while (true) {
        if (x < y) {
          if (cljs.core.next.call(null, more)) {
            var G__17160 = y;
            var G__17161 = cljs.core.first.call(null, more);
            var G__17162 = cljs.core.next.call(null, more);
            x = G__17160;
            y = G__17161;
            more = G__17162;
            continue;
          } else {
            return y < cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__17159 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17159__delegate.call(this, x, y, more);
    };
    G__17159.cljs$lang$maxFixedArity = 2;
    G__17159.cljs$lang$applyTo = function(arglist__17163) {
      var x = cljs.core.first(arglist__17163);
      arglist__17163 = cljs.core.next(arglist__17163);
      var y = cljs.core.first(arglist__17163);
      var more = cljs.core.rest(arglist__17163);
      return G__17159__delegate(x, y, more);
    };
    G__17159.cljs$core$IFn$_invoke$arity$variadic = G__17159__delegate;
    return G__17159;
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        return _LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$core$IFn$_invoke$arity$1 = _LT___1;
  _LT_.cljs$core$IFn$_invoke$arity$2 = _LT___2;
  _LT_.cljs$core$IFn$_invoke$arity$variadic = _LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT_;
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true;
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y;
  };
  var _LT__EQ___3 = function() {
    var G__17164__delegate = function(x, y, more) {
      while (true) {
        if (x <= y) {
          if (cljs.core.next.call(null, more)) {
            var G__17165 = y;
            var G__17166 = cljs.core.first.call(null, more);
            var G__17167 = cljs.core.next.call(null, more);
            x = G__17165;
            y = G__17166;
            more = G__17167;
            continue;
          } else {
            return y <= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__17164 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17164__delegate.call(this, x, y, more);
    };
    G__17164.cljs$lang$maxFixedArity = 2;
    G__17164.cljs$lang$applyTo = function(arglist__17168) {
      var x = cljs.core.first(arglist__17168);
      arglist__17168 = cljs.core.next(arglist__17168);
      var y = cljs.core.first(arglist__17168);
      var more = cljs.core.rest(arglist__17168);
      return G__17164__delegate(x, y, more);
    };
    G__17164.cljs$core$IFn$_invoke$arity$variadic = G__17164__delegate;
    return G__17164;
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        return _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ_;
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true;
  };
  var _GT___2 = function(x, y) {
    return x > y;
  };
  var _GT___3 = function() {
    var G__17169__delegate = function(x, y, more) {
      while (true) {
        if (x > y) {
          if (cljs.core.next.call(null, more)) {
            var G__17170 = y;
            var G__17171 = cljs.core.first.call(null, more);
            var G__17172 = cljs.core.next.call(null, more);
            x = G__17170;
            y = G__17171;
            more = G__17172;
            continue;
          } else {
            return y > cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__17169 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17169__delegate.call(this, x, y, more);
    };
    G__17169.cljs$lang$maxFixedArity = 2;
    G__17169.cljs$lang$applyTo = function(arglist__17173) {
      var x = cljs.core.first(arglist__17173);
      arglist__17173 = cljs.core.next(arglist__17173);
      var y = cljs.core.first(arglist__17173);
      var more = cljs.core.rest(arglist__17173);
      return G__17169__delegate(x, y, more);
    };
    G__17169.cljs$core$IFn$_invoke$arity$variadic = G__17169__delegate;
    return G__17169;
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        return _GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$core$IFn$_invoke$arity$1 = _GT___1;
  _GT_.cljs$core$IFn$_invoke$arity$2 = _GT___2;
  _GT_.cljs$core$IFn$_invoke$arity$variadic = _GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT_;
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true;
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y;
  };
  var _GT__EQ___3 = function() {
    var G__17174__delegate = function(x, y, more) {
      while (true) {
        if (x >= y) {
          if (cljs.core.next.call(null, more)) {
            var G__17175 = y;
            var G__17176 = cljs.core.first.call(null, more);
            var G__17177 = cljs.core.next.call(null, more);
            x = G__17175;
            y = G__17176;
            more = G__17177;
            continue;
          } else {
            return y >= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__17174 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17174__delegate.call(this, x, y, more);
    };
    G__17174.cljs$lang$maxFixedArity = 2;
    G__17174.cljs$lang$applyTo = function(arglist__17178) {
      var x = cljs.core.first(arglist__17178);
      arglist__17178 = cljs.core.next(arglist__17178);
      var y = cljs.core.first(arglist__17178);
      var more = cljs.core.rest(arglist__17178);
      return G__17174__delegate(x, y, more);
    };
    G__17174.cljs$core$IFn$_invoke$arity$variadic = G__17174__delegate;
    return G__17174;
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        return _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ_;
}();
cljs.core.dec = function dec(x) {
  return x - 1;
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x;
  };
  var max__2 = function(x, y) {
    var x__15849__auto__ = x;
    var y__15850__auto__ = y;
    return x__15849__auto__ > y__15850__auto__ ? x__15849__auto__ : y__15850__auto__;
  };
  var max__3 = function() {
    var G__17179__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, max, function() {
        var x__15849__auto__ = x;
        var y__15850__auto__ = y;
        return x__15849__auto__ > y__15850__auto__ ? x__15849__auto__ : y__15850__auto__;
      }(), more);
    };
    var G__17179 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17179__delegate.call(this, x, y, more);
    };
    G__17179.cljs$lang$maxFixedArity = 2;
    G__17179.cljs$lang$applyTo = function(arglist__17180) {
      var x = cljs.core.first(arglist__17180);
      arglist__17180 = cljs.core.next(arglist__17180);
      var y = cljs.core.first(arglist__17180);
      var more = cljs.core.rest(arglist__17180);
      return G__17179__delegate(x, y, more);
    };
    G__17179.cljs$core$IFn$_invoke$arity$variadic = G__17179__delegate;
    return G__17179;
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        return max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$core$IFn$_invoke$arity$1 = max__1;
  max.cljs$core$IFn$_invoke$arity$2 = max__2;
  max.cljs$core$IFn$_invoke$arity$variadic = max__3.cljs$core$IFn$_invoke$arity$variadic;
  return max;
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x;
  };
  var min__2 = function(x, y) {
    var x__15856__auto__ = x;
    var y__15857__auto__ = y;
    return x__15856__auto__ < y__15857__auto__ ? x__15856__auto__ : y__15857__auto__;
  };
  var min__3 = function() {
    var G__17181__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, min, function() {
        var x__15856__auto__ = x;
        var y__15857__auto__ = y;
        return x__15856__auto__ < y__15857__auto__ ? x__15856__auto__ : y__15857__auto__;
      }(), more);
    };
    var G__17181 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17181__delegate.call(this, x, y, more);
    };
    G__17181.cljs$lang$maxFixedArity = 2;
    G__17181.cljs$lang$applyTo = function(arglist__17182) {
      var x = cljs.core.first(arglist__17182);
      arglist__17182 = cljs.core.next(arglist__17182);
      var y = cljs.core.first(arglist__17182);
      var more = cljs.core.rest(arglist__17182);
      return G__17181__delegate(x, y, more);
    };
    G__17181.cljs$core$IFn$_invoke$arity$variadic = G__17181__delegate;
    return G__17181;
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        return min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$core$IFn$_invoke$arity$1 = min__1;
  min.cljs$core$IFn$_invoke$arity$2 = min__2;
  min.cljs$core$IFn$_invoke$arity$variadic = min__3.cljs$core$IFn$_invoke$arity$variadic;
  return min;
}();
cljs.core.byte$ = function byte$(x) {
  return x;
};
cljs.core.char$ = function char$(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error("Argument to char must be a character or number");
      } else {
        return null;
      }
    }
  }
};
cljs.core.short$ = function short$(x) {
  return x;
};
cljs.core.float$ = function float$(x) {
  return x;
};
cljs.core.double$ = function double$(x) {
  return x;
};
cljs.core.unchecked_byte = function unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function() {
  var unchecked_add = null;
  var unchecked_add__0 = function() {
    return 0;
  };
  var unchecked_add__1 = function(x) {
    return x;
  };
  var unchecked_add__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add__3 = function() {
    var G__17183__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add, x + y, more);
    };
    var G__17183 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17183__delegate.call(this, x, y, more);
    };
    G__17183.cljs$lang$maxFixedArity = 2;
    G__17183.cljs$lang$applyTo = function(arglist__17184) {
      var x = cljs.core.first(arglist__17184);
      arglist__17184 = cljs.core.next(arglist__17184);
      var y = cljs.core.first(arglist__17184);
      var more = cljs.core.rest(arglist__17184);
      return G__17183__delegate(x, y, more);
    };
    G__17183.cljs$core$IFn$_invoke$arity$variadic = G__17183__delegate;
    return G__17183;
  }();
  unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add__0.call(this);
      case 1:
        return unchecked_add__1.call(this, x);
      case 2:
        return unchecked_add__2.call(this, x, y);
      default:
        return unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add.cljs$lang$maxFixedArity = 2;
  unchecked_add.cljs$lang$applyTo = unchecked_add__3.cljs$lang$applyTo;
  unchecked_add.cljs$core$IFn$_invoke$arity$0 = unchecked_add__0;
  unchecked_add.cljs$core$IFn$_invoke$arity$1 = unchecked_add__1;
  unchecked_add.cljs$core$IFn$_invoke$arity$2 = unchecked_add__2;
  unchecked_add.cljs$core$IFn$_invoke$arity$variadic = unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add;
}();
cljs.core.unchecked_add_int = function() {
  var unchecked_add_int = null;
  var unchecked_add_int__0 = function() {
    return 0;
  };
  var unchecked_add_int__1 = function(x) {
    return x;
  };
  var unchecked_add_int__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add_int__3 = function() {
    var G__17185__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add_int, x + y, more);
    };
    var G__17185 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17185__delegate.call(this, x, y, more);
    };
    G__17185.cljs$lang$maxFixedArity = 2;
    G__17185.cljs$lang$applyTo = function(arglist__17186) {
      var x = cljs.core.first(arglist__17186);
      arglist__17186 = cljs.core.next(arglist__17186);
      var y = cljs.core.first(arglist__17186);
      var more = cljs.core.rest(arglist__17186);
      return G__17185__delegate(x, y, more);
    };
    G__17185.cljs$core$IFn$_invoke$arity$variadic = G__17185__delegate;
    return G__17185;
  }();
  unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add_int__0.call(this);
      case 1:
        return unchecked_add_int__1.call(this, x);
      case 2:
        return unchecked_add_int__2.call(this, x, y);
      default:
        return unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add_int.cljs$lang$maxFixedArity = 2;
  unchecked_add_int.cljs$lang$applyTo = unchecked_add_int__3.cljs$lang$applyTo;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = unchecked_add_int__0;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = unchecked_add_int__1;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = unchecked_add_int__2;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add_int;
}();
cljs.core.unchecked_dec = function unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function() {
  var unchecked_divide_int = null;
  var unchecked_divide_int__1 = function(x) {
    return unchecked_divide_int.call(null, 1, x);
  };
  var unchecked_divide_int__2 = function(x, y) {
    return x / y;
  };
  var unchecked_divide_int__3 = function() {
    var G__17187__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_divide_int, unchecked_divide_int.call(null, x, y), more);
    };
    var G__17187 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17187__delegate.call(this, x, y, more);
    };
    G__17187.cljs$lang$maxFixedArity = 2;
    G__17187.cljs$lang$applyTo = function(arglist__17188) {
      var x = cljs.core.first(arglist__17188);
      arglist__17188 = cljs.core.next(arglist__17188);
      var y = cljs.core.first(arglist__17188);
      var more = cljs.core.rest(arglist__17188);
      return G__17187__delegate(x, y, more);
    };
    G__17187.cljs$core$IFn$_invoke$arity$variadic = G__17187__delegate;
    return G__17187;
  }();
  unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_divide_int__1.call(this, x);
      case 2:
        return unchecked_divide_int__2.call(this, x, y);
      default:
        return unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  unchecked_divide_int.cljs$lang$applyTo = unchecked_divide_int__3.cljs$lang$applyTo;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = unchecked_divide_int__1;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = unchecked_divide_int__2;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_divide_int;
}();
cljs.core.unchecked_inc = function unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function() {
  var unchecked_multiply = null;
  var unchecked_multiply__0 = function() {
    return 1;
  };
  var unchecked_multiply__1 = function(x) {
    return x;
  };
  var unchecked_multiply__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply__3 = function() {
    var G__17189__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply, x * y, more);
    };
    var G__17189 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17189__delegate.call(this, x, y, more);
    };
    G__17189.cljs$lang$maxFixedArity = 2;
    G__17189.cljs$lang$applyTo = function(arglist__17190) {
      var x = cljs.core.first(arglist__17190);
      arglist__17190 = cljs.core.next(arglist__17190);
      var y = cljs.core.first(arglist__17190);
      var more = cljs.core.rest(arglist__17190);
      return G__17189__delegate(x, y, more);
    };
    G__17189.cljs$core$IFn$_invoke$arity$variadic = G__17189__delegate;
    return G__17189;
  }();
  unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply__0.call(this);
      case 1:
        return unchecked_multiply__1.call(this, x);
      case 2:
        return unchecked_multiply__2.call(this, x, y);
      default:
        return unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply.cljs$lang$maxFixedArity = 2;
  unchecked_multiply.cljs$lang$applyTo = unchecked_multiply__3.cljs$lang$applyTo;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply__0;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply__1;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply__2;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply;
}();
cljs.core.unchecked_multiply_int = function() {
  var unchecked_multiply_int = null;
  var unchecked_multiply_int__0 = function() {
    return 1;
  };
  var unchecked_multiply_int__1 = function(x) {
    return x;
  };
  var unchecked_multiply_int__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply_int__3 = function() {
    var G__17191__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply_int, x * y, more);
    };
    var G__17191 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17191__delegate.call(this, x, y, more);
    };
    G__17191.cljs$lang$maxFixedArity = 2;
    G__17191.cljs$lang$applyTo = function(arglist__17192) {
      var x = cljs.core.first(arglist__17192);
      arglist__17192 = cljs.core.next(arglist__17192);
      var y = cljs.core.first(arglist__17192);
      var more = cljs.core.rest(arglist__17192);
      return G__17191__delegate(x, y, more);
    };
    G__17191.cljs$core$IFn$_invoke$arity$variadic = G__17191__delegate;
    return G__17191;
  }();
  unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply_int__0.call(this);
      case 1:
        return unchecked_multiply_int__1.call(this, x);
      case 2:
        return unchecked_multiply_int__2.call(this, x, y);
      default:
        return unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  unchecked_multiply_int.cljs$lang$applyTo = unchecked_multiply_int__3.cljs$lang$applyTo;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply_int__0;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply_int__1;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply_int__2;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply_int;
}();
cljs.core.unchecked_negate = function unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function unchecked_remainder_int(x, n) {
  return cljs.core.mod.call(null, x, n);
};
cljs.core.unchecked_substract = function() {
  var unchecked_substract = null;
  var unchecked_substract__1 = function(x) {
    return-x;
  };
  var unchecked_substract__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract__3 = function() {
    var G__17193__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract, x - y, more);
    };
    var G__17193 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17193__delegate.call(this, x, y, more);
    };
    G__17193.cljs$lang$maxFixedArity = 2;
    G__17193.cljs$lang$applyTo = function(arglist__17194) {
      var x = cljs.core.first(arglist__17194);
      arglist__17194 = cljs.core.next(arglist__17194);
      var y = cljs.core.first(arglist__17194);
      var more = cljs.core.rest(arglist__17194);
      return G__17193__delegate(x, y, more);
    };
    G__17193.cljs$core$IFn$_invoke$arity$variadic = G__17193__delegate;
    return G__17193;
  }();
  unchecked_substract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract__1.call(this, x);
      case 2:
        return unchecked_substract__2.call(this, x, y);
      default:
        return unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract.cljs$lang$maxFixedArity = 2;
  unchecked_substract.cljs$lang$applyTo = unchecked_substract__3.cljs$lang$applyTo;
  unchecked_substract.cljs$core$IFn$_invoke$arity$1 = unchecked_substract__1;
  unchecked_substract.cljs$core$IFn$_invoke$arity$2 = unchecked_substract__2;
  unchecked_substract.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract;
}();
cljs.core.unchecked_substract_int = function() {
  var unchecked_substract_int = null;
  var unchecked_substract_int__1 = function(x) {
    return-x;
  };
  var unchecked_substract_int__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract_int__3 = function() {
    var G__17195__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract_int, x - y, more);
    };
    var G__17195 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17195__delegate.call(this, x, y, more);
    };
    G__17195.cljs$lang$maxFixedArity = 2;
    G__17195.cljs$lang$applyTo = function(arglist__17196) {
      var x = cljs.core.first(arglist__17196);
      arglist__17196 = cljs.core.next(arglist__17196);
      var y = cljs.core.first(arglist__17196);
      var more = cljs.core.rest(arglist__17196);
      return G__17195__delegate(x, y, more);
    };
    G__17195.cljs$core$IFn$_invoke$arity$variadic = G__17195__delegate;
    return G__17195;
  }();
  unchecked_substract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract_int__1.call(this, x);
      case 2:
        return unchecked_substract_int__2.call(this, x, y);
      default:
        return unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract_int.cljs$lang$maxFixedArity = 2;
  unchecked_substract_int.cljs$lang$applyTo = unchecked_substract_int__3.cljs$lang$applyTo;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$1 = unchecked_substract_int__1;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$2 = unchecked_substract_int__2;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract_int;
}();
cljs.core.fix = function fix(q) {
  if (q >= 0) {
    return Math.floor.call(null, q);
  } else {
    return Math.ceil.call(null, q);
  }
};
cljs.core.int$ = function int$(x) {
  return x | 0;
};
cljs.core.unchecked_int = function unchecked_int(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.unchecked_long = function unchecked_long(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.booleans = function booleans(x) {
  return x;
};
cljs.core.bytes = function bytes(x) {
  return x;
};
cljs.core.chars = function chars(x) {
  return x;
};
cljs.core.shorts = function shorts(x) {
  return x;
};
cljs.core.ints = function ints(x) {
  return x;
};
cljs.core.floats = function floats(x) {
  return x;
};
cljs.core.doubles = function doubles(x) {
  return x;
};
cljs.core.longs = function longs(x) {
  return x;
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix.call(null, (n - rem) / d);
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot.call(null, n, d);
  return n - d * q;
};
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return Math.random.call(null);
  };
  var rand__1 = function(n) {
    return n * rand.call(null);
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return cljs.core.fix.call(null, cljs.core.rand.call(null, n));
};
cljs.core.bit_xor = function bit_xor(x, y) {
  return x ^ y;
};
cljs.core.bit_and = function bit_and(x, y) {
  return x & y;
};
cljs.core.bit_or = function bit_or(x, y) {
  return x | y;
};
cljs.core.bit_and_not = function bit_and_not(x, y) {
  return x & ~y;
};
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function bit_not(x) {
  return~x;
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true;
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv.call(null, x, y);
  };
  var _EQ__EQ___3 = function() {
    var G__17197__delegate = function(x, y, more) {
      while (true) {
        if (_EQ__EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__17198 = y;
            var G__17199 = cljs.core.first.call(null, more);
            var G__17200 = cljs.core.next.call(null, more);
            x = G__17198;
            y = G__17199;
            more = G__17200;
            continue;
          } else {
            return _EQ__EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__17197 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17197__delegate.call(this, x, y, more);
    };
    G__17197.cljs$lang$maxFixedArity = 2;
    G__17197.cljs$lang$applyTo = function(arglist__17201) {
      var x = cljs.core.first(arglist__17201);
      arglist__17201 = cljs.core.next(arglist__17201);
      var y = cljs.core.first(arglist__17201);
      var more = cljs.core.rest(arglist__17201);
      return G__17197__delegate(x, y, more);
    };
    G__17197.cljs$core$IFn$_invoke$arity$variadic = G__17197__delegate;
    return G__17197;
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        return _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ__EQ_;
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__17202 = n__$1 - 1;
      var G__17203 = cljs.core.next.call(null, xs);
      n__$1 = G__17202;
      xs = G__17203;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return "";
  };
  var str__1 = function(x) {
    if (x == null) {
      return "";
    } else {
      return x.toString();
    }
  };
  var str__2 = function() {
    var G__17204__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(str.call(null, x));
      var more = ys;
      while (true) {
        if (cljs.core.truth_(more)) {
          var G__17205 = sb.append(str.call(null, cljs.core.first.call(null, more)));
          var G__17206 = cljs.core.next.call(null, more);
          sb = G__17205;
          more = G__17206;
          continue;
        } else {
          return sb.toString();
        }
        break;
      }
    };
    var G__17204 = function(x, var_args) {
      var ys = null;
      if (arguments.length > 1) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__17204__delegate.call(this, x, ys);
    };
    G__17204.cljs$lang$maxFixedArity = 1;
    G__17204.cljs$lang$applyTo = function(arglist__17207) {
      var x = cljs.core.first(arglist__17207);
      var ys = cljs.core.rest(arglist__17207);
      return G__17204__delegate(x, ys);
    };
    G__17204.cljs$core$IFn$_invoke$arity$variadic = G__17204__delegate;
    return G__17204;
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        return str__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$core$IFn$_invoke$arity$0 = str__0;
  str.cljs$core$IFn$_invoke$arity$1 = str__1;
  str.cljs$core$IFn$_invoke$arity$variadic = str__2.cljs$core$IFn$_invoke$arity$variadic;
  return str;
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start);
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end);
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$core$IFn$_invoke$arity$2 = subs__2;
  subs.cljs$core$IFn$_invoke$arity$3 = subs__3;
  return subs;
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.sequential_QMARK_.call(null, y) ? function() {
    var xs = cljs.core.seq.call(null, x);
    var ys = cljs.core.seq.call(null, y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.call(null, cljs.core.first.call(null, xs), cljs.core.first.call(null, ys))) {
            var G__17208 = cljs.core.next.call(null, xs);
            var G__17209 = cljs.core.next.call(null, ys);
            xs = G__17208;
            ys = G__17209;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return false;
            } else {
              return null;
            }
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.hash_coll = function hash_coll(coll) {
  if (cljs.core.seq.call(null, coll)) {
    var res = cljs.core.hash.call(null, cljs.core.first.call(null, coll));
    var s = cljs.core.next.call(null, coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__17210 = cljs.core.hash_combine.call(null, res, cljs.core.hash.call(null, cljs.core.first.call(null, s)));
        var G__17211 = cljs.core.next.call(null, s);
        res = G__17210;
        s = G__17211;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq.call(null, m);
  while (true) {
    if (s) {
      var e = cljs.core.first.call(null, s);
      var G__17212 = (h + (cljs.core.hash.call(null, cljs.core.key.call(null, e)) ^ cljs.core.hash.call(null, cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__17213 = cljs.core.next.call(null, s);
      h = G__17212;
      s = G__17213;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq.call(null, s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first.call(null, s__$1);
      var G__17214 = (h + cljs.core.hash.call(null, e)) % 4503599627370496;
      var G__17215 = cljs.core.next.call(null, s__$1);
      h = G__17214;
      s__$1 = G__17215;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var seq__17222_17228 = cljs.core.seq.call(null, fn_map);
  var chunk__17223_17229 = null;
  var count__17224_17230 = 0;
  var i__17225_17231 = 0;
  while (true) {
    if (i__17225_17231 < count__17224_17230) {
      var vec__17226_17232 = cljs.core._nth.call(null, chunk__17223_17229, i__17225_17231);
      var key_name_17233 = cljs.core.nth.call(null, vec__17226_17232, 0, null);
      var f_17234 = cljs.core.nth.call(null, vec__17226_17232, 1, null);
      var str_name_17235 = cljs.core.name.call(null, key_name_17233);
      obj[str_name_17235] = f_17234;
      var G__17236 = seq__17222_17228;
      var G__17237 = chunk__17223_17229;
      var G__17238 = count__17224_17230;
      var G__17239 = i__17225_17231 + 1;
      seq__17222_17228 = G__17236;
      chunk__17223_17229 = G__17237;
      count__17224_17230 = G__17238;
      i__17225_17231 = G__17239;
      continue;
    } else {
      var temp__4092__auto___17240 = cljs.core.seq.call(null, seq__17222_17228);
      if (temp__4092__auto___17240) {
        var seq__17222_17241__$1 = temp__4092__auto___17240;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__17222_17241__$1)) {
          var c__16290__auto___17242 = cljs.core.chunk_first.call(null, seq__17222_17241__$1);
          var G__17243 = cljs.core.chunk_rest.call(null, seq__17222_17241__$1);
          var G__17244 = c__16290__auto___17242;
          var G__17245 = cljs.core.count.call(null, c__16290__auto___17242);
          var G__17246 = 0;
          seq__17222_17228 = G__17243;
          chunk__17223_17229 = G__17244;
          count__17224_17230 = G__17245;
          i__17225_17231 = G__17246;
          continue;
        } else {
          var vec__17227_17247 = cljs.core.first.call(null, seq__17222_17241__$1);
          var key_name_17248 = cljs.core.nth.call(null, vec__17227_17247, 0, null);
          var f_17249 = cljs.core.nth.call(null, vec__17227_17247, 1, null);
          var str_name_17250 = cljs.core.name.call(null, key_name_17248);
          obj[str_name_17250] = f_17249;
          var G__17251 = cljs.core.next.call(null, seq__17222_17241__$1);
          var G__17252 = null;
          var G__17253 = 0;
          var G__17254 = 0;
          seq__17222_17228 = G__17251;
          chunk__17223_17229 = G__17252;
          count__17224_17230 = G__17253;
          i__17225_17231 = G__17254;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core/List");
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__15953__auto__ = self__.__hash;
  if (!(h__15953__auto__ == null)) {
    return h__15953__auto__;
  } else {
    var h__15953__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__15953__auto____$1;
    return h__15953__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest.call(null, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.__GT_List = function __GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core/EmptyList");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.__GT_EmptyList = function __GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__17256 = coll;
  if (G__17256) {
    var bit__16192__auto__ = G__17256.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__16192__auto__ || G__17256.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__17256.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__17256);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__17256);
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq.call(null, coll);
};
cljs.core.reverse = function reverse(coll) {
  if (cljs.core.reversible_QMARK_.call(null, coll)) {
    return cljs.core.rseq.call(null, coll);
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function() {
  var list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while (true) {
        if (!(xs__$1 == null)) {
          arr.push(cljs.core._first.call(null, xs__$1));
          var G__17257 = cljs.core._next.call(null, xs__$1);
          xs__$1 = G__17257;
          continue;
        } else {
          return arr;
        }
        break;
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while (true) {
      if (i > 0) {
        var G__17258 = i - 1;
        var G__17259 = cljs.core._conj.call(null, r, arr[i - 1]);
        i = G__17258;
        r = G__17259;
        continue;
      } else {
        return r;
      }
      break;
    }
  };
  var list = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return list__delegate.call(this, xs);
  };
  list.cljs$lang$maxFixedArity = 0;
  list.cljs$lang$applyTo = function(arglist__17260) {
    var xs = cljs.core.seq(arglist__17260);
    return list__delegate(xs);
  };
  list.cljs$core$IFn$_invoke$arity$variadic = list__delegate;
  return list;
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core/Cons");
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__15953__auto__ = self__.__hash;
  if (!(h__15953__auto__ == null)) {
    return h__15953__auto__;
  } else {
    var h__15953__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__15953__auto____$1;
    return h__15953__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq.call(null, self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_Cons = function __GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.cons = function cons(x, coll) {
  if (function() {
    var or__15542__auto__ = coll == null;
    if (or__15542__auto__) {
      return or__15542__auto__;
    } else {
      var G__17264 = coll;
      if (G__17264) {
        var bit__16185__auto__ = G__17264.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__16185__auto__ || G__17264.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq.call(null, coll), null);
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__17266 = x;
  if (G__17266) {
    var bit__16192__auto__ = G__17266.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__16192__auto__ || G__17266.cljs$core$IList$) {
      return true;
    } else {
      if (!G__17266.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__17266);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__17266);
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core/Keyword");
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._hash == null) {
    self__._hash = cljs.core.hash_combine.call(null, cljs.core.hash.call(null, self__.ns), cljs.core.hash.call(null, self__.name)) + 2654435769;
    return self__._hash;
  } else {
    return self__._hash;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__17268 = null;
  var G__17268__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw);
  };
  var G__17268__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw, not_found);
  };
  G__17268 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17268__2.call(this, self__, coll);
      case 3:
        return G__17268__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17268;
}();
cljs.core.Keyword.prototype.apply = function(self__, args17267) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args17267)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return[cljs.core.str(":"), cljs.core.str(self__.fqn)].join("");
};
cljs.core.__GT_Keyword = function __GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if (function() {
    var G__17270 = x;
    if (G__17270) {
      var bit__16185__auto__ = G__17270.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__16185__auto__ || G__17270.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._namespace.call(null, x);
  } else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if (name instanceof cljs.core.Keyword) {
      return name;
    } else {
      if (name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace.call(null, name), cljs.core.name.call(null, name), name.str, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null);
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$core$IFn$_invoke$arity$1 = keyword__1;
  keyword.cljs$core$IFn$_invoke$arity$2 = keyword__2;
  return keyword;
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core/LazySeq");
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__15953__auto__ = self__.__hash;
  if (!(h__15953__auto__ == null)) {
    return h__15953__auto__;
  } else {
    var h__15953__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__15953__auto____$1;
    return h__15953__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = self__.fn.call(null);
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__17271 = ls.sval();
        ls = G__17271;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq.call(null, self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest.call(null, self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_LazySeq = function __GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.__GT_ChunkBuffer = function __GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core/ArrayChunk");
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.__GT_ArrayChunk = function __GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length);
  };
  var array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length);
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end);
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$core$IFn$_invoke$arity$1 = array_chunk__1;
  array_chunk.cljs$core$IFn$_invoke$arity$2 = array_chunk__2;
  array_chunk.cljs$core$IFn$_invoke$arity$3 = array_chunk__3;
  return array_chunk;
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core/ChunkedCons");
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__15953__auto__ = self__.__hash;
  if (!(h__15953__auto__ == null)) {
    return h__15953__auto__;
  } else {
    var h__15953__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__15953__auto____$1;
    return h__15953__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq.call(null, self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, this$__$1);
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.__GT_ChunkedCons = function __GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if (cljs.core._count.call(null, chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first.call(null, s);
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest.call(null, s);
};
cljs.core.chunk_next = function chunk_next(s) {
  if (function() {
    var G__17273 = s;
    if (G__17273) {
      var bit__16185__auto__ = G__17273.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__16185__auto__ || G__17273.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next.call(null, s);
  } else {
    return cljs.core.seq.call(null, cljs.core._chunked_rest.call(null, s));
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq.call(null, s__$1)) {
      ary.push(cljs.core.first.call(null, s__$1));
      var G__17274 = cljs.core.next.call(null, s__$1);
      s__$1 = G__17274;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = new Array(cljs.core.count.call(null, coll));
  var i_17275 = 0;
  var xs_17276 = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs_17276) {
      ret[i_17275] = cljs.core.to_array.call(null, cljs.core.first.call(null, xs_17276));
      var G__17277 = i_17275 + 1;
      var G__17278 = cljs.core.next.call(null, xs_17276);
      i_17275 = G__17277;
      xs_17276 = G__17278;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function() {
  var int_array = null;
  var int_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return int_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__17279 = i + 1;
          var G__17280 = cljs.core.next.call(null, s__$1);
          i = G__17279;
          s__$1 = G__17280;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__16390__auto___17281 = size;
      var i_17282 = 0;
      while (true) {
        if (i_17282 < n__16390__auto___17281) {
          a[i_17282] = init_val_or_seq;
          var G__17283 = i_17282 + 1;
          i_17282 = G__17283;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return int_array__1.call(this, size);
      case 2:
        return int_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  int_array.cljs$core$IFn$_invoke$arity$1 = int_array__1;
  int_array.cljs$core$IFn$_invoke$arity$2 = int_array__2;
  return int_array;
}();
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return long_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__17284 = i + 1;
          var G__17285 = cljs.core.next.call(null, s__$1);
          i = G__17284;
          s__$1 = G__17285;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__16390__auto___17286 = size;
      var i_17287 = 0;
      while (true) {
        if (i_17287 < n__16390__auto___17286) {
          a[i_17287] = init_val_or_seq;
          var G__17288 = i_17287 + 1;
          i_17287 = G__17288;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$core$IFn$_invoke$arity$1 = long_array__1;
  long_array.cljs$core$IFn$_invoke$arity$2 = long_array__2;
  return long_array;
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return double_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__17289 = i + 1;
          var G__17290 = cljs.core.next.call(null, s__$1);
          i = G__17289;
          s__$1 = G__17290;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__16390__auto___17291 = size;
      var i_17292 = 0;
      while (true) {
        if (i_17292 < n__16390__auto___17291) {
          a[i_17292] = init_val_or_seq;
          var G__17293 = i_17292 + 1;
          i_17292 = G__17293;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$core$IFn$_invoke$arity$1 = double_array__1;
  double_array.cljs$core$IFn$_invoke$arity$2 = double_array__2;
  return double_array;
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return object_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__17294 = i + 1;
          var G__17295 = cljs.core.next.call(null, s__$1);
          i = G__17294;
          s__$1 = G__17295;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__16390__auto___17296 = size;
      var i_17297 = 0;
      while (true) {
        if (i_17297 < n__16390__auto___17296) {
          a[i_17297] = init_val_or_seq;
          var G__17298 = i_17297 + 1;
          i_17297 = G__17298;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$core$IFn$_invoke$arity$1 = object_array__1;
  object_array.cljs$core$IFn$_invoke$arity$2 = object_array__2;
  return object_array;
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if (cljs.core.counted_QMARK_.call(null, s)) {
    return cljs.core.count.call(null, s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq.call(null, s__$1)) {
        var G__17299 = cljs.core.next.call(null, s__$1);
        var G__17300 = i - 1;
        var G__17301 = sum + 1;
        s__$1 = G__17299;
        i = G__17300;
        sum = G__17301;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next.call(null, arglist) == null) {
      return cljs.core.seq.call(null, cljs.core.first.call(null, arglist));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, arglist), spread.call(null, cljs.core.next.call(null, arglist)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null;
    }, null, null);
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x;
    }, null, null);
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq.call(null, x);
      if (s) {
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, s), concat.call(null, cljs.core.chunk_rest.call(null, s), y));
        } else {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), concat.call(null, cljs.core.rest.call(null, s), y));
        }
      } else {
        return y;
      }
    }, null, null);
  };
  var concat__3 = function() {
    var G__17302__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq.call(null, xys);
          if (xys__$1) {
            if (cljs.core.chunked_seq_QMARK_.call(null, xys__$1)) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, xys__$1), cat.call(null, cljs.core.chunk_rest.call(null, xys__$1), zs__$1));
            } else {
              return cljs.core.cons.call(null, cljs.core.first.call(null, xys__$1), cat.call(null, cljs.core.rest.call(null, xys__$1), zs__$1));
            }
          } else {
            if (cljs.core.truth_(zs__$1)) {
              return cat.call(null, cljs.core.first.call(null, zs__$1), cljs.core.next.call(null, zs__$1));
            } else {
              return null;
            }
          }
        }, null, null);
      };
      return cat.call(null, concat.call(null, x, y), zs);
    };
    var G__17302 = function(x, y, var_args) {
      var zs = null;
      if (arguments.length > 2) {
        zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17302__delegate.call(this, x, y, zs);
    };
    G__17302.cljs$lang$maxFixedArity = 2;
    G__17302.cljs$lang$applyTo = function(arglist__17303) {
      var x = cljs.core.first(arglist__17303);
      arglist__17303 = cljs.core.next(arglist__17303);
      var y = cljs.core.first(arglist__17303);
      var zs = cljs.core.rest(arglist__17303);
      return G__17302__delegate(x, y, zs);
    };
    G__17302.cljs$core$IFn$_invoke$arity$variadic = G__17302__delegate;
    return G__17302;
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        return concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$core$IFn$_invoke$arity$0 = concat__0;
  concat.cljs$core$IFn$_invoke$arity$1 = concat__1;
  concat.cljs$core$IFn$_invoke$arity$2 = concat__2;
  concat.cljs$core$IFn$_invoke$arity$variadic = concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return concat;
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq.call(null, args);
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons.call(null, a, args);
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, args));
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, args)));
  };
  var list_STAR___5 = function() {
    var G__17304__delegate = function(a, b, c, d, more) {
      return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, more)))));
    };
    var G__17304 = function(a, b, c, d, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__17304__delegate.call(this, a, b, c, d, more);
    };
    G__17304.cljs$lang$maxFixedArity = 4;
    G__17304.cljs$lang$applyTo = function(arglist__17305) {
      var a = cljs.core.first(arglist__17305);
      arglist__17305 = cljs.core.next(arglist__17305);
      var b = cljs.core.first(arglist__17305);
      arglist__17305 = cljs.core.next(arglist__17305);
      var c = cljs.core.first(arglist__17305);
      arglist__17305 = cljs.core.next(arglist__17305);
      var d = cljs.core.first(arglist__17305);
      var more = cljs.core.rest(arglist__17305);
      return G__17304__delegate(a, b, c, d, more);
    };
    G__17304.cljs$core$IFn$_invoke$arity$variadic = G__17304__delegate;
    return G__17304;
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        return list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$core$IFn$_invoke$arity$1 = list_STAR___1;
  list_STAR_.cljs$core$IFn$_invoke$arity$2 = list_STAR___2;
  list_STAR_.cljs$core$IFn$_invoke$arity$3 = list_STAR___3;
  list_STAR_.cljs$core$IFn$_invoke$arity$4 = list_STAR___4;
  list_STAR_.cljs$core$IFn$_invoke$arity$variadic = list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return list_STAR_;
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient.call(null, coll);
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_.call(null, tcoll);
};
cljs.core.conj_BANG_ = function() {
  var conj_BANG_ = null;
  var conj_BANG___2 = function(tcoll, val) {
    return cljs.core._conj_BANG_.call(null, tcoll, val);
  };
  var conj_BANG___3 = function() {
    var G__17306__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._conj_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__17307 = ntcoll;
          var G__17308 = cljs.core.first.call(null, vals);
          var G__17309 = cljs.core.next.call(null, vals);
          tcoll = G__17307;
          val = G__17308;
          vals = G__17309;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__17306 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17306__delegate.call(this, tcoll, val, vals);
    };
    G__17306.cljs$lang$maxFixedArity = 2;
    G__17306.cljs$lang$applyTo = function(arglist__17310) {
      var tcoll = cljs.core.first(arglist__17310);
      arglist__17310 = cljs.core.next(arglist__17310);
      var val = cljs.core.first(arglist__17310);
      var vals = cljs.core.rest(arglist__17310);
      return G__17306__delegate(tcoll, val, vals);
    };
    G__17306.cljs$core$IFn$_invoke$arity$variadic = G__17306__delegate;
    return G__17306;
  }();
  conj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return conj_BANG___2.call(this, tcoll, val);
      default:
        return conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj_BANG_.cljs$lang$maxFixedArity = 2;
  conj_BANG_.cljs$lang$applyTo = conj_BANG___3.cljs$lang$applyTo;
  conj_BANG_.cljs$core$IFn$_invoke$arity$2 = conj_BANG___2;
  conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return conj_BANG_;
}();
cljs.core.assoc_BANG_ = function() {
  var assoc_BANG_ = null;
  var assoc_BANG___3 = function(tcoll, key, val) {
    return cljs.core._assoc_BANG_.call(null, tcoll, key, val);
  };
  var assoc_BANG___4 = function() {
    var G__17311__delegate = function(tcoll, key, val, kvs) {
      while (true) {
        var ntcoll = cljs.core._assoc_BANG_.call(null, tcoll, key, val);
        if (cljs.core.truth_(kvs)) {
          var G__17312 = ntcoll;
          var G__17313 = cljs.core.first.call(null, kvs);
          var G__17314 = cljs.core.second.call(null, kvs);
          var G__17315 = cljs.core.nnext.call(null, kvs);
          tcoll = G__17312;
          key = G__17313;
          val = G__17314;
          kvs = G__17315;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__17311 = function(tcoll, key, val, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__17311__delegate.call(this, tcoll, key, val, kvs);
    };
    G__17311.cljs$lang$maxFixedArity = 3;
    G__17311.cljs$lang$applyTo = function(arglist__17316) {
      var tcoll = cljs.core.first(arglist__17316);
      arglist__17316 = cljs.core.next(arglist__17316);
      var key = cljs.core.first(arglist__17316);
      arglist__17316 = cljs.core.next(arglist__17316);
      var val = cljs.core.first(arglist__17316);
      var kvs = cljs.core.rest(arglist__17316);
      return G__17311__delegate(tcoll, key, val, kvs);
    };
    G__17311.cljs$core$IFn$_invoke$arity$variadic = G__17311__delegate;
    return G__17311;
  }();
  assoc_BANG_ = function(tcoll, key, val, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc_BANG___3.call(this, tcoll, key, val);
      default:
        return assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, val, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc_BANG_.cljs$lang$maxFixedArity = 3;
  assoc_BANG_.cljs$lang$applyTo = assoc_BANG___4.cljs$lang$applyTo;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = assoc_BANG___3;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc_BANG_;
}();
cljs.core.dissoc_BANG_ = function() {
  var dissoc_BANG_ = null;
  var dissoc_BANG___2 = function(tcoll, key) {
    return cljs.core._dissoc_BANG_.call(null, tcoll, key);
  };
  var dissoc_BANG___3 = function() {
    var G__17317__delegate = function(tcoll, key, ks) {
      while (true) {
        var ntcoll = cljs.core._dissoc_BANG_.call(null, tcoll, key);
        if (cljs.core.truth_(ks)) {
          var G__17318 = ntcoll;
          var G__17319 = cljs.core.first.call(null, ks);
          var G__17320 = cljs.core.next.call(null, ks);
          tcoll = G__17318;
          key = G__17319;
          ks = G__17320;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__17317 = function(tcoll, key, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17317__delegate.call(this, tcoll, key, ks);
    };
    G__17317.cljs$lang$maxFixedArity = 2;
    G__17317.cljs$lang$applyTo = function(arglist__17321) {
      var tcoll = cljs.core.first(arglist__17321);
      arglist__17321 = cljs.core.next(arglist__17321);
      var key = cljs.core.first(arglist__17321);
      var ks = cljs.core.rest(arglist__17321);
      return G__17317__delegate(tcoll, key, ks);
    };
    G__17317.cljs$core$IFn$_invoke$arity$variadic = G__17317__delegate;
    return G__17317;
  }();
  dissoc_BANG_ = function(tcoll, key, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return dissoc_BANG___2.call(this, tcoll, key);
      default:
        return dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc_BANG_.cljs$lang$maxFixedArity = 2;
  dissoc_BANG_.cljs$lang$applyTo = dissoc_BANG___3.cljs$lang$applyTo;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = dissoc_BANG___2;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc_BANG_;
}();
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_.call(null, tcoll);
};
cljs.core.disj_BANG_ = function() {
  var disj_BANG_ = null;
  var disj_BANG___2 = function(tcoll, val) {
    return cljs.core._disjoin_BANG_.call(null, tcoll, val);
  };
  var disj_BANG___3 = function() {
    var G__17322__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._disjoin_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__17323 = ntcoll;
          var G__17324 = cljs.core.first.call(null, vals);
          var G__17325 = cljs.core.next.call(null, vals);
          tcoll = G__17323;
          val = G__17324;
          vals = G__17325;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__17322 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17322__delegate.call(this, tcoll, val, vals);
    };
    G__17322.cljs$lang$maxFixedArity = 2;
    G__17322.cljs$lang$applyTo = function(arglist__17326) {
      var tcoll = cljs.core.first(arglist__17326);
      arglist__17326 = cljs.core.next(arglist__17326);
      var val = cljs.core.first(arglist__17326);
      var vals = cljs.core.rest(arglist__17326);
      return G__17322__delegate(tcoll, val, vals);
    };
    G__17322.cljs$core$IFn$_invoke$arity$variadic = G__17322__delegate;
    return G__17322;
  }();
  disj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return disj_BANG___2.call(this, tcoll, val);
      default:
        return disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj_BANG_.cljs$lang$maxFixedArity = 2;
  disj_BANG_.cljs$lang$applyTo = disj_BANG___3.cljs$lang$applyTo;
  disj_BANG_.cljs$core$IFn$_invoke$arity$2 = disj_BANG___2;
  disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return disj_BANG_;
}();
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq.call(null, args);
  if (argc === 0) {
    return f.call(null);
  } else {
    var a = cljs.core._first.call(null, args__$1);
    var args__$2 = cljs.core._rest.call(null, args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a);
      } else {
        return f.call(null, a);
      }
    } else {
      var b = cljs.core._first.call(null, args__$2);
      var args__$3 = cljs.core._rest.call(null, args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a, b);
        } else {
          return f.call(null, a, b);
        }
      } else {
        var c = cljs.core._first.call(null, args__$3);
        var args__$4 = cljs.core._rest.call(null, args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a, b, c);
          } else {
            return f.call(null, a, b, c);
          }
        } else {
          var d = cljs.core._first.call(null, args__$4);
          var args__$5 = cljs.core._rest.call(null, args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a, b, c, d);
            } else {
              return f.call(null, a, b, c, d);
            }
          } else {
            var e = cljs.core._first.call(null, args__$5);
            var args__$6 = cljs.core._rest.call(null, args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e);
              } else {
                return f.call(null, a, b, c, d, e);
              }
            } else {
              var f__$1 = cljs.core._first.call(null, args__$6);
              var args__$7 = cljs.core._rest.call(null, args__$6);
              if (argc === 6) {
                if (f__$1.cljs$core$IFn$_invoke$arity$6) {
                  return f__$1.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f__$1);
                } else {
                  return f__$1.call(null, a, b, c, d, e, f__$1);
                }
              } else {
                var g = cljs.core._first.call(null, args__$7);
                var args__$8 = cljs.core._rest.call(null, args__$7);
                if (argc === 7) {
                  if (f__$1.cljs$core$IFn$_invoke$arity$7) {
                    return f__$1.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f__$1, g);
                  } else {
                    return f__$1.call(null, a, b, c, d, e, f__$1, g);
                  }
                } else {
                  var h = cljs.core._first.call(null, args__$8);
                  var args__$9 = cljs.core._rest.call(null, args__$8);
                  if (argc === 8) {
                    if (f__$1.cljs$core$IFn$_invoke$arity$8) {
                      return f__$1.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f__$1, g, h);
                    } else {
                      return f__$1.call(null, a, b, c, d, e, f__$1, g, h);
                    }
                  } else {
                    var i = cljs.core._first.call(null, args__$9);
                    var args__$10 = cljs.core._rest.call(null, args__$9);
                    if (argc === 9) {
                      if (f__$1.cljs$core$IFn$_invoke$arity$9) {
                        return f__$1.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f__$1, g, h, i);
                      } else {
                        return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i);
                      }
                    } else {
                      var j = cljs.core._first.call(null, args__$10);
                      var args__$11 = cljs.core._rest.call(null, args__$10);
                      if (argc === 10) {
                        if (f__$1.cljs$core$IFn$_invoke$arity$10) {
                          return f__$1.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f__$1, g, h, i, j);
                        } else {
                          return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j);
                        }
                      } else {
                        var k = cljs.core._first.call(null, args__$11);
                        var args__$12 = cljs.core._rest.call(null, args__$11);
                        if (argc === 11) {
                          if (f__$1.cljs$core$IFn$_invoke$arity$11) {
                            return f__$1.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f__$1, g, h, i, j, k);
                          } else {
                            return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k);
                          }
                        } else {
                          var l = cljs.core._first.call(null, args__$12);
                          var args__$13 = cljs.core._rest.call(null, args__$12);
                          if (argc === 12) {
                            if (f__$1.cljs$core$IFn$_invoke$arity$12) {
                              return f__$1.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f__$1, g, h, i, j, k, l);
                            } else {
                              return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l);
                            }
                          } else {
                            var m = cljs.core._first.call(null, args__$13);
                            var args__$14 = cljs.core._rest.call(null, args__$13);
                            if (argc === 13) {
                              if (f__$1.cljs$core$IFn$_invoke$arity$13) {
                                return f__$1.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f__$1, g, h, i, j, k, l, m);
                              } else {
                                return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m);
                              }
                            } else {
                              var n = cljs.core._first.call(null, args__$14);
                              var args__$15 = cljs.core._rest.call(null, args__$14);
                              if (argc === 14) {
                                if (f__$1.cljs$core$IFn$_invoke$arity$14) {
                                  return f__$1.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n);
                                } else {
                                  return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n);
                                }
                              } else {
                                var o = cljs.core._first.call(null, args__$15);
                                var args__$16 = cljs.core._rest.call(null, args__$15);
                                if (argc === 15) {
                                  if (f__$1.cljs$core$IFn$_invoke$arity$15) {
                                    return f__$1.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o);
                                  } else {
                                    return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o);
                                  }
                                } else {
                                  var p = cljs.core._first.call(null, args__$16);
                                  var args__$17 = cljs.core._rest.call(null, args__$16);
                                  if (argc === 16) {
                                    if (f__$1.cljs$core$IFn$_invoke$arity$16) {
                                      return f__$1.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p);
                                    } else {
                                      return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p);
                                    }
                                  } else {
                                    var q = cljs.core._first.call(null, args__$17);
                                    var args__$18 = cljs.core._rest.call(null, args__$17);
                                    if (argc === 17) {
                                      if (f__$1.cljs$core$IFn$_invoke$arity$17) {
                                        return f__$1.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q);
                                      } else {
                                        return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q);
                                      }
                                    } else {
                                      var r = cljs.core._first.call(null, args__$18);
                                      var args__$19 = cljs.core._rest.call(null, args__$18);
                                      if (argc === 18) {
                                        if (f__$1.cljs$core$IFn$_invoke$arity$18) {
                                          return f__$1.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r);
                                        } else {
                                          return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r);
                                        }
                                      } else {
                                        var s = cljs.core._first.call(null, args__$19);
                                        var args__$20 = cljs.core._rest.call(null, args__$19);
                                        if (argc === 19) {
                                          if (f__$1.cljs$core$IFn$_invoke$arity$19) {
                                            return f__$1.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s);
                                          } else {
                                            return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s);
                                          }
                                        } else {
                                          var t = cljs.core._first.call(null, args__$20);
                                          var args__$21 = cljs.core._rest.call(null, args__$20);
                                          if (argc === 20) {
                                            if (f__$1.cljs$core$IFn$_invoke$arity$20) {
                                              return f__$1.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
                                            } else {
                                              return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, args, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, args);
      } else {
        return f.cljs$lang$applyTo(args);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, args));
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__6 = function() {
    var G__17327__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if (f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
        if (bc <= fixed_arity) {
          return cljs.core.apply_to.call(null, f, bc, arglist);
        } else {
          return f.cljs$lang$applyTo(arglist);
        }
      } else {
        return f.apply(f, cljs.core.to_array.call(null, arglist));
      }
    };
    var G__17327 = function(f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 5) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__17327__delegate.call(this, f, a, b, c, d, args);
    };
    G__17327.cljs$lang$maxFixedArity = 5;
    G__17327.cljs$lang$applyTo = function(arglist__17328) {
      var f = cljs.core.first(arglist__17328);
      arglist__17328 = cljs.core.next(arglist__17328);
      var a = cljs.core.first(arglist__17328);
      arglist__17328 = cljs.core.next(arglist__17328);
      var b = cljs.core.first(arglist__17328);
      arglist__17328 = cljs.core.next(arglist__17328);
      var c = cljs.core.first(arglist__17328);
      arglist__17328 = cljs.core.next(arglist__17328);
      var d = cljs.core.first(arglist__17328);
      var args = cljs.core.rest(arglist__17328);
      return G__17327__delegate(f, a, b, c, d, args);
    };
    G__17327.cljs$core$IFn$_invoke$arity$variadic = G__17327__delegate;
    return G__17327;
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        return apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$core$IFn$_invoke$arity$2 = apply__2;
  apply.cljs$core$IFn$_invoke$arity$3 = apply__3;
  apply.cljs$core$IFn$_invoke$arity$4 = apply__4;
  apply.cljs$core$IFn$_invoke$arity$5 = apply__5;
  apply.cljs$core$IFn$_invoke$arity$variadic = apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return apply;
}();
cljs.core.vary_meta = function() {
  var vary_meta = null;
  var vary_meta__2 = function(obj, f) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj)));
  };
  var vary_meta__3 = function(obj, f, a) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a));
  };
  var vary_meta__4 = function(obj, f, a, b) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b));
  };
  var vary_meta__5 = function(obj, f, a, b, c) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c));
  };
  var vary_meta__6 = function(obj, f, a, b, c, d) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c, d));
  };
  var vary_meta__7 = function() {
    var G__17329__delegate = function(obj, f, a, b, c, d, args) {
      return cljs.core.with_meta.call(null, obj, cljs.core.apply.call(null, f, cljs.core.meta.call(null, obj), a, b, c, d, args));
    };
    var G__17329 = function(obj, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__17329__delegate.call(this, obj, f, a, b, c, d, args);
    };
    G__17329.cljs$lang$maxFixedArity = 6;
    G__17329.cljs$lang$applyTo = function(arglist__17330) {
      var obj = cljs.core.first(arglist__17330);
      arglist__17330 = cljs.core.next(arglist__17330);
      var f = cljs.core.first(arglist__17330);
      arglist__17330 = cljs.core.next(arglist__17330);
      var a = cljs.core.first(arglist__17330);
      arglist__17330 = cljs.core.next(arglist__17330);
      var b = cljs.core.first(arglist__17330);
      arglist__17330 = cljs.core.next(arglist__17330);
      var c = cljs.core.first(arglist__17330);
      arglist__17330 = cljs.core.next(arglist__17330);
      var d = cljs.core.first(arglist__17330);
      var args = cljs.core.rest(arglist__17330);
      return G__17329__delegate(obj, f, a, b, c, d, args);
    };
    G__17329.cljs$core$IFn$_invoke$arity$variadic = G__17329__delegate;
    return G__17329;
  }();
  vary_meta = function(obj, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return vary_meta__2.call(this, obj, f);
      case 3:
        return vary_meta__3.call(this, obj, f, a);
      case 4:
        return vary_meta__4.call(this, obj, f, a, b);
      case 5:
        return vary_meta__5.call(this, obj, f, a, b, c);
      case 6:
        return vary_meta__6.call(this, obj, f, a, b, c, d);
      default:
        return vary_meta__7.cljs$core$IFn$_invoke$arity$variadic(obj, f, a, b, c, d, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  vary_meta.cljs$lang$maxFixedArity = 6;
  vary_meta.cljs$lang$applyTo = vary_meta__7.cljs$lang$applyTo;
  vary_meta.cljs$core$IFn$_invoke$arity$2 = vary_meta__2;
  vary_meta.cljs$core$IFn$_invoke$arity$3 = vary_meta__3;
  vary_meta.cljs$core$IFn$_invoke$arity$4 = vary_meta__4;
  vary_meta.cljs$core$IFn$_invoke$arity$5 = vary_meta__5;
  vary_meta.cljs$core$IFn$_invoke$arity$6 = vary_meta__6;
  vary_meta.cljs$core$IFn$_invoke$arity$variadic = vary_meta__7.cljs$core$IFn$_invoke$arity$variadic;
  return vary_meta;
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false;
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var not_EQ___3 = function() {
    var G__17331__delegate = function(x, y, more) {
      return cljs.core.not.call(null, cljs.core.apply.call(null, cljs.core._EQ_, x, y, more));
    };
    var G__17331 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17331__delegate.call(this, x, y, more);
    };
    G__17331.cljs$lang$maxFixedArity = 2;
    G__17331.cljs$lang$applyTo = function(arglist__17332) {
      var x = cljs.core.first(arglist__17332);
      arglist__17332 = cljs.core.next(arglist__17332);
      var y = cljs.core.first(arglist__17332);
      var more = cljs.core.rest(arglist__17332);
      return G__17331__delegate(x, y, more);
    };
    G__17331.cljs$core$IFn$_invoke$arity$variadic = G__17331__delegate;
    return G__17331;
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        return not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$core$IFn$_invoke$arity$1 = not_EQ___1;
  not_EQ_.cljs$core$IFn$_invoke$arity$2 = not_EQ___2;
  not_EQ_.cljs$core$IFn$_invoke$arity$variadic = not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return not_EQ_;
}();
cljs.core.not_empty = function not_empty(coll) {
  if (cljs.core.seq.call(null, coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, coll)))) {
        var G__17333 = pred;
        var G__17334 = cljs.core.next.call(null, coll);
        pred = G__17333;
        coll = G__17334;
        continue;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return false;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_.call(null, pred, coll);
};
cljs.core.some = function some(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll)) {
      var or__15542__auto__ = pred.call(null, cljs.core.first.call(null, coll));
      if (cljs.core.truth_(or__15542__auto__)) {
        return or__15542__auto__;
      } else {
        var G__17335 = pred;
        var G__17336 = cljs.core.next.call(null, coll);
        pred = G__17335;
        coll = G__17336;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not.call(null, cljs.core.some.call(null, pred, coll));
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if (cljs.core.integer_QMARK_.call(null, n)) {
    return(n & 1) === 0;
  } else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_.call(null, n);
};
cljs.core.identity = function identity(x) {
  return x;
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__17337 = null;
    var G__17337__0 = function() {
      return cljs.core.not.call(null, f.call(null));
    };
    var G__17337__1 = function(x) {
      return cljs.core.not.call(null, f.call(null, x));
    };
    var G__17337__2 = function(x, y) {
      return cljs.core.not.call(null, f.call(null, x, y));
    };
    var G__17337__3 = function() {
      var G__17338__delegate = function(x, y, zs) {
        return cljs.core.not.call(null, cljs.core.apply.call(null, f, x, y, zs));
      };
      var G__17338 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
        }
        return G__17338__delegate.call(this, x, y, zs);
      };
      G__17338.cljs$lang$maxFixedArity = 2;
      G__17338.cljs$lang$applyTo = function(arglist__17339) {
        var x = cljs.core.first(arglist__17339);
        arglist__17339 = cljs.core.next(arglist__17339);
        var y = cljs.core.first(arglist__17339);
        var zs = cljs.core.rest(arglist__17339);
        return G__17338__delegate(x, y, zs);
      };
      G__17338.cljs$core$IFn$_invoke$arity$variadic = G__17338__delegate;
      return G__17338;
    }();
    G__17337 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__17337__0.call(this);
        case 1:
          return G__17337__1.call(this, x);
        case 2:
          return G__17337__2.call(this, x, y);
        default:
          return G__17337__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__17337.cljs$lang$maxFixedArity = 2;
    G__17337.cljs$lang$applyTo = G__17337__3.cljs$lang$applyTo;
    return G__17337;
  }();
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__17340__delegate = function(args) {
      return x;
    };
    var G__17340 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__17340__delegate.call(this, args);
    };
    G__17340.cljs$lang$maxFixedArity = 0;
    G__17340.cljs$lang$applyTo = function(arglist__17341) {
      var args = cljs.core.seq(arglist__17341);
      return G__17340__delegate(args);
    };
    G__17340.cljs$core$IFn$_invoke$arity$variadic = G__17340__delegate;
    return G__17340;
  }();
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity;
  };
  var comp__1 = function(f) {
    return f;
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__17342 = null;
      var G__17342__0 = function() {
        return f.call(null, g.call(null));
      };
      var G__17342__1 = function(x) {
        return f.call(null, g.call(null, x));
      };
      var G__17342__2 = function(x, y) {
        return f.call(null, g.call(null, x, y));
      };
      var G__17342__3 = function(x, y, z) {
        return f.call(null, g.call(null, x, y, z));
      };
      var G__17342__4 = function() {
        var G__17343__delegate = function(x, y, z, args) {
          return f.call(null, cljs.core.apply.call(null, g, x, y, z, args));
        };
        var G__17343 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__17343__delegate.call(this, x, y, z, args);
        };
        G__17343.cljs$lang$maxFixedArity = 3;
        G__17343.cljs$lang$applyTo = function(arglist__17344) {
          var x = cljs.core.first(arglist__17344);
          arglist__17344 = cljs.core.next(arglist__17344);
          var y = cljs.core.first(arglist__17344);
          arglist__17344 = cljs.core.next(arglist__17344);
          var z = cljs.core.first(arglist__17344);
          var args = cljs.core.rest(arglist__17344);
          return G__17343__delegate(x, y, z, args);
        };
        G__17343.cljs$core$IFn$_invoke$arity$variadic = G__17343__delegate;
        return G__17343;
      }();
      G__17342 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__17342__0.call(this);
          case 1:
            return G__17342__1.call(this, x);
          case 2:
            return G__17342__2.call(this, x, y);
          case 3:
            return G__17342__3.call(this, x, y, z);
          default:
            return G__17342__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__17342.cljs$lang$maxFixedArity = 3;
      G__17342.cljs$lang$applyTo = G__17342__4.cljs$lang$applyTo;
      return G__17342;
    }();
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__17345 = null;
      var G__17345__0 = function() {
        return f.call(null, g.call(null, h.call(null)));
      };
      var G__17345__1 = function(x) {
        return f.call(null, g.call(null, h.call(null, x)));
      };
      var G__17345__2 = function(x, y) {
        return f.call(null, g.call(null, h.call(null, x, y)));
      };
      var G__17345__3 = function(x, y, z) {
        return f.call(null, g.call(null, h.call(null, x, y, z)));
      };
      var G__17345__4 = function() {
        var G__17346__delegate = function(x, y, z, args) {
          return f.call(null, g.call(null, cljs.core.apply.call(null, h, x, y, z, args)));
        };
        var G__17346 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__17346__delegate.call(this, x, y, z, args);
        };
        G__17346.cljs$lang$maxFixedArity = 3;
        G__17346.cljs$lang$applyTo = function(arglist__17347) {
          var x = cljs.core.first(arglist__17347);
          arglist__17347 = cljs.core.next(arglist__17347);
          var y = cljs.core.first(arglist__17347);
          arglist__17347 = cljs.core.next(arglist__17347);
          var z = cljs.core.first(arglist__17347);
          var args = cljs.core.rest(arglist__17347);
          return G__17346__delegate(x, y, z, args);
        };
        G__17346.cljs$core$IFn$_invoke$arity$variadic = G__17346__delegate;
        return G__17346;
      }();
      G__17345 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__17345__0.call(this);
          case 1:
            return G__17345__1.call(this, x);
          case 2:
            return G__17345__2.call(this, x, y);
          case 3:
            return G__17345__3.call(this, x, y, z);
          default:
            return G__17345__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__17345.cljs$lang$maxFixedArity = 3;
      G__17345.cljs$lang$applyTo = G__17345__4.cljs$lang$applyTo;
      return G__17345;
    }();
  };
  var comp__4 = function() {
    var G__17348__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse.call(null, cljs.core.list_STAR_.call(null, f1, f2, f3, fs));
      return function() {
        var G__17349__delegate = function(args) {
          var ret = cljs.core.apply.call(null, cljs.core.first.call(null, fs__$1), args);
          var fs__$2 = cljs.core.next.call(null, fs__$1);
          while (true) {
            if (fs__$2) {
              var G__17350 = cljs.core.first.call(null, fs__$2).call(null, ret);
              var G__17351 = cljs.core.next.call(null, fs__$2);
              ret = G__17350;
              fs__$2 = G__17351;
              continue;
            } else {
              return ret;
            }
            break;
          }
        };
        var G__17349 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__17349__delegate.call(this, args);
        };
        G__17349.cljs$lang$maxFixedArity = 0;
        G__17349.cljs$lang$applyTo = function(arglist__17352) {
          var args = cljs.core.seq(arglist__17352);
          return G__17349__delegate(args);
        };
        G__17349.cljs$core$IFn$_invoke$arity$variadic = G__17349__delegate;
        return G__17349;
      }();
    };
    var G__17348 = function(f1, f2, f3, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__17348__delegate.call(this, f1, f2, f3, fs);
    };
    G__17348.cljs$lang$maxFixedArity = 3;
    G__17348.cljs$lang$applyTo = function(arglist__17353) {
      var f1 = cljs.core.first(arglist__17353);
      arglist__17353 = cljs.core.next(arglist__17353);
      var f2 = cljs.core.first(arglist__17353);
      arglist__17353 = cljs.core.next(arglist__17353);
      var f3 = cljs.core.first(arglist__17353);
      var fs = cljs.core.rest(arglist__17353);
      return G__17348__delegate(f1, f2, f3, fs);
    };
    G__17348.cljs$core$IFn$_invoke$arity$variadic = G__17348__delegate;
    return G__17348;
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        return comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$core$IFn$_invoke$arity$0 = comp__0;
  comp.cljs$core$IFn$_invoke$arity$1 = comp__1;
  comp.cljs$core$IFn$_invoke$arity$2 = comp__2;
  comp.cljs$core$IFn$_invoke$arity$3 = comp__3;
  comp.cljs$core$IFn$_invoke$arity$variadic = comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return comp;
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__1 = function(f) {
    return f;
  };
  var partial__2 = function(f, arg1) {
    return function() {
      var G__17354__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, args);
      };
      var G__17354 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__17354__delegate.call(this, args);
      };
      G__17354.cljs$lang$maxFixedArity = 0;
      G__17354.cljs$lang$applyTo = function(arglist__17355) {
        var args = cljs.core.seq(arglist__17355);
        return G__17354__delegate(args);
      };
      G__17354.cljs$core$IFn$_invoke$arity$variadic = G__17354__delegate;
      return G__17354;
    }();
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__17356__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, args);
      };
      var G__17356 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__17356__delegate.call(this, args);
      };
      G__17356.cljs$lang$maxFixedArity = 0;
      G__17356.cljs$lang$applyTo = function(arglist__17357) {
        var args = cljs.core.seq(arglist__17357);
        return G__17356__delegate(args);
      };
      G__17356.cljs$core$IFn$_invoke$arity$variadic = G__17356__delegate;
      return G__17356;
    }();
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__17358__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, arg3, args);
      };
      var G__17358 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__17358__delegate.call(this, args);
      };
      G__17358.cljs$lang$maxFixedArity = 0;
      G__17358.cljs$lang$applyTo = function(arglist__17359) {
        var args = cljs.core.seq(arglist__17359);
        return G__17358__delegate(args);
      };
      G__17358.cljs$core$IFn$_invoke$arity$variadic = G__17358__delegate;
      return G__17358;
    }();
  };
  var partial__5 = function() {
    var G__17360__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__17361__delegate = function(args) {
          return cljs.core.apply.call(null, f, arg1, arg2, arg3, cljs.core.concat.call(null, more, args));
        };
        var G__17361 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__17361__delegate.call(this, args);
        };
        G__17361.cljs$lang$maxFixedArity = 0;
        G__17361.cljs$lang$applyTo = function(arglist__17362) {
          var args = cljs.core.seq(arglist__17362);
          return G__17361__delegate(args);
        };
        G__17361.cljs$core$IFn$_invoke$arity$variadic = G__17361__delegate;
        return G__17361;
      }();
    };
    var G__17360 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__17360__delegate.call(this, f, arg1, arg2, arg3, more);
    };
    G__17360.cljs$lang$maxFixedArity = 4;
    G__17360.cljs$lang$applyTo = function(arglist__17363) {
      var f = cljs.core.first(arglist__17363);
      arglist__17363 = cljs.core.next(arglist__17363);
      var arg1 = cljs.core.first(arglist__17363);
      arglist__17363 = cljs.core.next(arglist__17363);
      var arg2 = cljs.core.first(arglist__17363);
      arglist__17363 = cljs.core.next(arglist__17363);
      var arg3 = cljs.core.first(arglist__17363);
      var more = cljs.core.rest(arglist__17363);
      return G__17360__delegate(f, arg1, arg2, arg3, more);
    };
    G__17360.cljs$core$IFn$_invoke$arity$variadic = G__17360__delegate;
    return G__17360;
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return partial__1.call(this, f);
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        return partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$core$IFn$_invoke$arity$1 = partial__1;
  partial.cljs$core$IFn$_invoke$arity$2 = partial__2;
  partial.cljs$core$IFn$_invoke$arity$3 = partial__3;
  partial.cljs$core$IFn$_invoke$arity$4 = partial__4;
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return partial;
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__17364 = null;
      var G__17364__1 = function(a) {
        return f.call(null, a == null ? x : a);
      };
      var G__17364__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b);
      };
      var G__17364__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b, c);
      };
      var G__17364__4 = function() {
        var G__17365__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b, c, ds);
        };
        var G__17365 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__17365__delegate.call(this, a, b, c, ds);
        };
        G__17365.cljs$lang$maxFixedArity = 3;
        G__17365.cljs$lang$applyTo = function(arglist__17366) {
          var a = cljs.core.first(arglist__17366);
          arglist__17366 = cljs.core.next(arglist__17366);
          var b = cljs.core.first(arglist__17366);
          arglist__17366 = cljs.core.next(arglist__17366);
          var c = cljs.core.first(arglist__17366);
          var ds = cljs.core.rest(arglist__17366);
          return G__17365__delegate(a, b, c, ds);
        };
        G__17365.cljs$core$IFn$_invoke$arity$variadic = G__17365__delegate;
        return G__17365;
      }();
      G__17364 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__17364__1.call(this, a);
          case 2:
            return G__17364__2.call(this, a, b);
          case 3:
            return G__17364__3.call(this, a, b, c);
          default:
            return G__17364__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__17364.cljs$lang$maxFixedArity = 3;
      G__17364.cljs$lang$applyTo = G__17364__4.cljs$lang$applyTo;
      return G__17364;
    }();
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__17367 = null;
      var G__17367__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__17367__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c);
      };
      var G__17367__4 = function() {
        var G__17368__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c, ds);
        };
        var G__17368 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__17368__delegate.call(this, a, b, c, ds);
        };
        G__17368.cljs$lang$maxFixedArity = 3;
        G__17368.cljs$lang$applyTo = function(arglist__17369) {
          var a = cljs.core.first(arglist__17369);
          arglist__17369 = cljs.core.next(arglist__17369);
          var b = cljs.core.first(arglist__17369);
          arglist__17369 = cljs.core.next(arglist__17369);
          var c = cljs.core.first(arglist__17369);
          var ds = cljs.core.rest(arglist__17369);
          return G__17368__delegate(a, b, c, ds);
        };
        G__17368.cljs$core$IFn$_invoke$arity$variadic = G__17368__delegate;
        return G__17368;
      }();
      G__17367 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__17367__2.call(this, a, b);
          case 3:
            return G__17367__3.call(this, a, b, c);
          default:
            return G__17367__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__17367.cljs$lang$maxFixedArity = 3;
      G__17367.cljs$lang$applyTo = G__17367__4.cljs$lang$applyTo;
      return G__17367;
    }();
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__17370 = null;
      var G__17370__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__17370__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c == null ? z : c);
      };
      var G__17370__4 = function() {
        var G__17371__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
        };
        var G__17371 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__17371__delegate.call(this, a, b, c, ds);
        };
        G__17371.cljs$lang$maxFixedArity = 3;
        G__17371.cljs$lang$applyTo = function(arglist__17372) {
          var a = cljs.core.first(arglist__17372);
          arglist__17372 = cljs.core.next(arglist__17372);
          var b = cljs.core.first(arglist__17372);
          arglist__17372 = cljs.core.next(arglist__17372);
          var c = cljs.core.first(arglist__17372);
          var ds = cljs.core.rest(arglist__17372);
          return G__17371__delegate(a, b, c, ds);
        };
        G__17371.cljs$core$IFn$_invoke$arity$variadic = G__17371__delegate;
        return G__17371;
      }();
      G__17370 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__17370__2.call(this, a, b);
          case 3:
            return G__17370__3.call(this, a, b, c);
          default:
            return G__17370__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__17370.cljs$lang$maxFixedArity = 3;
      G__17370.cljs$lang$applyTo = G__17370__4.cljs$lang$applyTo;
      return G__17370;
    }();
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$core$IFn$_invoke$arity$2 = fnil__2;
  fnil.cljs$core$IFn$_invoke$arity$3 = fnil__3;
  fnil.cljs$core$IFn$_invoke$arity$4 = fnil__4;
  return fnil;
}();
cljs.core.map_indexed = function map_indexed(f, coll) {
  var mapi = function mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__16390__auto___17373 = size;
          var i_17374 = 0;
          while (true) {
            if (i_17374 < n__16390__auto___17373) {
              cljs.core.chunk_append.call(null, b, f.call(null, idx + i_17374, cljs.core._nth.call(null, c, i_17374)));
              var G__17375 = i_17374 + 1;
              i_17374 = G__17375;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), mapi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, idx, cljs.core.first.call(null, s)), mapi.call(null, idx + 1, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi.call(null, 0, coll);
};
cljs.core.keep = function keep(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__16390__auto___17376 = size;
        var i_17377 = 0;
        while (true) {
          if (i_17377 < n__16390__auto___17376) {
            var x_17378 = f.call(null, cljs.core._nth.call(null, c, i_17377));
            if (x_17378 == null) {
            } else {
              cljs.core.chunk_append.call(null, b, x_17378);
            }
            var G__17379 = i_17377 + 1;
            i_17377 = G__17379;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keep.call(null, f, cljs.core.chunk_rest.call(null, s)));
      } else {
        var x = f.call(null, cljs.core.first.call(null, s));
        if (x == null) {
          return keep.call(null, f, cljs.core.rest.call(null, s));
        } else {
          return cljs.core.cons.call(null, x, keep.call(null, f, cljs.core.rest.call(null, s)));
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.keep_indexed = function keep_indexed(f, coll) {
  var keepi = function keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__16390__auto___17380 = size;
          var i_17381 = 0;
          while (true) {
            if (i_17381 < n__16390__auto___17380) {
              var x_17382 = f.call(null, idx + i_17381, cljs.core._nth.call(null, c, i_17381));
              if (x_17382 == null) {
              } else {
                cljs.core.chunk_append.call(null, b, x_17382);
              }
              var G__17383 = i_17381 + 1;
              i_17381 = G__17383;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keepi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          var x = f.call(null, idx, cljs.core.first.call(null, s));
          if (x == null) {
            return keepi.call(null, idx + 1, cljs.core.rest.call(null, s));
          } else {
            return cljs.core.cons.call(null, x, keepi.call(null, idx + 1, cljs.core.rest.call(null, s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return keepi.call(null, 0, coll);
};
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true;
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$.call(null, p.call(null, x));
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__15530__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__15530__auto__)) {
            return p.call(null, y);
          } else {
            return and__15530__auto__;
          }
        }());
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__15530__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__15530__auto__)) {
            var and__15530__auto____$1 = p.call(null, y);
            if (cljs.core.truth_(and__15530__auto____$1)) {
              return p.call(null, z);
            } else {
              return and__15530__auto____$1;
            }
          } else {
            return and__15530__auto__;
          }
        }());
      };
      var ep1__4 = function() {
        var G__17390__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep1.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, p, args));
        };
        var G__17390 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__17390__delegate.call(this, x, y, z, args);
        };
        G__17390.cljs$lang$maxFixedArity = 3;
        G__17390.cljs$lang$applyTo = function(arglist__17391) {
          var x = cljs.core.first(arglist__17391);
          arglist__17391 = cljs.core.next(arglist__17391);
          var y = cljs.core.first(arglist__17391);
          arglist__17391 = cljs.core.next(arglist__17391);
          var z = cljs.core.first(arglist__17391);
          var args = cljs.core.rest(arglist__17391);
          return G__17390__delegate(x, y, z, args);
        };
        G__17390.cljs$core$IFn$_invoke$arity$variadic = G__17390__delegate;
        return G__17390;
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            return ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$core$IFn$_invoke$arity$0 = ep1__0;
      ep1.cljs$core$IFn$_invoke$arity$1 = ep1__1;
      ep1.cljs$core$IFn$_invoke$arity$2 = ep1__2;
      ep1.cljs$core$IFn$_invoke$arity$3 = ep1__3;
      ep1.cljs$core$IFn$_invoke$arity$variadic = ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep1;
    }();
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true;
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__15530__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__15530__auto__)) {
            return p2.call(null, x);
          } else {
            return and__15530__auto__;
          }
        }());
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__15530__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__15530__auto__)) {
            var and__15530__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__15530__auto____$1)) {
              var and__15530__auto____$2 = p2.call(null, x);
              if (cljs.core.truth_(and__15530__auto____$2)) {
                return p2.call(null, y);
              } else {
                return and__15530__auto____$2;
              }
            } else {
              return and__15530__auto____$1;
            }
          } else {
            return and__15530__auto__;
          }
        }());
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__15530__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__15530__auto__)) {
            var and__15530__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__15530__auto____$1)) {
              var and__15530__auto____$2 = p1.call(null, z);
              if (cljs.core.truth_(and__15530__auto____$2)) {
                var and__15530__auto____$3 = p2.call(null, x);
                if (cljs.core.truth_(and__15530__auto____$3)) {
                  var and__15530__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__15530__auto____$4)) {
                    return p2.call(null, z);
                  } else {
                    return and__15530__auto____$4;
                  }
                } else {
                  return and__15530__auto____$3;
                }
              } else {
                return and__15530__auto____$2;
              }
            } else {
              return and__15530__auto____$1;
            }
          } else {
            return and__15530__auto__;
          }
        }());
      };
      var ep2__4 = function() {
        var G__17392__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep2.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__17384_SHARP_) {
            var and__15530__auto__ = p1.call(null, p1__17384_SHARP_);
            if (cljs.core.truth_(and__15530__auto__)) {
              return p2.call(null, p1__17384_SHARP_);
            } else {
              return and__15530__auto__;
            }
          }, args));
        };
        var G__17392 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__17392__delegate.call(this, x, y, z, args);
        };
        G__17392.cljs$lang$maxFixedArity = 3;
        G__17392.cljs$lang$applyTo = function(arglist__17393) {
          var x = cljs.core.first(arglist__17393);
          arglist__17393 = cljs.core.next(arglist__17393);
          var y = cljs.core.first(arglist__17393);
          arglist__17393 = cljs.core.next(arglist__17393);
          var z = cljs.core.first(arglist__17393);
          var args = cljs.core.rest(arglist__17393);
          return G__17392__delegate(x, y, z, args);
        };
        G__17392.cljs$core$IFn$_invoke$arity$variadic = G__17392__delegate;
        return G__17392;
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            return ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$core$IFn$_invoke$arity$0 = ep2__0;
      ep2.cljs$core$IFn$_invoke$arity$1 = ep2__1;
      ep2.cljs$core$IFn$_invoke$arity$2 = ep2__2;
      ep2.cljs$core$IFn$_invoke$arity$3 = ep2__3;
      ep2.cljs$core$IFn$_invoke$arity$variadic = ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep2;
    }();
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true;
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__15530__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__15530__auto__)) {
            var and__15530__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__15530__auto____$1)) {
              return p3.call(null, x);
            } else {
              return and__15530__auto____$1;
            }
          } else {
            return and__15530__auto__;
          }
        }());
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__15530__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__15530__auto__)) {
            var and__15530__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__15530__auto____$1)) {
              var and__15530__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__15530__auto____$2)) {
                var and__15530__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__15530__auto____$3)) {
                  var and__15530__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__15530__auto____$4)) {
                    return p3.call(null, y);
                  } else {
                    return and__15530__auto____$4;
                  }
                } else {
                  return and__15530__auto____$3;
                }
              } else {
                return and__15530__auto____$2;
              }
            } else {
              return and__15530__auto____$1;
            }
          } else {
            return and__15530__auto__;
          }
        }());
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__15530__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__15530__auto__)) {
            var and__15530__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__15530__auto____$1)) {
              var and__15530__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__15530__auto____$2)) {
                var and__15530__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__15530__auto____$3)) {
                  var and__15530__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__15530__auto____$4)) {
                    var and__15530__auto____$5 = p3.call(null, y);
                    if (cljs.core.truth_(and__15530__auto____$5)) {
                      var and__15530__auto____$6 = p1.call(null, z);
                      if (cljs.core.truth_(and__15530__auto____$6)) {
                        var and__15530__auto____$7 = p2.call(null, z);
                        if (cljs.core.truth_(and__15530__auto____$7)) {
                          return p3.call(null, z);
                        } else {
                          return and__15530__auto____$7;
                        }
                      } else {
                        return and__15530__auto____$6;
                      }
                    } else {
                      return and__15530__auto____$5;
                    }
                  } else {
                    return and__15530__auto____$4;
                  }
                } else {
                  return and__15530__auto____$3;
                }
              } else {
                return and__15530__auto____$2;
              }
            } else {
              return and__15530__auto____$1;
            }
          } else {
            return and__15530__auto__;
          }
        }());
      };
      var ep3__4 = function() {
        var G__17394__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep3.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__17385_SHARP_) {
            var and__15530__auto__ = p1.call(null, p1__17385_SHARP_);
            if (cljs.core.truth_(and__15530__auto__)) {
              var and__15530__auto____$1 = p2.call(null, p1__17385_SHARP_);
              if (cljs.core.truth_(and__15530__auto____$1)) {
                return p3.call(null, p1__17385_SHARP_);
              } else {
                return and__15530__auto____$1;
              }
            } else {
              return and__15530__auto__;
            }
          }, args));
        };
        var G__17394 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__17394__delegate.call(this, x, y, z, args);
        };
        G__17394.cljs$lang$maxFixedArity = 3;
        G__17394.cljs$lang$applyTo = function(arglist__17395) {
          var x = cljs.core.first(arglist__17395);
          arglist__17395 = cljs.core.next(arglist__17395);
          var y = cljs.core.first(arglist__17395);
          arglist__17395 = cljs.core.next(arglist__17395);
          var z = cljs.core.first(arglist__17395);
          var args = cljs.core.rest(arglist__17395);
          return G__17394__delegate(x, y, z, args);
        };
        G__17394.cljs$core$IFn$_invoke$arity$variadic = G__17394__delegate;
        return G__17394;
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            return ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$core$IFn$_invoke$arity$0 = ep3__0;
      ep3.cljs$core$IFn$_invoke$arity$1 = ep3__1;
      ep3.cljs$core$IFn$_invoke$arity$2 = ep3__2;
      ep3.cljs$core$IFn$_invoke$arity$3 = ep3__3;
      ep3.cljs$core$IFn$_invoke$arity$variadic = ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep3;
    }();
  };
  var every_pred__4 = function() {
    var G__17396__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function() {
        var epn = null;
        var epn__0 = function() {
          return true;
        };
        var epn__1 = function(x) {
          return cljs.core.every_QMARK_.call(null, function(p1__17386_SHARP_) {
            return p1__17386_SHARP_.call(null, x);
          }, ps__$1);
        };
        var epn__2 = function(x, y) {
          return cljs.core.every_QMARK_.call(null, function(p1__17387_SHARP_) {
            var and__15530__auto__ = p1__17387_SHARP_.call(null, x);
            if (cljs.core.truth_(and__15530__auto__)) {
              return p1__17387_SHARP_.call(null, y);
            } else {
              return and__15530__auto__;
            }
          }, ps__$1);
        };
        var epn__3 = function(x, y, z) {
          return cljs.core.every_QMARK_.call(null, function(p1__17388_SHARP_) {
            var and__15530__auto__ = p1__17388_SHARP_.call(null, x);
            if (cljs.core.truth_(and__15530__auto__)) {
              var and__15530__auto____$1 = p1__17388_SHARP_.call(null, y);
              if (cljs.core.truth_(and__15530__auto____$1)) {
                return p1__17388_SHARP_.call(null, z);
              } else {
                return and__15530__auto____$1;
              }
            } else {
              return and__15530__auto__;
            }
          }, ps__$1);
        };
        var epn__4 = function() {
          var G__17397__delegate = function(x, y, z, args) {
            return cljs.core.boolean$.call(null, epn.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__17389_SHARP_) {
              return cljs.core.every_QMARK_.call(null, p1__17389_SHARP_, args);
            }, ps__$1));
          };
          var G__17397 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__17397__delegate.call(this, x, y, z, args);
          };
          G__17397.cljs$lang$maxFixedArity = 3;
          G__17397.cljs$lang$applyTo = function(arglist__17398) {
            var x = cljs.core.first(arglist__17398);
            arglist__17398 = cljs.core.next(arglist__17398);
            var y = cljs.core.first(arglist__17398);
            arglist__17398 = cljs.core.next(arglist__17398);
            var z = cljs.core.first(arglist__17398);
            var args = cljs.core.rest(arglist__17398);
            return G__17397__delegate(x, y, z, args);
          };
          G__17397.cljs$core$IFn$_invoke$arity$variadic = G__17397__delegate;
          return G__17397;
        }();
        epn = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return epn__0.call(this);
            case 1:
              return epn__1.call(this, x);
            case 2:
              return epn__2.call(this, x, y);
            case 3:
              return epn__3.call(this, x, y, z);
            default:
              return epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        epn.cljs$lang$maxFixedArity = 3;
        epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
        epn.cljs$core$IFn$_invoke$arity$0 = epn__0;
        epn.cljs$core$IFn$_invoke$arity$1 = epn__1;
        epn.cljs$core$IFn$_invoke$arity$2 = epn__2;
        epn.cljs$core$IFn$_invoke$arity$3 = epn__3;
        epn.cljs$core$IFn$_invoke$arity$variadic = epn__4.cljs$core$IFn$_invoke$arity$variadic;
        return epn;
      }();
    };
    var G__17396 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__17396__delegate.call(this, p1, p2, p3, ps);
    };
    G__17396.cljs$lang$maxFixedArity = 3;
    G__17396.cljs$lang$applyTo = function(arglist__17399) {
      var p1 = cljs.core.first(arglist__17399);
      arglist__17399 = cljs.core.next(arglist__17399);
      var p2 = cljs.core.first(arglist__17399);
      arglist__17399 = cljs.core.next(arglist__17399);
      var p3 = cljs.core.first(arglist__17399);
      var ps = cljs.core.rest(arglist__17399);
      return G__17396__delegate(p1, p2, p3, ps);
    };
    G__17396.cljs$core$IFn$_invoke$arity$variadic = G__17396__delegate;
    return G__17396;
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        return every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$core$IFn$_invoke$arity$1 = every_pred__1;
  every_pred.cljs$core$IFn$_invoke$arity$2 = every_pred__2;
  every_pred.cljs$core$IFn$_invoke$arity$3 = every_pred__3;
  every_pred.cljs$core$IFn$_invoke$arity$variadic = every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return every_pred;
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null;
      };
      var sp1__1 = function(x) {
        return p.call(null, x);
      };
      var sp1__2 = function(x, y) {
        var or__15542__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__15542__auto__)) {
          return or__15542__auto__;
        } else {
          return p.call(null, y);
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__15542__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__15542__auto__)) {
          return or__15542__auto__;
        } else {
          var or__15542__auto____$1 = p.call(null, y);
          if (cljs.core.truth_(or__15542__auto____$1)) {
            return or__15542__auto____$1;
          } else {
            return p.call(null, z);
          }
        }
      };
      var sp1__4 = function() {
        var G__17406__delegate = function(x, y, z, args) {
          var or__15542__auto__ = sp1.call(null, x, y, z);
          if (cljs.core.truth_(or__15542__auto__)) {
            return or__15542__auto__;
          } else {
            return cljs.core.some.call(null, p, args);
          }
        };
        var G__17406 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__17406__delegate.call(this, x, y, z, args);
        };
        G__17406.cljs$lang$maxFixedArity = 3;
        G__17406.cljs$lang$applyTo = function(arglist__17407) {
          var x = cljs.core.first(arglist__17407);
          arglist__17407 = cljs.core.next(arglist__17407);
          var y = cljs.core.first(arglist__17407);
          arglist__17407 = cljs.core.next(arglist__17407);
          var z = cljs.core.first(arglist__17407);
          var args = cljs.core.rest(arglist__17407);
          return G__17406__delegate(x, y, z, args);
        };
        G__17406.cljs$core$IFn$_invoke$arity$variadic = G__17406__delegate;
        return G__17406;
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            return sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$core$IFn$_invoke$arity$0 = sp1__0;
      sp1.cljs$core$IFn$_invoke$arity$1 = sp1__1;
      sp1.cljs$core$IFn$_invoke$arity$2 = sp1__2;
      sp1.cljs$core$IFn$_invoke$arity$3 = sp1__3;
      sp1.cljs$core$IFn$_invoke$arity$variadic = sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp1;
    }();
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null;
      };
      var sp2__1 = function(x) {
        var or__15542__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__15542__auto__)) {
          return or__15542__auto__;
        } else {
          return p2.call(null, x);
        }
      };
      var sp2__2 = function(x, y) {
        var or__15542__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__15542__auto__)) {
          return or__15542__auto__;
        } else {
          var or__15542__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__15542__auto____$1)) {
            return or__15542__auto____$1;
          } else {
            var or__15542__auto____$2 = p2.call(null, x);
            if (cljs.core.truth_(or__15542__auto____$2)) {
              return or__15542__auto____$2;
            } else {
              return p2.call(null, y);
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__15542__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__15542__auto__)) {
          return or__15542__auto__;
        } else {
          var or__15542__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__15542__auto____$1)) {
            return or__15542__auto____$1;
          } else {
            var or__15542__auto____$2 = p1.call(null, z);
            if (cljs.core.truth_(or__15542__auto____$2)) {
              return or__15542__auto____$2;
            } else {
              var or__15542__auto____$3 = p2.call(null, x);
              if (cljs.core.truth_(or__15542__auto____$3)) {
                return or__15542__auto____$3;
              } else {
                var or__15542__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__15542__auto____$4)) {
                  return or__15542__auto____$4;
                } else {
                  return p2.call(null, z);
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__17408__delegate = function(x, y, z, args) {
          var or__15542__auto__ = sp2.call(null, x, y, z);
          if (cljs.core.truth_(or__15542__auto__)) {
            return or__15542__auto__;
          } else {
            return cljs.core.some.call(null, function(p1__17400_SHARP_) {
              var or__15542__auto____$1 = p1.call(null, p1__17400_SHARP_);
              if (cljs.core.truth_(or__15542__auto____$1)) {
                return or__15542__auto____$1;
              } else {
                return p2.call(null, p1__17400_SHARP_);
              }
            }, args);
          }
        };
        var G__17408 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__17408__delegate.call(this, x, y, z, args);
        };
        G__17408.cljs$lang$maxFixedArity = 3;
        G__17408.cljs$lang$applyTo = function(arglist__17409) {
          var x = cljs.core.first(arglist__17409);
          arglist__17409 = cljs.core.next(arglist__17409);
          var y = cljs.core.first(arglist__17409);
          arglist__17409 = cljs.core.next(arglist__17409);
          var z = cljs.core.first(arglist__17409);
          var args = cljs.core.rest(arglist__17409);
          return G__17408__delegate(x, y, z, args);
        };
        G__17408.cljs$core$IFn$_invoke$arity$variadic = G__17408__delegate;
        return G__17408;
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            return sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$core$IFn$_invoke$arity$0 = sp2__0;
      sp2.cljs$core$IFn$_invoke$arity$1 = sp2__1;
      sp2.cljs$core$IFn$_invoke$arity$2 = sp2__2;
      sp2.cljs$core$IFn$_invoke$arity$3 = sp2__3;
      sp2.cljs$core$IFn$_invoke$arity$variadic = sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp2;
    }();
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null;
      };
      var sp3__1 = function(x) {
        var or__15542__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__15542__auto__)) {
          return or__15542__auto__;
        } else {
          var or__15542__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__15542__auto____$1)) {
            return or__15542__auto____$1;
          } else {
            return p3.call(null, x);
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__15542__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__15542__auto__)) {
          return or__15542__auto__;
        } else {
          var or__15542__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__15542__auto____$1)) {
            return or__15542__auto____$1;
          } else {
            var or__15542__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__15542__auto____$2)) {
              return or__15542__auto____$2;
            } else {
              var or__15542__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__15542__auto____$3)) {
                return or__15542__auto____$3;
              } else {
                var or__15542__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__15542__auto____$4)) {
                  return or__15542__auto____$4;
                } else {
                  return p3.call(null, y);
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__15542__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__15542__auto__)) {
          return or__15542__auto__;
        } else {
          var or__15542__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__15542__auto____$1)) {
            return or__15542__auto____$1;
          } else {
            var or__15542__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__15542__auto____$2)) {
              return or__15542__auto____$2;
            } else {
              var or__15542__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__15542__auto____$3)) {
                return or__15542__auto____$3;
              } else {
                var or__15542__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__15542__auto____$4)) {
                  return or__15542__auto____$4;
                } else {
                  var or__15542__auto____$5 = p3.call(null, y);
                  if (cljs.core.truth_(or__15542__auto____$5)) {
                    return or__15542__auto____$5;
                  } else {
                    var or__15542__auto____$6 = p1.call(null, z);
                    if (cljs.core.truth_(or__15542__auto____$6)) {
                      return or__15542__auto____$6;
                    } else {
                      var or__15542__auto____$7 = p2.call(null, z);
                      if (cljs.core.truth_(or__15542__auto____$7)) {
                        return or__15542__auto____$7;
                      } else {
                        return p3.call(null, z);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__17410__delegate = function(x, y, z, args) {
          var or__15542__auto__ = sp3.call(null, x, y, z);
          if (cljs.core.truth_(or__15542__auto__)) {
            return or__15542__auto__;
          } else {
            return cljs.core.some.call(null, function(p1__17401_SHARP_) {
              var or__15542__auto____$1 = p1.call(null, p1__17401_SHARP_);
              if (cljs.core.truth_(or__15542__auto____$1)) {
                return or__15542__auto____$1;
              } else {
                var or__15542__auto____$2 = p2.call(null, p1__17401_SHARP_);
                if (cljs.core.truth_(or__15542__auto____$2)) {
                  return or__15542__auto____$2;
                } else {
                  return p3.call(null, p1__17401_SHARP_);
                }
              }
            }, args);
          }
        };
        var G__17410 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__17410__delegate.call(this, x, y, z, args);
        };
        G__17410.cljs$lang$maxFixedArity = 3;
        G__17410.cljs$lang$applyTo = function(arglist__17411) {
          var x = cljs.core.first(arglist__17411);
          arglist__17411 = cljs.core.next(arglist__17411);
          var y = cljs.core.first(arglist__17411);
          arglist__17411 = cljs.core.next(arglist__17411);
          var z = cljs.core.first(arglist__17411);
          var args = cljs.core.rest(arglist__17411);
          return G__17410__delegate(x, y, z, args);
        };
        G__17410.cljs$core$IFn$_invoke$arity$variadic = G__17410__delegate;
        return G__17410;
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            return sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$core$IFn$_invoke$arity$0 = sp3__0;
      sp3.cljs$core$IFn$_invoke$arity$1 = sp3__1;
      sp3.cljs$core$IFn$_invoke$arity$2 = sp3__2;
      sp3.cljs$core$IFn$_invoke$arity$3 = sp3__3;
      sp3.cljs$core$IFn$_invoke$arity$variadic = sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp3;
    }();
  };
  var some_fn__4 = function() {
    var G__17412__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function() {
        var spn = null;
        var spn__0 = function() {
          return null;
        };
        var spn__1 = function(x) {
          return cljs.core.some.call(null, function(p1__17402_SHARP_) {
            return p1__17402_SHARP_.call(null, x);
          }, ps__$1);
        };
        var spn__2 = function(x, y) {
          return cljs.core.some.call(null, function(p1__17403_SHARP_) {
            var or__15542__auto__ = p1__17403_SHARP_.call(null, x);
            if (cljs.core.truth_(or__15542__auto__)) {
              return or__15542__auto__;
            } else {
              return p1__17403_SHARP_.call(null, y);
            }
          }, ps__$1);
        };
        var spn__3 = function(x, y, z) {
          return cljs.core.some.call(null, function(p1__17404_SHARP_) {
            var or__15542__auto__ = p1__17404_SHARP_.call(null, x);
            if (cljs.core.truth_(or__15542__auto__)) {
              return or__15542__auto__;
            } else {
              var or__15542__auto____$1 = p1__17404_SHARP_.call(null, y);
              if (cljs.core.truth_(or__15542__auto____$1)) {
                return or__15542__auto____$1;
              } else {
                return p1__17404_SHARP_.call(null, z);
              }
            }
          }, ps__$1);
        };
        var spn__4 = function() {
          var G__17413__delegate = function(x, y, z, args) {
            var or__15542__auto__ = spn.call(null, x, y, z);
            if (cljs.core.truth_(or__15542__auto__)) {
              return or__15542__auto__;
            } else {
              return cljs.core.some.call(null, function(p1__17405_SHARP_) {
                return cljs.core.some.call(null, p1__17405_SHARP_, args);
              }, ps__$1);
            }
          };
          var G__17413 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__17413__delegate.call(this, x, y, z, args);
          };
          G__17413.cljs$lang$maxFixedArity = 3;
          G__17413.cljs$lang$applyTo = function(arglist__17414) {
            var x = cljs.core.first(arglist__17414);
            arglist__17414 = cljs.core.next(arglist__17414);
            var y = cljs.core.first(arglist__17414);
            arglist__17414 = cljs.core.next(arglist__17414);
            var z = cljs.core.first(arglist__17414);
            var args = cljs.core.rest(arglist__17414);
            return G__17413__delegate(x, y, z, args);
          };
          G__17413.cljs$core$IFn$_invoke$arity$variadic = G__17413__delegate;
          return G__17413;
        }();
        spn = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return spn__0.call(this);
            case 1:
              return spn__1.call(this, x);
            case 2:
              return spn__2.call(this, x, y);
            case 3:
              return spn__3.call(this, x, y, z);
            default:
              return spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        spn.cljs$lang$maxFixedArity = 3;
        spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
        spn.cljs$core$IFn$_invoke$arity$0 = spn__0;
        spn.cljs$core$IFn$_invoke$arity$1 = spn__1;
        spn.cljs$core$IFn$_invoke$arity$2 = spn__2;
        spn.cljs$core$IFn$_invoke$arity$3 = spn__3;
        spn.cljs$core$IFn$_invoke$arity$variadic = spn__4.cljs$core$IFn$_invoke$arity$variadic;
        return spn;
      }();
    };
    var G__17412 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__17412__delegate.call(this, p1, p2, p3, ps);
    };
    G__17412.cljs$lang$maxFixedArity = 3;
    G__17412.cljs$lang$applyTo = function(arglist__17415) {
      var p1 = cljs.core.first(arglist__17415);
      arglist__17415 = cljs.core.next(arglist__17415);
      var p2 = cljs.core.first(arglist__17415);
      arglist__17415 = cljs.core.next(arglist__17415);
      var p3 = cljs.core.first(arglist__17415);
      var ps = cljs.core.rest(arglist__17415);
      return G__17412__delegate(p1, p2, p3, ps);
    };
    G__17412.cljs$core$IFn$_invoke$arity$variadic = G__17412__delegate;
    return G__17412;
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        return some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$core$IFn$_invoke$arity$1 = some_fn__1;
  some_fn.cljs$core$IFn$_invoke$arity$2 = some_fn__2;
  some_fn.cljs$core$IFn$_invoke$arity$3 = some_fn__3;
  some_fn.cljs$core$IFn$_invoke$arity$variadic = some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return some_fn;
}();
cljs.core.map = function() {
  var map = null;
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__16390__auto___17417 = size;
          var i_17418 = 0;
          while (true) {
            if (i_17418 < n__16390__auto___17417) {
              cljs.core.chunk_append.call(null, b, f.call(null, cljs.core._nth.call(null, c, i_17418)));
              var G__17419 = i_17418 + 1;
              i_17418 = G__17419;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), map.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s)), map.call(null, f, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      var s3 = cljs.core.seq.call(null, c3);
      if (s1 && (s2 && s3)) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2), cljs.core.first.call(null, s3)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2), cljs.core.rest.call(null, s3)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__5 = function() {
    var G__17420__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = map.call(null, cljs.core.seq, cs);
          if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
            return cljs.core.cons.call(null, map.call(null, cljs.core.first, ss), step.call(null, map.call(null, cljs.core.rest, ss)));
          } else {
            return null;
          }
        }, null, null);
      };
      return map.call(null, function(p1__17416_SHARP_) {
        return cljs.core.apply.call(null, f, p1__17416_SHARP_);
      }, step.call(null, cljs.core.conj.call(null, colls, c3, c2, c1)));
    };
    var G__17420 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__17420__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__17420.cljs$lang$maxFixedArity = 4;
    G__17420.cljs$lang$applyTo = function(arglist__17421) {
      var f = cljs.core.first(arglist__17421);
      arglist__17421 = cljs.core.next(arglist__17421);
      var c1 = cljs.core.first(arglist__17421);
      arglist__17421 = cljs.core.next(arglist__17421);
      var c2 = cljs.core.first(arglist__17421);
      arglist__17421 = cljs.core.next(arglist__17421);
      var c3 = cljs.core.first(arglist__17421);
      var colls = cljs.core.rest(arglist__17421);
      return G__17420__delegate(f, c1, c2, c3, colls);
    };
    G__17420.cljs$core$IFn$_invoke$arity$variadic = G__17420__delegate;
    return G__17420;
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        return map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  map.cljs$core$IFn$_invoke$arity$4 = map__4;
  map.cljs$core$IFn$_invoke$arity$variadic = map__5.cljs$core$IFn$_invoke$arity$variadic;
  return map;
}();
cljs.core.take = function take(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    if (n > 0) {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take.call(null, n - 1, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.drop = function drop(n, coll) {
  var step = function(n__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (n__$1 > 0 && s) {
        var G__17422 = n__$1 - 1;
        var G__17423 = cljs.core.rest.call(null, s);
        n__$1 = G__17422;
        coll__$1 = G__17423;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function() {
    return step.call(null, n, coll);
  }, null, null);
};
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.call(null, 1, s);
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.call(null, function(x, _) {
      return x;
    }, s, cljs.core.drop.call(null, n, s));
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$core$IFn$_invoke$arity$1 = drop_last__1;
  drop_last.cljs$core$IFn$_invoke$arity$2 = drop_last__2;
  return drop_last;
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq.call(null, coll);
  var lead = cljs.core.seq.call(null, cljs.core.drop.call(null, n, coll));
  while (true) {
    if (lead) {
      var G__17424 = cljs.core.next.call(null, s);
      var G__17425 = cljs.core.next.call(null, lead);
      s = G__17424;
      lead = G__17425;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function drop_while(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (cljs.core.truth_(function() {
        var and__15530__auto__ = s;
        if (and__15530__auto__) {
          return pred__$1.call(null, cljs.core.first.call(null, s));
        } else {
          return and__15530__auto__;
        }
      }())) {
        var G__17426 = pred__$1;
        var G__17427 = cljs.core.rest.call(null, s);
        pred__$1 = G__17426;
        coll__$1 = G__17427;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function() {
    return step.call(null, pred, coll);
  }, null, null);
};
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      return cljs.core.concat.call(null, s, cycle.call(null, s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.call(null, n, coll), cljs.core.drop.call(null, n, coll)], null);
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, x, repeat.call(null, x));
    }, null, null);
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.call(null, n, repeat.call(null, x));
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$core$IFn$_invoke$arity$1 = repeat__1;
  repeat.cljs$core$IFn$_invoke$arity$2 = repeat__2;
  return repeat;
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.call(null, n, cljs.core.repeat.call(null, x));
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, f.call(null), repeatedly.call(null, f));
    }, null, null);
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.call(null, n, repeatedly.call(null, f));
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$core$IFn$_invoke$arity$1 = repeatedly__1;
  repeatedly.cljs$core$IFn$_invoke$arity$2 = repeatedly__2;
  return repeatedly;
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons.call(null, x, new cljs.core.LazySeq(null, function() {
    return iterate.call(null, f, f.call(null, x));
  }, null, null));
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s1), cljs.core.cons.call(null, cljs.core.first.call(null, s2), interleave.call(null, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2))));
      } else {
        return null;
      }
    }, null, null);
  };
  var interleave__3 = function() {
    var G__17428__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.call(null, cljs.core.seq, cljs.core.conj.call(null, colls, c2, c1));
        if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
          return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, ss), cljs.core.apply.call(null, interleave, cljs.core.map.call(null, cljs.core.rest, ss)));
        } else {
          return null;
        }
      }, null, null);
    };
    var G__17428 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17428__delegate.call(this, c1, c2, colls);
    };
    G__17428.cljs$lang$maxFixedArity = 2;
    G__17428.cljs$lang$applyTo = function(arglist__17429) {
      var c1 = cljs.core.first(arglist__17429);
      arglist__17429 = cljs.core.next(arglist__17429);
      var c2 = cljs.core.first(arglist__17429);
      var colls = cljs.core.rest(arglist__17429);
      return G__17428__delegate(c1, c2, colls);
    };
    G__17428.cljs$core$IFn$_invoke$arity$variadic = G__17428__delegate;
    return G__17428;
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        return interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$core$IFn$_invoke$arity$2 = interleave__2;
  interleave.cljs$core$IFn$_invoke$arity$variadic = interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave;
}();
cljs.core.interpose = function interpose(sep, coll) {
  return cljs.core.drop.call(null, 1, cljs.core.interleave.call(null, cljs.core.repeat.call(null, sep), coll));
};
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4090__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4090__auto__) {
        var coll__$1 = temp__4090__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, coll__$1), cat.call(null, cljs.core.rest.call(null, coll__$1), colls__$1));
      } else {
        if (cljs.core.seq.call(null, colls__$1)) {
          return cat.call(null, cljs.core.first.call(null, colls__$1), cljs.core.rest.call(null, colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat.call(null, null, colls);
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__2 = function(f, coll) {
    return cljs.core.flatten1.call(null, cljs.core.map.call(null, f, coll));
  };
  var mapcat__3 = function() {
    var G__17430__delegate = function(f, coll, colls) {
      return cljs.core.flatten1.call(null, cljs.core.apply.call(null, cljs.core.map, f, coll, colls));
    };
    var G__17430 = function(f, coll, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17430__delegate.call(this, f, coll, colls);
    };
    G__17430.cljs$lang$maxFixedArity = 2;
    G__17430.cljs$lang$applyTo = function(arglist__17431) {
      var f = cljs.core.first(arglist__17431);
      arglist__17431 = cljs.core.next(arglist__17431);
      var coll = cljs.core.first(arglist__17431);
      var colls = cljs.core.rest(arglist__17431);
      return G__17430__delegate(f, coll, colls);
    };
    G__17430.cljs$core$IFn$_invoke$arity$variadic = G__17430__delegate;
    return G__17430;
  }();
  mapcat = function(f, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapcat__2.call(this, f, coll);
      default:
        return mapcat__3.cljs$core$IFn$_invoke$arity$variadic(f, coll, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 2;
  mapcat.cljs$lang$applyTo = mapcat__3.cljs$lang$applyTo;
  mapcat.cljs$core$IFn$_invoke$arity$2 = mapcat__2;
  mapcat.cljs$core$IFn$_invoke$arity$variadic = mapcat__3.cljs$core$IFn$_invoke$arity$variadic;
  return mapcat;
}();
cljs.core.filter = function filter(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__16390__auto___17432 = size;
        var i_17433 = 0;
        while (true) {
          if (i_17433 < n__16390__auto___17432) {
            if (cljs.core.truth_(pred.call(null, cljs.core._nth.call(null, c, i_17433)))) {
              cljs.core.chunk_append.call(null, b, cljs.core._nth.call(null, c, i_17433));
            } else {
            }
            var G__17434 = i_17433 + 1;
            i_17433 = G__17434;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), filter.call(null, pred, cljs.core.chunk_rest.call(null, s)));
      } else {
        var f = cljs.core.first.call(null, s);
        var r = cljs.core.rest.call(null, s);
        if (cljs.core.truth_(pred.call(null, f))) {
          return cljs.core.cons.call(null, f, filter.call(null, pred, r));
        } else {
          return filter.call(null, pred, r);
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.remove = function remove(pred, coll) {
  return cljs.core.filter.call(null, cljs.core.complement.call(null, pred), coll);
};
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, node, cljs.core.truth_(branch_QMARK_.call(null, node)) ? cljs.core.mapcat.call(null, walk, children.call(null, node)) : null);
    }, null, null);
  };
  return walk.call(null, root);
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.call(null, function(p1__17435_SHARP_) {
    return!cljs.core.sequential_QMARK_.call(null, p1__17435_SHARP_);
  }, cljs.core.rest.call(null, cljs.core.tree_seq.call(null, cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function into(to, from) {
  if (!(to == null)) {
    if (function() {
      var G__17437 = to;
      if (G__17437) {
        var bit__16185__auto__ = G__17437.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__16185__auto__ || G__17437.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core.transient$.call(null, to), from));
    } else {
      return cljs.core.reduce.call(null, cljs.core._conj, to, from);
    }
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, from);
  }
};
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
      return cljs.core.conj_BANG_.call(null, v, f.call(null, o));
    }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2));
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2, c3));
  };
  var mapv__5 = function() {
    var G__17438__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.apply.call(null, cljs.core.map, f, c1, c2, c3, colls));
    };
    var G__17438 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__17438__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__17438.cljs$lang$maxFixedArity = 4;
    G__17438.cljs$lang$applyTo = function(arglist__17439) {
      var f = cljs.core.first(arglist__17439);
      arglist__17439 = cljs.core.next(arglist__17439);
      var c1 = cljs.core.first(arglist__17439);
      arglist__17439 = cljs.core.next(arglist__17439);
      var c2 = cljs.core.first(arglist__17439);
      arglist__17439 = cljs.core.next(arglist__17439);
      var c3 = cljs.core.first(arglist__17439);
      var colls = cljs.core.rest(arglist__17439);
      return G__17438__delegate(f, c1, c2, c3, colls);
    };
    G__17438.cljs$core$IFn$_invoke$arity$variadic = G__17438__delegate;
    return G__17438;
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        return mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$core$IFn$_invoke$arity$2 = mapv__2;
  mapv.cljs$core$IFn$_invoke$arity$3 = mapv__3;
  mapv.cljs$core$IFn$_invoke$arity$4 = mapv__4;
  mapv.cljs$core$IFn$_invoke$arity$variadic = mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return mapv;
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
    if (cljs.core.truth_(pred.call(null, o))) {
      return cljs.core.conj_BANG_.call(null, v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.call(null, n, n, coll);
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, cljs.core.drop.call(null, step, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, pad, cljs.core.drop.call(null, step, s)));
        } else {
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.take.call(null, n, cljs.core.concat.call(null, p, pad)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  partition.cljs$core$IFn$_invoke$arity$4 = partition__4;
  return partition;
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.call(null, m, ks, null);
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq.call(null, ks);
    while (true) {
      if (ks__$1) {
        if (!function() {
          var G__17441 = m__$1;
          if (G__17441) {
            var bit__16192__auto__ = G__17441.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__16192__auto__ || G__17441.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__17441.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__17441);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__17441);
          }
        }()) {
          return not_found;
        } else {
          var m__$2 = cljs.core.get.call(null, m__$1, cljs.core.first.call(null, ks__$1), sentinel);
          if (sentinel === m__$2) {
            return not_found;
          } else {
            var G__17442 = sentinel;
            var G__17443 = m__$2;
            var G__17444 = cljs.core.next.call(null, ks__$1);
            sentinel = G__17442;
            m__$1 = G__17443;
            ks__$1 = G__17444;
            continue;
          }
        }
      } else {
        return m__$1;
      }
      break;
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$core$IFn$_invoke$arity$2 = get_in__2;
  get_in.cljs$core$IFn$_invoke$arity$3 = get_in__3;
  return get_in;
}();
cljs.core.assoc_in = function assoc_in(m, p__17445, v) {
  var vec__17447 = p__17445;
  var k = cljs.core.nth.call(null, vec__17447, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__17447, 1);
  if (ks) {
    return cljs.core.assoc.call(null, m, k, assoc_in.call(null, cljs.core.get.call(null, m, k), ks, v));
  } else {
    return cljs.core.assoc.call(null, m, k, v);
  }
};
cljs.core.update_in = function() {
  var update_in = null;
  var update_in__3 = function(m, p__17448, f) {
    var vec__17458 = p__17448;
    var k = cljs.core.nth.call(null, vec__17458, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__17458, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k)));
    }
  };
  var update_in__4 = function(m, p__17449, f, a) {
    var vec__17459 = p__17449;
    var k = cljs.core.nth.call(null, vec__17459, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__17459, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a));
    }
  };
  var update_in__5 = function(m, p__17450, f, a, b) {
    var vec__17460 = p__17450;
    var k = cljs.core.nth.call(null, vec__17460, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__17460, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b));
    }
  };
  var update_in__6 = function(m, p__17451, f, a, b, c) {
    var vec__17461 = p__17451;
    var k = cljs.core.nth.call(null, vec__17461, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__17461, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b, c));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b, c));
    }
  };
  var update_in__7 = function() {
    var G__17463__delegate = function(m, p__17452, f, a, b, c, args) {
      var vec__17462 = p__17452;
      var k = cljs.core.nth.call(null, vec__17462, 0, null);
      var ks = cljs.core.nthnext.call(null, vec__17462, 1);
      if (ks) {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, update_in, cljs.core.get.call(null, m, k), ks, f, a, b, c, args));
      } else {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core.get.call(null, m, k), a, b, c, args));
      }
    };
    var G__17463 = function(m, p__17452, f, a, b, c, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__17463__delegate.call(this, m, p__17452, f, a, b, c, args);
    };
    G__17463.cljs$lang$maxFixedArity = 6;
    G__17463.cljs$lang$applyTo = function(arglist__17464) {
      var m = cljs.core.first(arglist__17464);
      arglist__17464 = cljs.core.next(arglist__17464);
      var p__17452 = cljs.core.first(arglist__17464);
      arglist__17464 = cljs.core.next(arglist__17464);
      var f = cljs.core.first(arglist__17464);
      arglist__17464 = cljs.core.next(arglist__17464);
      var a = cljs.core.first(arglist__17464);
      arglist__17464 = cljs.core.next(arglist__17464);
      var b = cljs.core.first(arglist__17464);
      arglist__17464 = cljs.core.next(arglist__17464);
      var c = cljs.core.first(arglist__17464);
      var args = cljs.core.rest(arglist__17464);
      return G__17463__delegate(m, p__17452, f, a, b, c, args);
    };
    G__17463.cljs$core$IFn$_invoke$arity$variadic = G__17463__delegate;
    return G__17463;
  }();
  update_in = function(m, p__17452, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return update_in__3.call(this, m, p__17452, f);
      case 4:
        return update_in__4.call(this, m, p__17452, f, a);
      case 5:
        return update_in__5.call(this, m, p__17452, f, a, b);
      case 6:
        return update_in__6.call(this, m, p__17452, f, a, b, c);
      default:
        return update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__17452, f, a, b, c, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_in.cljs$lang$maxFixedArity = 6;
  update_in.cljs$lang$applyTo = update_in__7.cljs$lang$applyTo;
  update_in.cljs$core$IFn$_invoke$arity$3 = update_in__3;
  update_in.cljs$core$IFn$_invoke$arity$4 = update_in__4;
  update_in.cljs$core$IFn$_invoke$arity$5 = update_in__5;
  update_in.cljs$core$IFn$_invoke$arity$6 = update_in__6;
  update_in.cljs$core$IFn$_invoke$arity$variadic = update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return update_in;
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__16112__auto__, writer__16113__auto__, opts__16114__auto__) {
  return cljs.core._write.call(null, writer__16113__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function __GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone.call(null, node.arr));
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node.call(null, edit);
      var _ = cljs.core.pv_aset.call(null, r, 0, embed);
      var G__17465 = ll - 5;
      var G__17466 = r;
      ll = G__17465;
      ret = G__17466;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node.call(null, parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset.call(null, ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget.call(null, parent, subidx);
    if (!(child == null)) {
      var node_to_insert = push_tail.call(null, pv, level - 5, child, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path.call(null, null, level - 5, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.array_for = function array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    if (i >= cljs.core.tail_off.call(null, pv)) {
      return pv.tail;
    } else {
      var node = pv.root;
      var level = pv.shift;
      while (true) {
        if (level > 0) {
          var G__17467 = cljs.core.pv_aget.call(null, node, i >>> level & 31);
          var G__17468 = level - 5;
          node = G__17467;
          level = G__17468;
          continue;
        } else {
          return node.arr;
        }
        break;
      }
    }
  } else {
    return cljs.core.vector_index_out_of_bounds.call(null, i, pv.cnt);
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node.call(null, node);
  if (level === 0) {
    cljs.core.pv_aset.call(null, ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset.call(null, ret, subidx, do_assoc.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = pop_tail.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var ret = cljs.core.pv_clone_node.call(null, node);
        cljs.core.pv_aset.call(null, ret, subidx, null);
        return ret;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core/PersistentVector");
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.call(null, self__.tail));
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__15953__auto__ = self__.__hash;
  if (!(h__15953__auto__ == null)) {
    return h__15953__auto__;
  } else {
    var h__15953__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__15953__auto____$1;
    return h__15953__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= k && k < self__.cnt) {
    if (cljs.core.tail_off.call(null, coll__$1) <= k) {
      var new_tail = cljs.core.aclone.call(null, self__.tail);
      new_tail[k & 31] = v;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc.call(null, coll__$1, self__.shift, self__.root, k, v), self__.tail, null);
    }
  } else {
    if (k === self__.cnt) {
      return cljs.core._conj.call(null, coll__$1, v);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error([cljs.core.str("Index "), cljs.core.str(k), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__17470 = null;
  var G__17470__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__17470__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__17470 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17470__2.call(this, self__, k);
      case 3:
        return G__17470__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17470;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args17469) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args17469)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var step_init = [0, init];
  var i = 0;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$1 = function() {
        var j = 0;
        var init__$1 = step_init[1];
        while (true) {
          if (j < len) {
            var init__$2 = f.call(null, init__$1, j + i, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
              return init__$2;
            } else {
              var G__17471 = j + 1;
              var G__17472 = init__$2;
              j = G__17471;
              init__$1 = G__17472;
              continue;
            }
          } else {
            step_init[0] = len;
            step_init[1] = init__$1;
            return init__$1;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
        return cljs.core.deref.call(null, init__$1);
      } else {
        var G__17473 = i + step_init[0];
        i = G__17473;
        continue;
      }
    } else {
      return step_init[1];
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off.call(null, coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__16390__auto___17474 = len;
    var i_17475 = 0;
    while (true) {
      if (i_17475 < n__16390__auto___17474) {
        new_tail[i_17475] = self__.tail[i_17475];
        var G__17476 = i_17475 + 1;
        i_17475 = G__17476;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node.call(null, null);
      cljs.core.pv_aset.call(null, n_r, 0, self__.root);
      cljs.core.pv_aset.call(null, n_r, 1, cljs.core.new_path.call(null, null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail.call(null, coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 1);
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, start) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f, start);
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt < 32) {
      return cljs.core.array_seq.call(null, self__.tail);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.chunked_seq.call(null, coll__$1, 0, 0);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.call(null, coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off.call(null, coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_tail = cljs.core.array_for.call(null, coll__$1, self__.cnt - 2);
          var nr = cljs.core.pop_tail.call(null, coll__$1, self__.shift, self__.root);
          var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
          var cnt_1 = self__.cnt - 1;
          if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget.call(null, new_root, 0), new_tail, null);
          } else {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._assoc.call(null, coll__$1, n, val);
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentVector = function __GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], 0);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone.call(null, xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = cljs.core._as_transient.call(null, v);
    while (true) {
      if (i < l) {
        var G__17477 = i + 1;
        var G__17478 = cljs.core.conj_BANG_.call(null, out, xs__$1[i]);
        i = G__17477;
        out = G__17478;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.vec = function vec(coll) {
  return cljs.core._persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core._as_transient.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
      return cljs.core.PersistentVector.fromArray.call(null, args.arr, true);
    } else {
      return cljs.core.vec.call(null, args);
    }
  };
  var vector = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return vector__delegate.call(this, args);
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__17479) {
    var args = cljs.core.seq(arglist__17479);
    return vector__delegate(args);
  };
  vector.cljs$core$IFn$_invoke$arity$variadic = vector__delegate;
  return vector;
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32243948;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__15953__auto__ = self__.__hash;
  if (!(h__15953__auto__ == null)) {
    return h__15953__auto__;
  } else {
    var h__15953__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__15953__auto____$1;
    return h__15953__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? cljs.core.chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if (s == null) {
    return null;
  } else {
    return s;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.call(null, self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? cljs.core.chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if (s == null) {
    return cljs.core.List.EMPTY;
  } else {
    return s;
  }
};
cljs.core.__GT_ChunkedSeq = function __GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for.call(null, vec, i), i, off, null, null);
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$core$IFn$_invoke$arity$3 = chunked_seq__3;
  chunked_seq.cljs$core$IFn$_invoke$arity$4 = chunked_seq__4;
  chunked_seq.cljs$core$IFn$_invoke$arity$5 = chunked_seq__5;
  return chunked_seq;
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32400159;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core/Subvec");
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__15953__auto__ = self__.__hash;
  if (!(h__15953__auto__ == null)) {
    return h__15953__auto__;
  } else {
    var h__15953__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__15953__auto____$1;
    return h__15953__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + key;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core.assoc.call(null, self__.v, v_pos, val), self__.start, function() {
    var x__15849__auto__ = self__.end;
    var y__15850__auto__ = v_pos + 1;
    return x__15849__auto__ > y__15850__auto__ ? x__15849__auto__ : y__15850__auto__;
  }(), null);
};
cljs.core.Subvec.prototype.call = function() {
  var G__17481 = null;
  var G__17481__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__17481__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__17481 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17481__2.call(this, self__, k);
      case 3:
        return G__17481__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17481;
}();
cljs.core.Subvec.prototype.apply = function(self__, args17480) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args17480)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core._assoc_n.call(null, self__.v, self__.end, o), self__.start, self__.end + 1, null);
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function subvec_seq(i) {
    if (i === self__.end) {
      return null;
    } else {
      return cljs.core.cons.call(null, cljs.core._nth.call(null, self__.v, i), new cljs.core.LazySeq(null, function() {
        return subvec_seq.call(null, i + 1);
      }, null, null));
    }
  };
  return subvec_seq.call(null, self__.start);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    return cljs.core.build_subvec.call(null, self__.meta, self__.v, self__.start, self__.end - 1, null);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._assoc.call(null, coll__$1, n, val);
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds.call(null, n, self__.end - self__.start);
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.__GT_Subvec = function __GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__17482 = meta;
      var G__17483 = v.v;
      var G__17484 = v.start + start;
      var G__17485 = v.start + end;
      var G__17486 = __hash;
      meta = G__17482;
      v = G__17483;
      start = G__17484;
      end = G__17485;
      __hash = G__17486;
      continue;
    } else {
      var c = cljs.core.count.call(null, v);
      if (start < 0 || (end < 0 || (start > c || end > c))) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.call(null, v, start, cljs.core.count.call(null, v));
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec.call(null, null, v, start, end, null);
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$core$IFn$_invoke$arity$2 = subvec__2;
  subvec.cljs$core$IFn$_invoke$arity$3 = subvec__3;
  return subvec;
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone.call(null, node.arr));
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj17490 = {};
    return obj17490;
  }(), cljs.core.aclone.call(null, node.arr));
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy.call(null, tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable.call(null, tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset.call(null, ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget.call(null, ret, subidx);
    if (!(child == null)) {
      return tv_push_tail.call(null, tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path.call(null, tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable.call(null, tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = tv_pop_tail.call(null, tv, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        cljs.core.pv_aset.call(null, node__$1, subidx, null);
        return node__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.editable_array_for = function editable_array_for(tv, i) {
  if (0 <= i && i < tv.cnt) {
    if (i >= cljs.core.tail_off.call(null, tv)) {
      return tv.tail;
    } else {
      var root = tv.root;
      var node = root;
      var level = tv.shift;
      while (true) {
        if (level > 0) {
          var G__17491 = cljs.core.tv_ensure_editable.call(null, root.edit, cljs.core.pv_aget.call(null, node, i >>> level & 31));
          var G__17492 = level - 5;
          node = G__17491;
          level = G__17492;
          continue;
        } else {
          return node.arr;
        }
        break;
      }
    }
  } else {
    throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in transient vector of length "), cljs.core.str(tv.cnt)].join(""));
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core/TransientVector");
};
cljs.core.TransientVector.prototype.call = function() {
  var G__17494 = null;
  var G__17494__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__17494__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__17494 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17494__2.call(this, self__, k);
      case 3:
        return G__17494__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17494;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args17493) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args17493)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off.call(null, tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function go(level, node) {
          var node__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, node);
          if (level === 0) {
            cljs.core.pv_aset.call(null, node__$1, n & 31, val);
            return node__$1;
          } else {
            var subidx = n >>> level & 31;
            cljs.core.pv_aset.call(null, node__$1, subidx, go.call(null, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx)));
            return node__$1;
          }
        }.call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_.call(null, tcoll__$1, val);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
        } else {
          return null;
        }
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var new_tail = cljs.core.editable_array_for.call(null, tcoll__$1, self__.cnt - 2);
            var new_root = function() {
              var nr = cljs.core.tv_pop_tail.call(null, tcoll__$1, self__.shift, self__.root);
              if (!(nr == null)) {
                return nr;
              } else {
                return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
              }
            }();
            if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
              var new_root__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, cljs.core.pv_aget.call(null, new_root, 0));
              self__.root = new_root__$1;
              self__.shift = self__.shift - 5;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            } else {
              self__.root = new_root;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            }
          } else {
            return null;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._assoc_n_BANG_.call(null, tcoll__$1, key, val);
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off.call(null, tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path.call(null, self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail.call(null, tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off.call(null, tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy.call(null, self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientVector = function __GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__15953__auto__ = self__.__hash;
  if (!(h__15953__auto__ == null)) {
    return h__15953__auto__;
  } else {
    var h__15953__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__15953__auto____$1;
    return h__15953__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4090__auto__ = cljs.core.next.call(null, self__.front);
  if (temp__4090__auto__) {
    var f1 = temp__4090__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentQueueSeq = function __GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core/PersistentQueue");
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__15953__auto__ = self__.__hash;
  if (!(h__15953__auto__ == null)) {
    return h__15953__auto__;
  } else {
    var h__15953__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__15953__auto____$1;
    return h__15953__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.call(null, function() {
      var or__15542__auto__ = self__.rear;
      if (cljs.core.truth_(or__15542__auto__)) {
        return or__15542__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.call(null, self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq.call(null, self__.rear);
  if (cljs.core.truth_(function() {
    var or__15542__auto__ = self__.front;
    if (cljs.core.truth_(or__15542__auto__)) {
      return or__15542__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq.call(null, rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4090__auto__ = cljs.core.next.call(null, self__.front);
    if (temp__4090__auto__) {
      var f1 = temp__4090__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq.call(null, self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.PersistentQueue.EMPTY;
};
cljs.core.__GT_PersistentQueue = function __GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, 0);
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core/NeverEquiv");
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.__GT_NeverEquiv = function __GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.map_QMARK_.call(null, y) ? cljs.core.count.call(null, x) === cljs.core.count.call(null, y) ? cljs.core.every_QMARK_.call(null, cljs.core.identity, cljs.core.map.call(null, function(xkv) {
    return cljs.core._EQ_.call(null, cljs.core.get.call(null, y, cljs.core.first.call(null, xkv), cljs.core.never_equiv), cljs.core.second.call(null, xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__17495 = i + incr;
        i = G__17495;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash.call(null, a);
  var b__$1 = cljs.core.hash.call(null, b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return 0;
      } else {
        return null;
      }
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta.call(null, m);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__17496 = i + 1;
      var G__17497 = cljs.core.assoc_BANG_.call(null, out, k__$1, so[k__$1]);
      i = G__17496;
      out = G__17497;
      continue;
    } else {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.assoc_BANG_.call(null, out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = function() {
    var obj17501 = {};
    return obj17501;
  }();
  var l = ks.length;
  var i_17502 = 0;
  while (true) {
    if (i_17502 < l) {
      var k_17503 = ks[i_17502];
      new_obj[k_17503] = obj[k_17503];
      var G__17504 = i_17502 + 1;
      i_17502 = G__17504;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core/ObjMap");
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__15953__auto__ = self__.__hash;
  if (!(h__15953__auto__ == null)) {
    return h__15953__auto__;
  } else {
    var h__15953__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__15953__auto____$1;
    return h__15953__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k)) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone.call(null, self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__17507 = null;
  var G__17507__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__17507__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__17507 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17507__2.call(this, self__, k);
      case 3:
        return G__17507__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17507;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args17506) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args17506)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq.call(null, keys__$1)) {
      var k = cljs.core.first.call(null, keys__$1);
      var init__$2 = f.call(null, init__$1, k, self__.strobj[k]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__17508 = cljs.core.rest.call(null, keys__$1);
        var G__17509 = init__$2;
        keys__$1 = G__17508;
        init__$1 = G__17509;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.call(null, function(p1__17505_SHARP_) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__17505_SHARP_, self__.strobj[p1__17505_SHARP_]], null);
    }, self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone.call(null, self__.keys);
    var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array.call(null, 1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.__GT_ObjMap = function __GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj17511 = {};
  return obj17511;
}(), 0, 0);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.array_map_index_of_nil_QMARK_ = function array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__17512 = i + 2;
          i = G__17512;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__17513 = i + 2;
          i = G__17513;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__17514 = i + 2;
          i = G__17514;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__17515 = i + 2;
          i = G__17515;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.call(null, k, arr[i])) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__17516 = i + 2;
          i = G__17516;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_.call(null, arr, m, k);
  } else {
    if (goog.isString(k) || typeof k === "number") {
      return cljs.core.array_map_index_of_identical_QMARK_.call(null, arr, m, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_.call(null, arr, m, k);
      } else {
        if (k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_.call(null, arr, m, k);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.core.array_map_index_of_equiv_QMARK_.call(null, arr, m, k);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_17517 = 0;
  while (true) {
    if (i_17517 < l) {
      narr[i_17517] = arr[i_17517];
      var G__17518 = i_17517 + 1;
      i_17517 = G__17518;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_PersistentArrayMapSeq = function __GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.persistent_array_map_seq = function persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj17521 = {};
    return obj17521;
  }(), self__.arr.length, cljs.core.aclone.call(null, self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__15953__auto__ = self__.__hash;
  if (!(h__15953__auto__ == null)) {
    return h__15953__auto__;
  } else {
    var h__15953__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__15953__auto____$1;
    return h__15953__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv.call(null, coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta.call(null, cljs.core._assoc.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var arr__$1 = function() {
          var G__17522 = cljs.core.aclone.call(null, self__.arr);
          G__17522[idx + 1] = v;
          return G__17522;
        }();
        return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of.call(null, coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__17523 = null;
  var G__17523__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__17523__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__17523 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17523__2.call(this, self__, k);
      case 3:
        return G__17523__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17523;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args17519) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args17519)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = f.call(null, init__$1, self__.arr[i], self__.arr[i + 1]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__17524 = i + 2;
        var G__17525 = init__$2;
        i = G__17524;
        init__$1 = G__17525;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq.call(null, self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.call(null, k, self__.arr[s])) {
            var G__17526 = s + 2;
            var G__17527 = d;
            s = G__17526;
            d = G__17527;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              new_arr[d] = self__.arr[s];
              new_arr[d + 1] = self__.arr[s + 1];
              var G__17528 = s + 2;
              var G__17529 = d + 2;
              s = G__17528;
              d = G__17529;
              continue;
            } else {
              return null;
            }
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.__GT_PersistentArrayMap = function __GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], null);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone.call(null, arr);
  if (no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null);
  } else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__17530 = i + 2;
        var G__17531 = cljs.core._assoc_BANG_.call(null, ret, arr__$1[i], arr__$1[i + 1]);
        i = G__17530;
        ret = G__17531;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, ret);
      }
      break;
    }
  }
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__17532_17534 = self__.arr;
      G__17532_17534.pop();
      G__17532_17534.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.call(null, cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__17533 = o;
      if (G__17533) {
        var bit__16192__auto__ = G__17533.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__16192__auto__ || G__17533.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__17533.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__17533);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__17533);
      }
    }()) {
      return cljs.core._assoc_BANG_.call(null, tcoll__$1, cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4090__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          var G__17535 = cljs.core.next.call(null, es);
          var G__17536 = cljs.core._assoc_BANG_.call(null, tcoll__$2, cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__17535;
          tcoll__$2 = G__17536;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot.call(null, self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.__GT_TransientArrayMap = function __GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__17537 = cljs.core.assoc_BANG_.call(null, out, arr[i], arr[i + 1]);
      var G__17538 = i + 2;
      out = G__17537;
      i = G__17538;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__16112__auto__, writer__16113__auto__, opts__16114__auto__) {
  return cljs.core._write.call(null, writer__16113__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function __GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, key, other)) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core._EQ_.call(null, key, other);
      } else {
        return null;
      }
    }
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__17541 = cljs.core.aclone.call(null, arr);
    G__17541[i] = a;
    return G__17541;
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__17542 = cljs.core.aclone.call(null, arr);
    G__17542[i] = a;
    G__17542[j] = b;
    return G__17542;
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$core$IFn$_invoke$arity$3 = clone_and_set__3;
  clone_and_set.cljs$core$IFn$_invoke$arity$5 = clone_and_set__5;
  return clone_and_set;
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy.call(null, arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy.call(null, arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count.call(null, bitmap & bit - 1);
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable;
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable;
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$core$IFn$_invoke$arity$4 = edit_and_set__4;
  edit_and_set.cljs$core$IFn$_invoke$arity$6 = edit_and_set__6;
  return edit_and_set;
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          return f.call(null, init__$1, k, arr[i + 1]);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__17543 = i + 2;
        var G__17544 = init__$2;
        i = G__17543;
        init__$1 = G__17544;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy.call(null, earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward.call(null, earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_17545 = 0;
        var j_17546 = 0;
        while (true) {
          if (i_17545 < 32) {
            if ((self__.bitmap >>> i_17545 & 1) === 0) {
              var G__17547 = i_17545 + 1;
              var G__17548 = j_17546;
              i_17545 = G__17547;
              j_17546 = G__17548;
              continue;
            } else {
              nodes[i_17545] = !(self__.arr[j_17546] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash.call(null, self__.arr[j_17546]), self__.arr[j_17546], self__.arr[j_17546 + 1], added_leaf_QMARK_) : self__.arr[j_17546 + 1];
              var G__17549 = i_17545 + 1;
              var G__17550 = j_17546 + 2;
              i_17545 = G__17549;
              j_17546 = G__17550;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_arr = new Array(2 * (n + 4));
          cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
          new_arr[2 * idx] = key;
          new_arr[2 * idx + 1] = val;
          cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
          added_leaf_QMARK_.val = true;
          var editable = inode.ensure_editable(edit__$1);
          editable.arr = new_arr;
          editable.bitmap = editable.bitmap | bit;
          return editable;
        } else {
          return null;
        }
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, edit__$1, shift + 5, key_or_nil, val_or_node, hash, key, val));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return inode.edit_and_remove_pair(edit__$1, bit, idx);
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_17551 = 0;
      var j_17552 = 0;
      while (true) {
        if (i_17551 < 32) {
          if ((self__.bitmap >>> i_17551 & 1) === 0) {
            var G__17553 = i_17551 + 1;
            var G__17554 = j_17552;
            i_17551 = G__17553;
            j_17552 = G__17554;
            continue;
          } else {
            nodes[i_17551] = !(self__.arr[j_17552] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash.call(null, self__.arr[j_17552]), self__.arr[j_17552], self__.arr[j_17552 + 1], added_leaf_QMARK_) : self__.arr[j_17552 + 1];
            var G__17555 = i_17551 + 1;
            var G__17556 = j_17552 + 2;
            i_17551 = G__17555;
            j_17552 = G__17556;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, val));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, shift + 5, key_or_nil, val_or_node, hash, key, val)));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return val_or_node;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.__GT_BitmapIndexedNode = function __GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = 2 * (array_node.cnt - 1);
  var new_arr = new Array(len);
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__17557 = i + 1;
        var G__17558 = j + 2;
        var G__17559 = bitmap | 1 << i;
        i = G__17557;
        j = G__17558;
        bitmap = G__17559;
        continue;
      } else {
        var G__17560 = i + 1;
        var G__17561 = j;
        var G__17562 = bitmap;
        i = G__17560;
        j = G__17561;
        bitmap = G__17562;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core/ArrayNode");
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.call(null, self__.arr);
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone.call(null, self__.arr));
  }
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
          return cljs.core.deref.call(null, init__$2);
        } else {
          var G__17563 = i + 1;
          var G__17564 = init__$2;
          i = G__17563;
          init__$1 = G__17564;
          continue;
        }
      } else {
        var G__17565 = i + 1;
        var G__17566 = init__$1;
        i = G__17565;
        init__$1 = G__17566;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        } else {
          return null;
        }
      }
    }
  } else {
    return inode;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.call(null, self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.__GT_ArrayNode = function __GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test.call(null, key, arr[i])) {
        return i;
      } else {
        var G__17567 = i + 2;
        i = G__17567;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair.call(null, self__.arr, cljs.core.quot.call(null, idx, 2)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.call(null, self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.__GT_HashCollisionNode = function __GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$core$IFn$_invoke$arity$6 = create_node__6;
  create_node.cljs$core$IFn$_invoke$arity$7 = create_node__7;
  return create_node;
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core/NodeSeq");
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__15953__auto__ = self__.__hash;
  if (!(h__15953__auto__ == null)) {
    return h__15953__auto__;
  } else {
    var h__15953__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__15953__auto____$1;
    return h__15953__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i + 2, null);
  } else {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_NodeSeq = function __GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.call(null, nodes, 0, null);
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          if (!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null);
          } else {
            var temp__4090__auto__ = nodes[j + 1];
            if (cljs.core.truth_(temp__4090__auto__)) {
              var node = temp__4090__auto__;
              var temp__4090__auto____$1 = node.inode_seq();
              if (cljs.core.truth_(temp__4090__auto____$1)) {
                var node_seq = temp__4090__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
              } else {
                var G__17568 = j + 2;
                j = G__17568;
                continue;
              }
            } else {
              var G__17569 = j + 2;
              j = G__17569;
              continue;
            }
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null);
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$core$IFn$_invoke$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$core$IFn$_invoke$arity$3 = create_inode_seq__3;
  return create_inode_seq;
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__15953__auto__ = self__.__hash;
  if (!(h__15953__auto__ == null)) {
    return h__15953__auto__;
  } else {
    var h__15953__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__15953__auto____$1;
    return h__15953__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.create_array_node_seq.call(null, null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_ArrayNodeSeq = function __GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.call(null, null, nodes, 0, null);
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          var temp__4090__auto__ = nodes[j];
          if (cljs.core.truth_(temp__4090__auto__)) {
            var nj = temp__4090__auto__;
            var temp__4090__auto____$1 = nj.inode_seq();
            if (cljs.core.truth_(temp__4090__auto____$1)) {
              var ns = temp__4090__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
            } else {
              var G__17570 = j + 1;
              j = G__17570;
              continue;
            }
          } else {
            var G__17571 = j + 1;
            j = G__17571;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = create_array_node_seq__4;
  return create_array_node_seq;
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj17574 = {};
    return obj17574;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__15953__auto__ = self__.__hash;
  if (!(h__15953__auto__ == null)) {
    return h__15953__auto__;
  } else {
    var h__15953__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__15953__auto____$1;
    return h__15953__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return!(self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__17575 = null;
  var G__17575__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__17575__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__17575 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17575__2.call(this, self__, k);
      case 3:
        return G__17575__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17575;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args17572) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args17572)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.call(null, init, null, self__.nil_val) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return init__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var new_root = self__.root.inode_without(0, cljs.core.hash.call(null, k), k);
        if (new_root === self__.root) {
          return coll__$1;
        } else {
          return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.__GT_PersistentHashMap = function __GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, 0);
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__17576 = i + 1;
      var G__17577 = cljs.core._assoc_BANG_.call(null, out, ks[i], vs[i]);
      i = G__17576;
      out = G__17577;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, out);
    }
    break;
  }
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core/TransientHashMap");
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__17578 = o;
      if (G__17578) {
        var bit__16192__auto__ = G__17578.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__16192__auto__ || G__17578.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__17578.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__17578);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__17578);
      }
    }()) {
      return tcoll.assoc_BANG_(cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4090__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          var G__17579 = cljs.core.next.call(null, es);
          var G__17580 = tcoll__$1.assoc_BANG_(cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__17579;
          tcoll__$1 = G__17580;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientHashMap = function __GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__17581 = ascending_QMARK_ ? t.left : t.right;
      var G__17582 = cljs.core.conj.call(null, stack__$1, t);
      t = G__17581;
      stack__$1 = G__17582;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__15953__auto__ = self__.__hash;
  if (!(h__15953__auto__ == null)) {
    return h__15953__auto__;
  } else {
    var h__15953__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__15953__auto____$1;
    return h__15953__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count.call(null, cljs.core.next.call(null, coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek.call(null, self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first.call(null, self__.stack);
  var next_stack = cljs.core.tree_map_seq_push.call(null, self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next.call(null, self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentTreeMapSeq = function __GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push.call(null, tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, ins, right, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, left, ins, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right.call(null, key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right.call(null, right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left.call(null, key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left.call(null, left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce.call(null, node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    var init__$2 = f.call(null, init__$1, node.key, node.val);
    if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
      return cljs.core.deref.call(null, init__$2);
    } else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce.call(null, node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
        return cljs.core.deref.call(null, init__$3);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core/BlackNode");
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__15953__auto__ = self__.__hash;
  if (!(h__15953__auto__ == null)) {
    return h__15953__auto__;
  } else {
    var h__15953__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__15953__auto____$1;
    return h__15953__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__17584 = null;
  var G__17584__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__17584__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__17584 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17584__2.call(this, self__, k);
      case 3:
        return G__17584__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17584;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args17583) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args17583)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del.call(null, self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del.call(null, self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.__GT_BlackNode = function __GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core/RedNode");
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__15953__auto__ = self__.__hash;
  if (!(h__15953__auto__ == null)) {
    return h__15953__auto__;
  } else {
    var h__15953__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__15953__auto____$1;
    return h__15953__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.call = function() {
  var G__17586 = null;
  var G__17586__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__17586__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__17586 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17586__2.call(this, self__, k);
      case 3:
        return G__17586__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17586;
}();
cljs.core.RedNode.prototype.apply = function(self__, args17585) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args17585)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.__GT_RedNode = function __GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = tree_map_add.call(null, comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var ins = tree_map_add.call(null, comp, tree.right, k, v, found);
          if (!(ins == null)) {
            return tree.add_right(ins);
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = tree_map_append.call(null, left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append.call(null, left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append.call(null, left, right.left), right.right, null);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var app = tree_map_append.call(null, left.right, right.left);
            if (app instanceof cljs.core.RedNode) {
              return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
            } else {
              return cljs.core.balance_left_del.call(null, left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
            }
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append.call(null, tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = tree_map_remove.call(null, comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del.call(null, tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var del = tree_map_remove.call(null, comp, tree.right, k, found);
          if (!(del == null) || !(found[0] == null)) {
            if (tree.right instanceof cljs.core.BlackNode) {
              return cljs.core.balance_right_del.call(null, tree.key, tree.val, tree.left, del);
            } else {
              return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
            }
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.call(null, k, tk);
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace.call(null, comp, tree.left, k, v), tree.right);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return tree.replace(tk, tree.val, tree.left, tree_map_replace.call(null, comp, tree.right, k, v));
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__15953__auto__ = self__.__hash;
  if (!(h__15953__auto__ == null)) {
    return h__15953__auto__;
  } else {
    var h__15953__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__15953__auto____$1;
    return h__15953__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add.call(null, self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.call(null, found, 0);
    if (cljs.core._EQ_.call(null, v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace.call(null, self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__17588 = null;
  var G__17588__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__17588__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__17588 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17588__2.call(this, self__, k);
      case 3:
        return G__17588__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17588;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args17587) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args17587)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce.call(null, self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = self__.comp.call(null, k, t.key);
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__17589 = t.left;
          t = G__17589;
          continue;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var G__17590 = t.right;
            t = G__17590;
            continue;
          } else {
            return null;
          }
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = self__.comp.call(null, k, t.key);
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.call(null, stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__17591 = cljs.core.conj.call(null, stack, t);
              var G__17592 = t.left;
              stack = G__17591;
              t = G__17592;
              continue;
            } else {
              var G__17593 = stack;
              var G__17594 = t.right;
              stack = G__17593;
              t = G__17594;
              continue;
            }
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              if (c > 0) {
                var G__17595 = cljs.core.conj.call(null, stack, t);
                var G__17596 = t.right;
                stack = G__17595;
                t = G__17596;
                continue;
              } else {
                var G__17597 = stack;
                var G__17598 = t.left;
                stack = G__17597;
                t = G__17598;
                continue;
              }
            } else {
              return null;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.call(null, entry);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeMap.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove.call(null, self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.call(null, found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.__GT_PersistentTreeMap = function __GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, 0);
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
    while (true) {
      if (in$) {
        var G__17599 = cljs.core.nnext.call(null, in$);
        var G__17600 = cljs.core.assoc_BANG_.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__17599;
        out = G__17600;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hash_map__delegate.call(this, keyvals);
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__17601) {
    var keyvals = cljs.core.seq(arglist__17601);
    return hash_map__delegate(keyvals);
  };
  hash_map.cljs$core$IFn$_invoke$arity$variadic = hash_map__delegate;
  return hash_map;
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, cljs.core.count.call(null, keyvals), 2), cljs.core.apply.call(null, cljs.core.array, keyvals), null);
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return array_map__delegate.call(this, keyvals);
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__17602) {
    var keyvals = cljs.core.seq(arglist__17602);
    return array_map__delegate(keyvals);
  };
  array_map.cljs$core$IFn$_invoke$arity$variadic = array_map__delegate;
  return array_map;
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj17606 = {};
      return obj17606;
    }();
    var kvs = cljs.core.seq.call(null, keyvals);
    while (true) {
      if (kvs) {
        ks.push(cljs.core.first.call(null, kvs));
        obj[cljs.core.first.call(null, kvs)] = cljs.core.second.call(null, kvs);
        var G__17607 = cljs.core.nnext.call(null, kvs);
        kvs = G__17607;
        continue;
      } else {
        return cljs.core.ObjMap.fromObject.call(null, ks, obj);
      }
      break;
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return obj_map__delegate.call(this, keyvals);
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__17608) {
    var keyvals = cljs.core.seq(arglist__17608);
    return obj_map__delegate(keyvals);
  };
  obj_map.cljs$core$IFn$_invoke$arity$variadic = obj_map__delegate;
  return obj_map;
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while (true) {
      if (in$) {
        var G__17609 = cljs.core.nnext.call(null, in$);
        var G__17610 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__17609;
        out = G__17610;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_map__delegate.call(this, keyvals);
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__17611) {
    var keyvals = cljs.core.seq(arglist__17611);
    return sorted_map__delegate(keyvals);
  };
  sorted_map.cljs$core$IFn$_invoke$arity$variadic = sorted_map__delegate;
  return sorted_map;
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator.call(null, comparator), null, 0, null, 0);
    while (true) {
      if (in$) {
        var G__17612 = cljs.core.nnext.call(null, in$);
        var G__17613 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__17612;
        out = G__17613;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals);
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__17614) {
    var comparator = cljs.core.first(arglist__17614);
    var keyvals = cljs.core.rest(arglist__17614);
    return sorted_map_by__delegate(comparator, keyvals);
  };
  sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by;
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core/KeySeq");
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__17615 = self__.mseq;
    if (G__17615) {
      var bit__16192__auto__ = G__17615.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__16192__auto__ || G__17615.cljs$core$INext$) {
        return true;
      } else {
        if (!G__17615.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__17615);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__17615);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._key.call(null, me);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__17616 = self__.mseq;
    if (G__17616) {
      var bit__16192__auto__ = G__17616.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__16192__auto__ || G__17616.cljs$core$INext$) {
        return true;
      } else {
        if (!G__17616.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__17616);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__17616);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_KeySeq = function __GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.keys = function keys(hash_map) {
  var temp__4092__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4092__auto__) {
    var mseq = temp__4092__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key.call(null, map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core/ValSeq");
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__17617 = self__.mseq;
    if (G__17617) {
      var bit__16192__auto__ = G__17617.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__16192__auto__ || G__17617.cljs$core$INext$) {
        return true;
      } else {
        if (!G__17617.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__17617);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__17617);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._val.call(null, me);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__17618 = self__.mseq;
    if (G__17618) {
      var bit__16192__auto__ = G__17618.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__16192__auto__ || G__17618.cljs$core$INext$) {
        return true;
      } else {
        if (!G__17618.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__17618);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__17618);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_ValSeq = function __GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.vals = function vals(hash_map) {
  var temp__4092__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4092__auto__) {
    var mseq = temp__4092__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val.call(null, map_entry);
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      return cljs.core.reduce.call(null, function(p1__17619_SHARP_, p2__17620_SHARP_) {
        return cljs.core.conj.call(null, function() {
          var or__15542__auto__ = p1__17619_SHARP_;
          if (cljs.core.truth_(or__15542__auto__)) {
            return or__15542__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), p2__17620_SHARP_);
      }, maps);
    } else {
      return null;
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return merge__delegate.call(this, maps);
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__17621) {
    var maps = cljs.core.seq(arglist__17621);
    return merge__delegate(maps);
  };
  merge.cljs$core$IFn$_invoke$arity$variadic = merge__delegate;
  return merge;
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first.call(null, e);
        var v = cljs.core.second.call(null, e);
        if (cljs.core.contains_QMARK_.call(null, m, k)) {
          return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), v));
        } else {
          return cljs.core.assoc.call(null, m, k, v);
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.call(null, merge_entry, function() {
            var or__15542__auto__ = m1;
            if (cljs.core.truth_(or__15542__auto__)) {
              return or__15542__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq.call(null, m2));
        };
      }(merge_entry);
      return cljs.core.reduce.call(null, merge2, maps);
    } else {
      return null;
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return merge_with__delegate.call(this, f, maps);
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__17622) {
    var f = cljs.core.first(arglist__17622);
    var maps = cljs.core.rest(arglist__17622);
    return merge_with__delegate(f, maps);
  };
  merge_with.cljs$core$IFn$_invoke$arity$variadic = merge_with__delegate;
  return merge_with;
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq.call(null, keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first.call(null, keys);
      var entry = cljs.core.get.call(null, map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789));
      var G__17623 = cljs.core.not_EQ_.call(null, entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789)) ? cljs.core.assoc.call(null, ret, key, entry) : ret;
      var G__17624 = cljs.core.next.call(null, keys);
      ret = G__17623;
      keys = G__17624;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient.call(null, self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__15953__auto__ = self__.__hash;
  if (!(h__15953__auto__ == null)) {
    return h__15953__auto__;
  } else {
    var h__15953__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__15953__auto____$1;
    return h__15953__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_.call(null, self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__17627 = null;
  var G__17627__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__17627__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__17627 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17627__2.call(this, self__, k);
      case 3:
        return G__17627__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17627;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args17626) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args17626)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.call(null, self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc.call(null, self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && (cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(p1__17625_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, coll__$1, p1__17625_SHARP_);
  }, other));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentHashSet = function __GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, 0);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone.call(null, items);
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__17628 = i + 1;
        var G__17629 = cljs.core._assoc_BANG_.call(null, out, items[i], null);
        i = G__17628;
        out = G__17629;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_.call(null, out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__17630 = i + 1;
        var G__17631 = cljs.core._conj_BANG_.call(null, out, items[i]);
        i = G__17630;
        out = G__17631;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core/TransientHashSet");
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__17633 = null;
  var G__17633__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__17633__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__17633 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17633__2.call(this, self__, k);
      case 3:
        return G__17633__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17633;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args17632) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args17632)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.call(null, self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count.call(null, self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.call(null, self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.call(null, self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_.call(null, self__.transient_map), null);
};
cljs.core.__GT_TransientHashSet = function __GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__15953__auto__ = self__.__hash;
  if (!(h__15953__auto__ == null)) {
    return h__15953__auto__;
  } else {
    var h__15953__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__15953__auto____$1;
    return h__15953__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__17636 = null;
  var G__17636__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__17636__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__17636 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17636__2.call(this, self__, k);
      case 3:
        return G__17636__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17636;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args17635) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args17635)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.call(null, self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count.call(null, self__.tree_map) > 0) {
    return cljs.core.map.call(null, cljs.core.key, cljs.core.rseq.call(null, self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq.call(null, self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq_from.call(null, self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.call(null, self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && (cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(p1__17634_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, coll__$1, p1__17634_SHARP_);
  }, other));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeSet.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentTreeSet = function __GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, 0);
cljs.core.set_from_indexed_seq = function set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__16384__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__16384__auto__.length) {
        var G__17637 = i + 1;
        var G__17638 = cljs.core._conj_BANG_.call(null, res, arr[i]);
        i = G__17637;
        res = G__17638;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return cljs.core._persistent_BANG_.call(null, ret);
};
cljs.core.set = function set(coll) {
  var in$ = cljs.core.seq.call(null, coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq.call(null, in$);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var in$__$1 = in$;
        var out = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
        while (true) {
          if (!(in$__$1 == null)) {
            var G__17639 = cljs.core._next.call(null, in$__$1);
            var G__17640 = cljs.core._conj_BANG_.call(null, out, cljs.core._first.call(null, in$__$1));
            in$__$1 = G__17639;
            out = G__17640;
            continue;
          } else {
            return cljs.core._persistent_BANG_.call(null, out);
          }
          break;
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var hash_set__1 = function() {
    var G__17641__delegate = function(keys) {
      return cljs.core.set.call(null, keys);
    };
    var G__17641 = function(var_args) {
      var keys = null;
      if (arguments.length > 0) {
        keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__17641__delegate.call(this, keys);
    };
    G__17641.cljs$lang$maxFixedArity = 0;
    G__17641.cljs$lang$applyTo = function(arglist__17642) {
      var keys = cljs.core.seq(arglist__17642);
      return G__17641__delegate(keys);
    };
    G__17641.cljs$core$IFn$_invoke$arity$variadic = G__17641__delegate;
    return G__17641;
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        return hash_set__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$core$IFn$_invoke$arity$0 = hash_set__0;
  hash_set.cljs$core$IFn$_invoke$arity$variadic = hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return hash_set;
}();
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if (arguments.length > 0) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_set__delegate.call(this, keys);
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__17643) {
    var keys = cljs.core.seq(arglist__17643);
    return sorted_set__delegate(keys);
  };
  sorted_set.cljs$core$IFn$_invoke$arity$variadic = sorted_set__delegate;
  return sorted_set;
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by.call(null, comparator), 0), keys);
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_set_by__delegate.call(this, comparator, keys);
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__17644) {
    var comparator = cljs.core.first(arglist__17644);
    var keys = cljs.core.rest(arglist__17644);
    return sorted_set_by__delegate(comparator, keys);
  };
  sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by;
}();
cljs.core.replace = function replace(smap, coll) {
  if (cljs.core.vector_QMARK_.call(null, coll)) {
    var n = cljs.core.count.call(null, coll);
    return cljs.core.reduce.call(null, function(v, i) {
      var temp__4090__auto__ = cljs.core.find.call(null, smap, cljs.core.nth.call(null, v, i));
      if (cljs.core.truth_(temp__4090__auto__)) {
        var e = temp__4090__auto__;
        return cljs.core.assoc.call(null, v, i, cljs.core.second.call(null, e));
      } else {
        return v;
      }
    }, coll, cljs.core.take.call(null, n, cljs.core.iterate.call(null, cljs.core.inc, 0)));
  } else {
    return cljs.core.map.call(null, function(p1__17645_SHARP_) {
      var temp__4090__auto__ = cljs.core.find.call(null, smap, p1__17645_SHARP_);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var e = temp__4090__auto__;
        return cljs.core.second.call(null, e);
      } else {
        return p1__17645_SHARP_;
      }
    }, coll);
  }
};
cljs.core.distinct = function distinct(coll) {
  var step = function step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__17652, seen__$1) {
        while (true) {
          var vec__17653 = p__17652;
          var f = cljs.core.nth.call(null, vec__17653, 0, null);
          var xs__$1 = vec__17653;
          var temp__4092__auto__ = cljs.core.seq.call(null, xs__$1);
          if (temp__4092__auto__) {
            var s = temp__4092__auto__;
            if (cljs.core.contains_QMARK_.call(null, seen__$1, f)) {
              var G__17654 = cljs.core.rest.call(null, s);
              var G__17655 = seen__$1;
              p__17652 = G__17654;
              seen__$1 = G__17655;
              continue;
            } else {
              return cljs.core.cons.call(null, f, step.call(null, cljs.core.rest.call(null, s), cljs.core.conj.call(null, seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step.call(null, coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next.call(null, s__$1)) {
      var G__17656 = cljs.core.conj.call(null, ret, cljs.core.first.call(null, s__$1));
      var G__17657 = cljs.core.next.call(null, s__$1);
      ret = G__17656;
      s__$1 = G__17657;
      continue;
    } else {
      return cljs.core.seq.call(null, ret);
    }
    break;
  }
};
cljs.core.name = function name(x) {
  if (function() {
    var G__17659 = x;
    if (G__17659) {
      var bit__16185__auto__ = G__17659.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__16185__auto__ || G__17659.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._name.call(null, x);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq.call(null, keys);
  var vs = cljs.core.seq.call(null, vals);
  while (true) {
    if (ks && vs) {
      var G__17660 = cljs.core.assoc_BANG_.call(null, map, cljs.core.first.call(null, ks), cljs.core.first.call(null, vs));
      var G__17661 = cljs.core.next.call(null, ks);
      var G__17662 = cljs.core.next.call(null, vs);
      map = G__17660;
      ks = G__17661;
      vs = G__17662;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, map);
    }
    break;
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x;
  };
  var max_key__3 = function(k, x, y) {
    if (k.call(null, x) > k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var max_key__4 = function() {
    var G__17665__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__17663_SHARP_, p2__17664_SHARP_) {
        return max_key.call(null, k, p1__17663_SHARP_, p2__17664_SHARP_);
      }, max_key.call(null, k, x, y), more);
    };
    var G__17665 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__17665__delegate.call(this, k, x, y, more);
    };
    G__17665.cljs$lang$maxFixedArity = 3;
    G__17665.cljs$lang$applyTo = function(arglist__17666) {
      var k = cljs.core.first(arglist__17666);
      arglist__17666 = cljs.core.next(arglist__17666);
      var x = cljs.core.first(arglist__17666);
      arglist__17666 = cljs.core.next(arglist__17666);
      var y = cljs.core.first(arglist__17666);
      var more = cljs.core.rest(arglist__17666);
      return G__17665__delegate(k, x, y, more);
    };
    G__17665.cljs$core$IFn$_invoke$arity$variadic = G__17665__delegate;
    return G__17665;
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        return max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$core$IFn$_invoke$arity$2 = max_key__2;
  max_key.cljs$core$IFn$_invoke$arity$3 = max_key__3;
  max_key.cljs$core$IFn$_invoke$arity$variadic = max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return max_key;
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x;
  };
  var min_key__3 = function(k, x, y) {
    if (k.call(null, x) < k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var min_key__4 = function() {
    var G__17669__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__17667_SHARP_, p2__17668_SHARP_) {
        return min_key.call(null, k, p1__17667_SHARP_, p2__17668_SHARP_);
      }, min_key.call(null, k, x, y), more);
    };
    var G__17669 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__17669__delegate.call(this, k, x, y, more);
    };
    G__17669.cljs$lang$maxFixedArity = 3;
    G__17669.cljs$lang$applyTo = function(arglist__17670) {
      var k = cljs.core.first(arglist__17670);
      arglist__17670 = cljs.core.next(arglist__17670);
      var x = cljs.core.first(arglist__17670);
      arglist__17670 = cljs.core.next(arglist__17670);
      var y = cljs.core.first(arglist__17670);
      var more = cljs.core.rest(arglist__17670);
      return G__17669__delegate(k, x, y, more);
    };
    G__17669.cljs$core$IFn$_invoke$arity$variadic = G__17669__delegate;
    return G__17669;
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        return min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$core$IFn$_invoke$arity$2 = min_key__2;
  min_key.cljs$core$IFn$_invoke$arity$3 = min_key__3;
  min_key.cljs$core$IFn$_invoke$arity$variadic = min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return min_key;
}();
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__2 = function(n, coll) {
    return partition_all.call(null, n, n, coll);
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return cljs.core.cons.call(null, cljs.core.take.call(null, n, s), partition_all.call(null, n, step, cljs.core.drop.call(null, step, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$core$IFn$_invoke$arity$2 = partition_all__2;
  partition_all.cljs$core$IFn$_invoke$arity$3 = partition_all__3;
  return partition_all;
}();
cljs.core.take_while = function take_while(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, s)))) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_while.call(null, pred, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator.call(null, sc);
    return test.call(null, comp.call(null, cljs.core._entry_key.call(null, sc, e), key), 0);
  };
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, true);
      if (cljs.core.truth_(temp__4092__auto__)) {
        var vec__17673 = temp__4092__auto__;
        var e = cljs.core.nth.call(null, vec__17673, 0, null);
        var s = vec__17673;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, true));
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, start_key, true);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var vec__17674 = temp__4092__auto__;
      var e = cljs.core.nth.call(null, vec__17674, 0, null);
      var s = vec__17674;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, start_test, start_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$core$IFn$_invoke$arity$3 = subseq__3;
  subseq.cljs$core$IFn$_invoke$arity$5 = subseq__5;
  return subseq;
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, false);
      if (cljs.core.truth_(temp__4092__auto__)) {
        var vec__17677 = temp__4092__auto__;
        var e = cljs.core.nth.call(null, vec__17677, 0, null);
        var s = vec__17677;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, false));
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, end_key, false);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var vec__17678 = temp__4092__auto__;
      var e = cljs.core.nth.call(null, vec__17678, 0, null);
      var s = vec__17678;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, end_test, end_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$core$IFn$_invoke$arity$3 = rsubseq__3;
  rsubseq.cljs$core$IFn$_invoke$arity$5 = rsubseq__5;
  return rsubseq;
}();
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core/Range");
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__15953__auto__ = self__.__hash;
  if (!(h__15953__auto__ == null)) {
    return h__15953__auto__;
  } else {
    var h__15953__auto____$1 = cljs.core.hash_coll.call(null, rng__$1);
    self__.__hash = h__15953__auto____$1;
    return h__15953__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons.call(null, o, rng__$1);
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, s) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f, s);
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not.call(null, cljs.core._seq.call(null, rng__$1))) {
    return 0;
  } else {
    return Math.ceil((self__.end - self__.start) / self__.step);
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq.call(null, rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq.call(null, rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential.call(null, rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_Range = function __GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.call(null, 0, Number.MAX_VALUE, 1);
  };
  var range__1 = function(end) {
    return range.call(null, 0, end, 1);
  };
  var range__2 = function(start, end) {
    return range.call(null, start, end, 1);
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null);
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$core$IFn$_invoke$arity$0 = range__0;
  range.cljs$core$IFn$_invoke$arity$1 = range__1;
  range.cljs$core$IFn$_invoke$arity$2 = range__2;
  range.cljs$core$IFn$_invoke$arity$3 = range__3;
  return range;
}();
cljs.core.take_nth = function take_nth(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_nth.call(null, n, cljs.core.drop.call(null, n, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_with = function split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.call(null, pred, coll), cljs.core.drop_while.call(null, pred, coll)], null);
};
cljs.core.partition_by = function partition_by(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      var fst = cljs.core.first.call(null, s);
      var fv = f.call(null, fst);
      var run = cljs.core.cons.call(null, fst, cljs.core.take_while.call(null, function(fst, fv) {
        return function(p1__17679_SHARP_) {
          return cljs.core._EQ_.call(null, fv, f.call(null, p1__17679_SHARP_));
        };
      }(fst, fv), cljs.core.next.call(null, s)));
      return cljs.core.cons.call(null, run, partition_by.call(null, f, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, run), s))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(counts, x) {
    return cljs.core.assoc_BANG_.call(null, counts, x, cljs.core.get.call(null, counts, x, 0) + 1);
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4090__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4090__auto__) {
        var s = temp__4090__auto__;
        return reductions.call(null, f, cljs.core.first.call(null, s), cljs.core.rest.call(null, s));
      } else {
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, f.call(null));
      }
    }, null, null);
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons.call(null, init, new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return reductions.call(null, f, f.call(null, init, cljs.core.first.call(null, s)), cljs.core.rest.call(null, s));
      } else {
        return null;
      }
    }, null, null));
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$core$IFn$_invoke$arity$2 = reductions__2;
  reductions.cljs$core$IFn$_invoke$arity$3 = reductions__3;
  return reductions;
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__17690 = null;
      var G__17690__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null)], null);
      };
      var G__17690__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x)], null);
      };
      var G__17690__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y)], null);
      };
      var G__17690__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z)], null);
      };
      var G__17690__4 = function() {
        var G__17691__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args)], null);
        };
        var G__17691 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__17691__delegate.call(this, x, y, z, args);
        };
        G__17691.cljs$lang$maxFixedArity = 3;
        G__17691.cljs$lang$applyTo = function(arglist__17692) {
          var x = cljs.core.first(arglist__17692);
          arglist__17692 = cljs.core.next(arglist__17692);
          var y = cljs.core.first(arglist__17692);
          arglist__17692 = cljs.core.next(arglist__17692);
          var z = cljs.core.first(arglist__17692);
          var args = cljs.core.rest(arglist__17692);
          return G__17691__delegate(x, y, z, args);
        };
        G__17691.cljs$core$IFn$_invoke$arity$variadic = G__17691__delegate;
        return G__17691;
      }();
      G__17690 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__17690__0.call(this);
          case 1:
            return G__17690__1.call(this, x);
          case 2:
            return G__17690__2.call(this, x, y);
          case 3:
            return G__17690__3.call(this, x, y, z);
          default:
            return G__17690__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__17690.cljs$lang$maxFixedArity = 3;
      G__17690.cljs$lang$applyTo = G__17690__4.cljs$lang$applyTo;
      return G__17690;
    }();
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__17693 = null;
      var G__17693__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null)], null);
      };
      var G__17693__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x)], null);
      };
      var G__17693__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y)], null);
      };
      var G__17693__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z)], null);
      };
      var G__17693__4 = function() {
        var G__17694__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args)], null);
        };
        var G__17694 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__17694__delegate.call(this, x, y, z, args);
        };
        G__17694.cljs$lang$maxFixedArity = 3;
        G__17694.cljs$lang$applyTo = function(arglist__17695) {
          var x = cljs.core.first(arglist__17695);
          arglist__17695 = cljs.core.next(arglist__17695);
          var y = cljs.core.first(arglist__17695);
          arglist__17695 = cljs.core.next(arglist__17695);
          var z = cljs.core.first(arglist__17695);
          var args = cljs.core.rest(arglist__17695);
          return G__17694__delegate(x, y, z, args);
        };
        G__17694.cljs$core$IFn$_invoke$arity$variadic = G__17694__delegate;
        return G__17694;
      }();
      G__17693 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__17693__0.call(this);
          case 1:
            return G__17693__1.call(this, x);
          case 2:
            return G__17693__2.call(this, x, y);
          case 3:
            return G__17693__3.call(this, x, y, z);
          default:
            return G__17693__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__17693.cljs$lang$maxFixedArity = 3;
      G__17693.cljs$lang$applyTo = G__17693__4.cljs$lang$applyTo;
      return G__17693;
    }();
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__17696 = null;
      var G__17696__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null), h.call(null)], null);
      };
      var G__17696__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x), h.call(null, x)], null);
      };
      var G__17696__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y), h.call(null, x, y)], null);
      };
      var G__17696__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z), h.call(null, x, y, z)], null);
      };
      var G__17696__4 = function() {
        var G__17697__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args), cljs.core.apply.call(null, h, x, y, z, args)], null);
        };
        var G__17697 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__17697__delegate.call(this, x, y, z, args);
        };
        G__17697.cljs$lang$maxFixedArity = 3;
        G__17697.cljs$lang$applyTo = function(arglist__17698) {
          var x = cljs.core.first(arglist__17698);
          arglist__17698 = cljs.core.next(arglist__17698);
          var y = cljs.core.first(arglist__17698);
          arglist__17698 = cljs.core.next(arglist__17698);
          var z = cljs.core.first(arglist__17698);
          var args = cljs.core.rest(arglist__17698);
          return G__17697__delegate(x, y, z, args);
        };
        G__17697.cljs$core$IFn$_invoke$arity$variadic = G__17697__delegate;
        return G__17697;
      }();
      G__17696 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__17696__0.call(this);
          case 1:
            return G__17696__1.call(this, x);
          case 2:
            return G__17696__2.call(this, x, y);
          case 3:
            return G__17696__3.call(this, x, y, z);
          default:
            return G__17696__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__17696.cljs$lang$maxFixedArity = 3;
      G__17696.cljs$lang$applyTo = G__17696__4.cljs$lang$applyTo;
      return G__17696;
    }();
  };
  var juxt__4 = function() {
    var G__17699__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.call(null, f, g, h, fs);
      return function() {
        var G__17700 = null;
        var G__17700__0 = function() {
          return cljs.core.reduce.call(null, function(p1__17680_SHARP_, p2__17681_SHARP_) {
            return cljs.core.conj.call(null, p1__17680_SHARP_, p2__17681_SHARP_.call(null));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__17700__1 = function(x) {
          return cljs.core.reduce.call(null, function(p1__17682_SHARP_, p2__17683_SHARP_) {
            return cljs.core.conj.call(null, p1__17682_SHARP_, p2__17683_SHARP_.call(null, x));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__17700__2 = function(x, y) {
          return cljs.core.reduce.call(null, function(p1__17684_SHARP_, p2__17685_SHARP_) {
            return cljs.core.conj.call(null, p1__17684_SHARP_, p2__17685_SHARP_.call(null, x, y));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__17700__3 = function(x, y, z) {
          return cljs.core.reduce.call(null, function(p1__17686_SHARP_, p2__17687_SHARP_) {
            return cljs.core.conj.call(null, p1__17686_SHARP_, p2__17687_SHARP_.call(null, x, y, z));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__17700__4 = function() {
          var G__17701__delegate = function(x, y, z, args) {
            return cljs.core.reduce.call(null, function(p1__17688_SHARP_, p2__17689_SHARP_) {
              return cljs.core.conj.call(null, p1__17688_SHARP_, cljs.core.apply.call(null, p2__17689_SHARP_, x, y, z, args));
            }, cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__17701 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__17701__delegate.call(this, x, y, z, args);
          };
          G__17701.cljs$lang$maxFixedArity = 3;
          G__17701.cljs$lang$applyTo = function(arglist__17702) {
            var x = cljs.core.first(arglist__17702);
            arglist__17702 = cljs.core.next(arglist__17702);
            var y = cljs.core.first(arglist__17702);
            arglist__17702 = cljs.core.next(arglist__17702);
            var z = cljs.core.first(arglist__17702);
            var args = cljs.core.rest(arglist__17702);
            return G__17701__delegate(x, y, z, args);
          };
          G__17701.cljs$core$IFn$_invoke$arity$variadic = G__17701__delegate;
          return G__17701;
        }();
        G__17700 = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return G__17700__0.call(this);
            case 1:
              return G__17700__1.call(this, x);
            case 2:
              return G__17700__2.call(this, x, y);
            case 3:
              return G__17700__3.call(this, x, y, z);
            default:
              return G__17700__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__17700.cljs$lang$maxFixedArity = 3;
        G__17700.cljs$lang$applyTo = G__17700__4.cljs$lang$applyTo;
        return G__17700;
      }();
    };
    var G__17699 = function(f, g, h, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__17699__delegate.call(this, f, g, h, fs);
    };
    G__17699.cljs$lang$maxFixedArity = 3;
    G__17699.cljs$lang$applyTo = function(arglist__17703) {
      var f = cljs.core.first(arglist__17703);
      arglist__17703 = cljs.core.next(arglist__17703);
      var g = cljs.core.first(arglist__17703);
      arglist__17703 = cljs.core.next(arglist__17703);
      var h = cljs.core.first(arglist__17703);
      var fs = cljs.core.rest(arglist__17703);
      return G__17699__delegate(f, g, h, fs);
    };
    G__17699.cljs$core$IFn$_invoke$arity$variadic = G__17699__delegate;
    return G__17699;
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        return juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$core$IFn$_invoke$arity$1 = juxt__1;
  juxt.cljs$core$IFn$_invoke$arity$2 = juxt__2;
  juxt.cljs$core$IFn$_invoke$arity$3 = juxt__3;
  juxt.cljs$core$IFn$_invoke$arity$variadic = juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return juxt;
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll)) {
        var G__17704 = cljs.core.next.call(null, coll);
        coll = G__17704;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  var dorun__2 = function(n, coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll) && n > 0) {
        var G__17705 = n - 1;
        var G__17706 = cljs.core.next.call(null, coll);
        n = G__17705;
        coll = G__17706;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$core$IFn$_invoke$arity$1 = dorun__1;
  dorun.cljs$core$IFn$_invoke$arity$2 = dorun__2;
  return dorun;
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.call(null, coll);
    return coll;
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.call(null, n, coll);
    return coll;
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$core$IFn$_invoke$arity$1 = doall__1;
  doall.cljs$core$IFn$_invoke$arity$2 = doall__2;
  return doall;
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp;
};
cljs.core.re_matches = function re_matches(re, s) {
  var matches = re.exec(s);
  if (cljs.core._EQ_.call(null, cljs.core.first.call(null, matches), s)) {
    if (cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches);
    } else {
      return cljs.core.vec.call(null, matches);
    }
  } else {
    return null;
  }
};
cljs.core.re_find = function re_find(re, s) {
  var matches = re.exec(s);
  if (matches == null) {
    return null;
  } else {
    if (cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches);
    } else {
      return cljs.core.vec.call(null, matches);
    }
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find.call(null, re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_.call(null, match_data) ? cljs.core.first.call(null, match_data) : match_data;
  var post_match = cljs.core.subs.call(null, s, match_idx + cljs.core.count.call(null, match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, match_data, cljs.core.seq.call(null, post_match) ? re_seq.call(null, re, post_match) : null);
    }, null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  var vec__17708 = cljs.core.re_find.call(null, /^(?:\(\?([idmsux]*)\))?(.*)/, s);
  var _ = cljs.core.nth.call(null, vec__17708, 0, null);
  var flags = cljs.core.nth.call(null, vec__17708, 1, null);
  var pattern = cljs.core.nth.call(null, vec__17708, 2, null);
  return new RegExp(pattern, flags);
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_17710 = cljs.core._STAR_print_level_STAR_;
  try {
    cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write.call(null, writer, "#");
    } else {
      cljs.core._write.call(null, writer, begin);
      if (cljs.core.seq.call(null, coll)) {
        print_one.call(null, cljs.core.first.call(null, coll), writer, opts);
      } else {
      }
      var coll_17711__$1 = cljs.core.next.call(null, coll);
      var n_17712 = (new cljs.core.Keyword(null, "print-length", "print-length", 3960797560)).cljs$core$IFn$_invoke$arity$1(opts);
      while (true) {
        if (coll_17711__$1 && (n_17712 == null || !(n_17712 === 0))) {
          cljs.core._write.call(null, writer, sep);
          print_one.call(null, cljs.core.first.call(null, coll_17711__$1), writer, opts);
          var G__17713 = cljs.core.next.call(null, coll_17711__$1);
          var G__17714 = n_17712 - 1;
          coll_17711__$1 = G__17713;
          n_17712 = G__17714;
          continue;
        } else {
        }
        break;
      }
      if (cljs.core.truth_((new cljs.core.Keyword(null, "print-length", "print-length", 3960797560)).cljs$core$IFn$_invoke$arity$1(opts))) {
        cljs.core._write.call(null, writer, sep);
        print_one.call(null, "...", writer, opts);
      } else {
      }
      return cljs.core._write.call(null, writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_17710;
  }
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var seq__17719 = cljs.core.seq.call(null, ss);
    var chunk__17720 = null;
    var count__17721 = 0;
    var i__17722 = 0;
    while (true) {
      if (i__17722 < count__17721) {
        var s = cljs.core._nth.call(null, chunk__17720, i__17722);
        cljs.core._write.call(null, writer, s);
        var G__17723 = seq__17719;
        var G__17724 = chunk__17720;
        var G__17725 = count__17721;
        var G__17726 = i__17722 + 1;
        seq__17719 = G__17723;
        chunk__17720 = G__17724;
        count__17721 = G__17725;
        i__17722 = G__17726;
        continue;
      } else {
        var temp__4092__auto__ = cljs.core.seq.call(null, seq__17719);
        if (temp__4092__auto__) {
          var seq__17719__$1 = temp__4092__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17719__$1)) {
            var c__16290__auto__ = cljs.core.chunk_first.call(null, seq__17719__$1);
            var G__17727 = cljs.core.chunk_rest.call(null, seq__17719__$1);
            var G__17728 = c__16290__auto__;
            var G__17729 = cljs.core.count.call(null, c__16290__auto__);
            var G__17730 = 0;
            seq__17719 = G__17727;
            chunk__17720 = G__17728;
            count__17721 = G__17729;
            i__17722 = G__17730;
            continue;
          } else {
            var s = cljs.core.first.call(null, seq__17719__$1);
            cljs.core._write.call(null, writer, s);
            var G__17731 = cljs.core.next.call(null, seq__17719__$1);
            var G__17732 = null;
            var G__17733 = 0;
            var G__17734 = 0;
            seq__17719 = G__17731;
            chunk__17720 = G__17732;
            count__17721 = G__17733;
            i__17722 = G__17734;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if (arguments.length > 1) {
      ss = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return write_all__delegate.call(this, writer, ss);
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__17735) {
    var writer = cljs.core.first(arglist__17735);
    var ss = cljs.core.rest(arglist__17735);
    return write_all__delegate(writer, ss);
  };
  write_all.cljs$core$IFn$_invoke$arity$variadic = write_all__delegate;
  return write_all;
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj17737 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj17737;
}();
cljs.core.quote_string = function quote_string(s) {
  return[cljs.core.str('"'), cljs.core.str(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match];
  })), cljs.core.str('"')].join("");
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write.call(null, writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write.call(null, writer, "#\x3cundefined\x3e");
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        if (cljs.core.truth_(function() {
          var and__15530__auto__ = cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
          if (cljs.core.truth_(and__15530__auto__)) {
            var and__15530__auto____$1 = function() {
              var G__17743 = obj;
              if (G__17743) {
                var bit__16192__auto__ = G__17743.cljs$lang$protocol_mask$partition0$ & 131072;
                if (bit__16192__auto__ || G__17743.cljs$core$IMeta$) {
                  return true;
                } else {
                  if (!G__17743.cljs$lang$protocol_mask$partition0$) {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__17743);
                  } else {
                    return false;
                  }
                }
              } else {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__17743);
              }
            }();
            if (and__15530__auto____$1) {
              return cljs.core.meta.call(null, obj);
            } else {
              return and__15530__auto____$1;
            }
          } else {
            return and__15530__auto__;
          }
        }())) {
          cljs.core._write.call(null, writer, "^");
          pr_writer.call(null, cljs.core.meta.call(null, obj), writer, opts);
          cljs.core._write.call(null, writer, " ");
        } else {
        }
        if (obj == null) {
          return cljs.core._write.call(null, writer, "nil");
        } else {
          if (obj.cljs$lang$type) {
            return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
          } else {
            if (function() {
              var G__17744 = obj;
              if (G__17744) {
                var bit__16185__auto__ = G__17744.cljs$lang$protocol_mask$partition0$ & 2147483648;
                if (bit__16185__auto__ || G__17744.cljs$core$IPrintWithWriter$) {
                  return true;
                } else {
                  return false;
                }
              } else {
                return false;
              }
            }()) {
              return cljs.core._pr_writer.call(null, obj, writer, opts);
            } else {
              if (cljs.core.type.call(null, obj) === Boolean || typeof obj === "number") {
                return cljs.core._write.call(null, writer, [cljs.core.str(obj)].join(""));
              } else {
                if (cljs.core.object_QMARK_.call(null, obj)) {
                  cljs.core._write.call(null, writer, "#js ");
                  return cljs.core.print_map.call(null, cljs.core.map.call(null, function(k) {
                    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), obj[k]], null);
                  }, cljs.core.js_keys.call(null, obj)), pr_writer, writer, opts);
                } else {
                  if (obj instanceof Array) {
                    return cljs.core.pr_sequential_writer.call(null, writer, pr_writer, "#js [", " ", "]", opts, obj);
                  } else {
                    if (goog.isString(obj)) {
                      if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 4441712502)).cljs$core$IFn$_invoke$arity$1(opts))) {
                        return cljs.core._write.call(null, writer, cljs.core.quote_string.call(null, obj));
                      } else {
                        return cljs.core._write.call(null, writer, obj);
                      }
                    } else {
                      if (cljs.core.fn_QMARK_.call(null, obj)) {
                        return cljs.core.write_all.call(null, writer, "#\x3c", [cljs.core.str(obj)].join(""), "\x3e");
                      } else {
                        if (obj instanceof Date) {
                          var normalize = function(n, len) {
                            var ns = [cljs.core.str(n)].join("");
                            while (true) {
                              if (cljs.core.count.call(null, ns) < len) {
                                var G__17746 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                                ns = G__17746;
                                continue;
                              } else {
                                return ns;
                              }
                              break;
                            }
                          };
                          return cljs.core.write_all.call(null, writer, '#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize.call(null, obj.getUTCMonth() + 1, 2), "-", normalize.call(null, obj.getUTCDate(), 2), "T", normalize.call(null, obj.getUTCHours(), 2), ":", normalize.call(null, obj.getUTCMinutes(), 2), ":", normalize.call(null, obj.getUTCSeconds(), 2), ".", normalize.call(null, obj.getUTCMilliseconds(), 3), "-", '00:00"');
                        } else {
                          if (cljs.core.regexp_QMARK_.call(null, obj)) {
                            return cljs.core.write_all.call(null, writer, '#"', obj.source, '"');
                          } else {
                            if (function() {
                              var G__17745 = obj;
                              if (G__17745) {
                                var bit__16192__auto__ = G__17745.cljs$lang$protocol_mask$partition0$ & 2147483648;
                                if (bit__16192__auto__ || G__17745.cljs$core$IPrintWithWriter$) {
                                  return true;
                                } else {
                                  if (!G__17745.cljs$lang$protocol_mask$partition0$) {
                                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__17745);
                                  } else {
                                    return false;
                                  }
                                }
                              } else {
                                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__17745);
                              }
                            }()) {
                              return cljs.core._pr_writer.call(null, obj, writer, opts);
                            } else {
                              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                return cljs.core.write_all.call(null, writer, "#\x3c", [cljs.core.str(obj)].join(""), "\x3e");
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer.call(null, cljs.core.first.call(null, objs), writer, opts);
  var seq__17751 = cljs.core.seq.call(null, cljs.core.next.call(null, objs));
  var chunk__17752 = null;
  var count__17753 = 0;
  var i__17754 = 0;
  while (true) {
    if (i__17754 < count__17753) {
      var obj = cljs.core._nth.call(null, chunk__17752, i__17754);
      cljs.core._write.call(null, writer, " ");
      cljs.core.pr_writer.call(null, obj, writer, opts);
      var G__17755 = seq__17751;
      var G__17756 = chunk__17752;
      var G__17757 = count__17753;
      var G__17758 = i__17754 + 1;
      seq__17751 = G__17755;
      chunk__17752 = G__17756;
      count__17753 = G__17757;
      i__17754 = G__17758;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__17751);
      if (temp__4092__auto__) {
        var seq__17751__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__17751__$1)) {
          var c__16290__auto__ = cljs.core.chunk_first.call(null, seq__17751__$1);
          var G__17759 = cljs.core.chunk_rest.call(null, seq__17751__$1);
          var G__17760 = c__16290__auto__;
          var G__17761 = cljs.core.count.call(null, c__16290__auto__);
          var G__17762 = 0;
          seq__17751 = G__17759;
          chunk__17752 = G__17760;
          count__17753 = G__17761;
          i__17754 = G__17762;
          continue;
        } else {
          var obj = cljs.core.first.call(null, seq__17751__$1);
          cljs.core._write.call(null, writer, " ");
          cljs.core.pr_writer.call(null, obj, writer, opts);
          var G__17763 = cljs.core.next.call(null, seq__17751__$1);
          var G__17764 = null;
          var G__17765 = 0;
          var G__17766 = 0;
          seq__17751 = G__17763;
          chunk__17752 = G__17764;
          count__17753 = G__17765;
          i__17754 = G__17766;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer.call(null, objs, writer, opts);
  cljs.core._flush.call(null, writer);
  return sb;
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "";
  } else {
    return[cljs.core.str(cljs.core.pr_sb_with_opts.call(null, objs, opts))].join("");
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts.call(null, objs, opts);
    sb.append("\n");
    return[cljs.core.str(sb)].join("");
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print.call(null, cljs.core.pr_str_with_opts.call(null, objs, opts));
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print.call(null, "\n");
  if (cljs.core.truth_(cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857)))) {
    return cljs.core.flush.call(null);
  } else {
    return null;
  }
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr_str__delegate.call(this, objs);
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__17767) {
    var objs = cljs.core.seq(arglist__17767);
    return pr_str__delegate(objs);
  };
  pr_str.cljs$core$IFn$_invoke$arity$variadic = pr_str__delegate;
  return pr_str;
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var prn_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn_str__delegate.call(this, objs);
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__17768) {
    var objs = cljs.core.seq(arglist__17768);
    return prn_str__delegate(objs);
  };
  prn_str.cljs$core$IFn$_invoke$arity$variadic = prn_str__delegate;
  return prn_str;
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr__delegate.call(this, objs);
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__17769) {
    var objs = cljs.core.seq(arglist__17769);
    return pr__delegate(objs);
  };
  pr.cljs$core$IFn$_invoke$arity$variadic = pr__delegate;
  return pr;
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cljs_core_print__delegate.call(this, objs);
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__17770) {
    var objs = cljs.core.seq(arglist__17770);
    return cljs_core_print__delegate(objs);
  };
  cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print;
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var print_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return print_str__delegate.call(this, objs);
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__17771) {
    var objs = cljs.core.seq(arglist__17771);
    return print_str__delegate(objs);
  };
  print_str.cljs$core$IFn$_invoke$arity$variadic = print_str__delegate;
  return print_str;
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var println = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println__delegate.call(this, objs);
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__17772) {
    var objs = cljs.core.seq(arglist__17772);
    return println__delegate(objs);
  };
  println.cljs$core$IFn$_invoke$arity$variadic = println__delegate;
  return println;
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var println_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println_str__delegate.call(this, objs);
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__17773) {
    var objs = cljs.core.seq(arglist__17773);
    return println_str__delegate(objs);
  };
  println_str.cljs$core$IFn$_invoke$arity$variadic = println_str__delegate;
  return println_str;
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var prn = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn__delegate.call(this, objs);
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__17774) {
    var objs = cljs.core.seq(arglist__17774);
    return prn__delegate(objs);
  };
  prn.cljs$core$IFn$_invoke$arity$variadic = prn__delegate;
  return prn;
}();
cljs.core.print_map = function print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, function(e, w, opts__$1) {
    print_one.call(null, cljs.core.key.call(null, e), w, opts__$1);
    cljs.core._write.call(null, w, " ");
    return print_one.call(null, cljs.core.val.call(null, e), w, opts__$1);
  }, "{", ", ", "}", opts, cljs.core.seq.call(null, m));
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq.call(null, coll__$1));
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write.call(null, writer, "()");
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2153938944;
  this.cljs$lang$protocol_mask$partition1$ = 2;
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core/Atom");
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__17775 = cljs.core.seq.call(null, self__.watches);
  var chunk__17776 = null;
  var count__17777 = 0;
  var i__17778 = 0;
  while (true) {
    if (i__17778 < count__17777) {
      var vec__17779 = cljs.core._nth.call(null, chunk__17776, i__17778);
      var key = cljs.core.nth.call(null, vec__17779, 0, null);
      var f = cljs.core.nth.call(null, vec__17779, 1, null);
      f.call(null, key, this$__$1, oldval, newval);
      var G__17781 = seq__17775;
      var G__17782 = chunk__17776;
      var G__17783 = count__17777;
      var G__17784 = i__17778 + 1;
      seq__17775 = G__17781;
      chunk__17776 = G__17782;
      count__17777 = G__17783;
      i__17778 = G__17784;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__17775);
      if (temp__4092__auto__) {
        var seq__17775__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__17775__$1)) {
          var c__16290__auto__ = cljs.core.chunk_first.call(null, seq__17775__$1);
          var G__17785 = cljs.core.chunk_rest.call(null, seq__17775__$1);
          var G__17786 = c__16290__auto__;
          var G__17787 = cljs.core.count.call(null, c__16290__auto__);
          var G__17788 = 0;
          seq__17775 = G__17785;
          chunk__17776 = G__17786;
          count__17777 = G__17787;
          i__17778 = G__17788;
          continue;
        } else {
          var vec__17780 = cljs.core.first.call(null, seq__17775__$1);
          var key = cljs.core.nth.call(null, vec__17780, 0, null);
          var f = cljs.core.nth.call(null, vec__17780, 1, null);
          f.call(null, key, this$__$1, oldval, newval);
          var G__17789 = cljs.core.next.call(null, seq__17775__$1);
          var G__17790 = null;
          var G__17791 = 0;
          var G__17792 = 0;
          seq__17775 = G__17789;
          chunk__17776 = G__17790;
          count__17777 = G__17791;
          i__17778 = G__17792;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.assoc.call(null, self__.watches, key, f);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.__GT_Atom = function __GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__17796__delegate = function(x, p__17793) {
      var map__17795 = p__17793;
      var map__17795__$1 = cljs.core.seq_QMARK_.call(null, map__17795) ? cljs.core.apply.call(null, cljs.core.hash_map, map__17795) : map__17795;
      var validator = cljs.core.get.call(null, map__17795__$1, new cljs.core.Keyword(null, "validator", "validator", 4199087812));
      var meta = cljs.core.get.call(null, map__17795__$1, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
      return new cljs.core.Atom(x, meta, validator, null);
    };
    var G__17796 = function(x, var_args) {
      var p__17793 = null;
      if (arguments.length > 1) {
        p__17793 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__17796__delegate.call(this, x, p__17793);
    };
    G__17796.cljs$lang$maxFixedArity = 1;
    G__17796.cljs$lang$applyTo = function(arglist__17797) {
      var x = cljs.core.first(arglist__17797);
      var p__17793 = cljs.core.rest(arglist__17797);
      return G__17796__delegate(x, p__17793);
    };
    G__17796.cljs$core$IFn$_invoke$arity$variadic = G__17796__delegate;
    return G__17796;
  }();
  atom = function(x, var_args) {
    var p__17793 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  var validate_17798 = a.validator;
  if (validate_17798 == null) {
  } else {
    if (cljs.core.truth_(validate_17798.call(null, new_value))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1233162959, null), new cljs.core.Symbol(null, "new-value", "new-value", 972165309, null))))].join(""));
    }
  }
  var old_value_17799 = a.state;
  a.state = new_value;
  if (a.watches == null) {
  } else {
    cljs.core._notify_watches.call(null, a, old_value_17799, new_value);
  }
  return new_value;
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state));
  };
  var swap_BANG___3 = function(a, f, x) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x));
  };
  var swap_BANG___4 = function(a, f, x, y) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y));
  };
  var swap_BANG___5 = function(a, f, x, y, z) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y, z));
  };
  var swap_BANG___6 = function() {
    var G__17800__delegate = function(a, f, x, y, z, more) {
      return cljs.core.reset_BANG_.call(null, a, cljs.core.apply.call(null, f, a.state, x, y, z, more));
    };
    var G__17800 = function(a, f, x, y, z, var_args) {
      var more = null;
      if (arguments.length > 5) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__17800__delegate.call(this, a, f, x, y, z, more);
    };
    G__17800.cljs$lang$maxFixedArity = 5;
    G__17800.cljs$lang$applyTo = function(arglist__17801) {
      var a = cljs.core.first(arglist__17801);
      arglist__17801 = cljs.core.next(arglist__17801);
      var f = cljs.core.first(arglist__17801);
      arglist__17801 = cljs.core.next(arglist__17801);
      var x = cljs.core.first(arglist__17801);
      arglist__17801 = cljs.core.next(arglist__17801);
      var y = cljs.core.first(arglist__17801);
      arglist__17801 = cljs.core.next(arglist__17801);
      var z = cljs.core.first(arglist__17801);
      var more = cljs.core.rest(arglist__17801);
      return G__17800__delegate(a, f, x, y, z, more);
    };
    G__17800.cljs$core$IFn$_invoke$arity$variadic = G__17800__delegate;
    return G__17800;
  }();
  swap_BANG_ = function(a, f, x, y, z, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      case 5:
        return swap_BANG___5.call(this, a, f, x, y, z);
      default:
        return swap_BANG___6.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, z, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 5;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___6.cljs$lang$applyTo;
  swap_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$core$IFn$_invoke$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$core$IFn$_invoke$arity$5 = swap_BANG___5;
  swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_BANG___6.cljs$core$IFn$_invoke$arity$variadic;
  return swap_BANG_;
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.call(null, a.state, oldval)) {
    cljs.core.reset_BANG_.call(null, a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref.call(null, o);
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator;
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.call(null, f, iref.meta, args);
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args);
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__17802) {
    var iref = cljs.core.first(arglist__17802);
    arglist__17802 = cljs.core.next(arglist__17802);
    var f = cljs.core.first(arglist__17802);
    var args = cljs.core.rest(arglist__17802);
    return alter_meta_BANG___delegate(iref, f, args);
  };
  alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_;
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  return cljs.core._add_watch.call(null, iref, key, f);
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  return cljs.core._remove_watch.call(null, iref, key);
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.call(null, "G__");
  };
  var gensym__1 = function(prefix_string) {
    if (cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = cljs.core.atom.call(null, 0);
    } else {
    }
    return cljs.core.symbol.call(null, [cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.call(null, cljs.core.gensym_counter, cljs.core.inc))].join(""));
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$core$IFn$_invoke$arity$0 = gensym__0;
  gensym.cljs$core$IFn$_invoke$arity$1 = gensym__1;
  return gensym;
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(state, f) {
  this.state = state;
  this.f = f;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core/Delay");
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return(new cljs.core.Keyword(null, "done", "done", 1016993524)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, self__.state));
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return(new cljs.core.Keyword(null, "value", "value", 1125876963)).cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.call(null, self__.state, function(p__17803) {
    var map__17804 = p__17803;
    var map__17804__$1 = cljs.core.seq_QMARK_.call(null, map__17804) ? cljs.core.apply.call(null, cljs.core.hash_map, map__17804) : map__17804;
    var curr_state = map__17804__$1;
    var done = cljs.core.get.call(null, map__17804__$1, new cljs.core.Keyword(null, "done", "done", 1016993524));
    if (cljs.core.truth_(done)) {
      return curr_state;
    } else {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), true, new cljs.core.Keyword(null, "value", "value", 1125876963), self__.f.call(null)], null);
    }
  }));
};
cljs.core.__GT_Delay = function __GT_Delay(state, f) {
  return new cljs.core.Delay(state, f);
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function force(x) {
  if (cljs.core.delay_QMARK_.call(null, x)) {
    return cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_.call(null, d);
};
cljs.core.IEncodeJS = function() {
  var obj17806 = {};
  return obj17806;
}();
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if (function() {
    var and__15530__auto__ = x;
    if (and__15530__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__16169__auto__ = x == null ? null : x;
    return function() {
      var or__15542__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if (function() {
    var and__15530__auto__ = x;
    if (and__15530__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__16169__auto__ = x == null ? null : x;
    return function() {
      var or__15542__auto__ = cljs.core._key__GT_js[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function key__GT_js(k) {
  if (function() {
    var G__17808 = k;
    if (G__17808) {
      var bit__16192__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__15542__auto__ = bit__16192__auto__;
        if (cljs.core.truth_(or__15542__auto__)) {
          return or__15542__auto__;
        } else {
          return G__17808.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__17808.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__17808);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__17808);
    }
  }()) {
    return cljs.core._clj__GT_js.call(null, k);
  } else {
    if (typeof k === "string" || (typeof k === "number" || (k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol))) {
      return cljs.core.clj__GT_js.call(null, k);
    } else {
      return cljs.core.pr_str.call(null, k);
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__17822 = x;
      if (G__17822) {
        var bit__16192__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__15542__auto__ = bit__16192__auto__;
          if (cljs.core.truth_(or__15542__auto__)) {
            return or__15542__auto__;
          } else {
            return G__17822.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__17822.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__17822);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__17822);
      }
    }()) {
      return cljs.core._clj__GT_js.call(null, x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name.call(null, x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return[cljs.core.str(x)].join("");
        } else {
          if (cljs.core.map_QMARK_.call(null, x)) {
            var m = function() {
              var obj17824 = {};
              return obj17824;
            }();
            var seq__17825_17835 = cljs.core.seq.call(null, x);
            var chunk__17826_17836 = null;
            var count__17827_17837 = 0;
            var i__17828_17838 = 0;
            while (true) {
              if (i__17828_17838 < count__17827_17837) {
                var vec__17829_17839 = cljs.core._nth.call(null, chunk__17826_17836, i__17828_17838);
                var k_17840 = cljs.core.nth.call(null, vec__17829_17839, 0, null);
                var v_17841 = cljs.core.nth.call(null, vec__17829_17839, 1, null);
                m[cljs.core.key__GT_js.call(null, k_17840)] = clj__GT_js.call(null, v_17841);
                var G__17842 = seq__17825_17835;
                var G__17843 = chunk__17826_17836;
                var G__17844 = count__17827_17837;
                var G__17845 = i__17828_17838 + 1;
                seq__17825_17835 = G__17842;
                chunk__17826_17836 = G__17843;
                count__17827_17837 = G__17844;
                i__17828_17838 = G__17845;
                continue;
              } else {
                var temp__4092__auto___17846 = cljs.core.seq.call(null, seq__17825_17835);
                if (temp__4092__auto___17846) {
                  var seq__17825_17847__$1 = temp__4092__auto___17846;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__17825_17847__$1)) {
                    var c__16290__auto___17848 = cljs.core.chunk_first.call(null, seq__17825_17847__$1);
                    var G__17849 = cljs.core.chunk_rest.call(null, seq__17825_17847__$1);
                    var G__17850 = c__16290__auto___17848;
                    var G__17851 = cljs.core.count.call(null, c__16290__auto___17848);
                    var G__17852 = 0;
                    seq__17825_17835 = G__17849;
                    chunk__17826_17836 = G__17850;
                    count__17827_17837 = G__17851;
                    i__17828_17838 = G__17852;
                    continue;
                  } else {
                    var vec__17830_17853 = cljs.core.first.call(null, seq__17825_17847__$1);
                    var k_17854 = cljs.core.nth.call(null, vec__17830_17853, 0, null);
                    var v_17855 = cljs.core.nth.call(null, vec__17830_17853, 1, null);
                    m[cljs.core.key__GT_js.call(null, k_17854)] = clj__GT_js.call(null, v_17855);
                    var G__17856 = cljs.core.next.call(null, seq__17825_17847__$1);
                    var G__17857 = null;
                    var G__17858 = 0;
                    var G__17859 = 0;
                    seq__17825_17835 = G__17856;
                    chunk__17826_17836 = G__17857;
                    count__17827_17837 = G__17858;
                    i__17828_17838 = G__17859;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_.call(null, x)) {
              var arr = [];
              var seq__17831_17860 = cljs.core.seq.call(null, cljs.core.map.call(null, clj__GT_js, x));
              var chunk__17832_17861 = null;
              var count__17833_17862 = 0;
              var i__17834_17863 = 0;
              while (true) {
                if (i__17834_17863 < count__17833_17862) {
                  var x_17864__$1 = cljs.core._nth.call(null, chunk__17832_17861, i__17834_17863);
                  arr.push(x_17864__$1);
                  var G__17865 = seq__17831_17860;
                  var G__17866 = chunk__17832_17861;
                  var G__17867 = count__17833_17862;
                  var G__17868 = i__17834_17863 + 1;
                  seq__17831_17860 = G__17865;
                  chunk__17832_17861 = G__17866;
                  count__17833_17862 = G__17867;
                  i__17834_17863 = G__17868;
                  continue;
                } else {
                  var temp__4092__auto___17869 = cljs.core.seq.call(null, seq__17831_17860);
                  if (temp__4092__auto___17869) {
                    var seq__17831_17870__$1 = temp__4092__auto___17869;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__17831_17870__$1)) {
                      var c__16290__auto___17871 = cljs.core.chunk_first.call(null, seq__17831_17870__$1);
                      var G__17872 = cljs.core.chunk_rest.call(null, seq__17831_17870__$1);
                      var G__17873 = c__16290__auto___17871;
                      var G__17874 = cljs.core.count.call(null, c__16290__auto___17871);
                      var G__17875 = 0;
                      seq__17831_17860 = G__17872;
                      chunk__17832_17861 = G__17873;
                      count__17833_17862 = G__17874;
                      i__17834_17863 = G__17875;
                      continue;
                    } else {
                      var x_17876__$1 = cljs.core.first.call(null, seq__17831_17870__$1);
                      arr.push(x_17876__$1);
                      var G__17877 = cljs.core.next.call(null, seq__17831_17870__$1);
                      var G__17878 = null;
                      var G__17879 = 0;
                      var G__17880 = 0;
                      seq__17831_17860 = G__17877;
                      chunk__17832_17861 = G__17878;
                      count__17833_17862 = G__17879;
                      i__17834_17863 = G__17880;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return x;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj17882 = {};
  return obj17882;
}();
cljs.core._js__GT_clj = function _js__GT_clj(x, options) {
  if (function() {
    var and__15530__auto__ = x;
    if (and__15530__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__16169__auto__ = x == null ? null : x;
    return function() {
      var or__15542__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj = null;
  var js__GT_clj__1 = function(x) {
    return js__GT_clj.call(null, x, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), false], null));
  };
  var js__GT_clj__2 = function() {
    var G__17903__delegate = function(x, opts) {
      if (function() {
        var G__17893 = x;
        if (G__17893) {
          var bit__16192__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__15542__auto__ = bit__16192__auto__;
            if (cljs.core.truth_(or__15542__auto__)) {
              return or__15542__auto__;
            } else {
              return G__17893.cljs$core$IEncodeClojure$;
            }
          }())) {
            return true;
          } else {
            if (!G__17893.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__17893);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__17893);
        }
      }()) {
        return cljs.core._js__GT_clj.call(null, x, cljs.core.apply.call(null, cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq.call(null, opts)) {
          var map__17894 = opts;
          var map__17894__$1 = cljs.core.seq_QMARK_.call(null, map__17894) ? cljs.core.apply.call(null, cljs.core.hash_map, map__17894) : map__17894;
          var keywordize_keys = cljs.core.get.call(null, map__17894__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672));
          var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
          var f = function(map__17894, map__17894__$1, keywordize_keys, keyfn) {
            return function thisfn(x__$1) {
              if (cljs.core.seq_QMARK_.call(null, x__$1)) {
                return cljs.core.doall.call(null, cljs.core.map.call(null, thisfn, x__$1));
              } else {
                if (cljs.core.coll_QMARK_.call(null, x__$1)) {
                  return cljs.core.into.call(null, cljs.core.empty.call(null, x__$1), cljs.core.map.call(null, thisfn, x__$1));
                } else {
                  if (x__$1 instanceof Array) {
                    return cljs.core.vec.call(null, cljs.core.map.call(null, thisfn, x__$1));
                  } else {
                    if (cljs.core.type.call(null, x__$1) === Object) {
                      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
                        var iter__16259__auto__ = function(map__17894, map__17894__$1, keywordize_keys, keyfn) {
                          return function iter__17899(s__17900) {
                            return new cljs.core.LazySeq(null, function(map__17894, map__17894__$1, keywordize_keys, keyfn) {
                              return function() {
                                var s__17900__$1 = s__17900;
                                while (true) {
                                  var temp__4092__auto__ = cljs.core.seq.call(null, s__17900__$1);
                                  if (temp__4092__auto__) {
                                    var s__17900__$2 = temp__4092__auto__;
                                    if (cljs.core.chunked_seq_QMARK_.call(null, s__17900__$2)) {
                                      var c__16257__auto__ = cljs.core.chunk_first.call(null, s__17900__$2);
                                      var size__16258__auto__ = cljs.core.count.call(null, c__16257__auto__);
                                      var b__17902 = cljs.core.chunk_buffer.call(null, size__16258__auto__);
                                      if (function() {
                                        var i__17901 = 0;
                                        while (true) {
                                          if (i__17901 < size__16258__auto__) {
                                            var k = cljs.core._nth.call(null, c__16257__auto__, i__17901);
                                            cljs.core.chunk_append.call(null, b__17902, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null));
                                            var G__17904 = i__17901 + 1;
                                            i__17901 = G__17904;
                                            continue;
                                          } else {
                                            return true;
                                          }
                                          break;
                                        }
                                      }()) {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__17902), iter__17899.call(null, cljs.core.chunk_rest.call(null, s__17900__$2)));
                                      } else {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__17902), null);
                                      }
                                    } else {
                                      var k = cljs.core.first.call(null, s__17900__$2);
                                      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null), iter__17899.call(null, cljs.core.rest.call(null, s__17900__$2)));
                                    }
                                  } else {
                                    return null;
                                  }
                                  break;
                                }
                              };
                            }(map__17894, map__17894__$1, keywordize_keys, keyfn), null, null);
                          };
                        }(map__17894, map__17894__$1, keywordize_keys, keyfn);
                        return iter__16259__auto__.call(null, cljs.core.js_keys.call(null, x__$1));
                      }());
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        return x__$1;
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            };
          }(map__17894, map__17894__$1, keywordize_keys, keyfn);
          return f.call(null, x);
        } else {
          return null;
        }
      }
    };
    var G__17903 = function(x, var_args) {
      var opts = null;
      if (arguments.length > 1) {
        opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__17903__delegate.call(this, x, opts);
    };
    G__17903.cljs$lang$maxFixedArity = 1;
    G__17903.cljs$lang$applyTo = function(arglist__17905) {
      var x = cljs.core.first(arglist__17905);
      var opts = cljs.core.rest(arglist__17905);
      return G__17903__delegate(x, opts);
    };
    G__17903.cljs$core$IFn$_invoke$arity$variadic = G__17903__delegate;
    return G__17903;
  }();
  js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return js__GT_clj__1.call(this, x);
      default:
        return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
  js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
  js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return js__GT_clj;
}();
cljs.core.memoize = function memoize(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function() {
    var G__17906__delegate = function(args) {
      var temp__4090__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mem), args);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var v = temp__4090__auto__;
        return v;
      } else {
        var ret = cljs.core.apply.call(null, f, args);
        cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, args, ret);
        return ret;
      }
    };
    var G__17906 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__17906__delegate.call(this, args);
    };
    G__17906.cljs$lang$maxFixedArity = 0;
    G__17906.cljs$lang$applyTo = function(arglist__17907) {
      var args = cljs.core.seq(arglist__17907);
      return G__17906__delegate(args);
    };
    G__17906.cljs$core$IFn$_invoke$arity$variadic = G__17906__delegate;
    return G__17906;
  }();
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while (true) {
      var ret = f.call(null);
      if (cljs.core.fn_QMARK_.call(null, ret)) {
        var G__17908 = ret;
        f = G__17908;
        continue;
      } else {
        return ret;
      }
      break;
    }
  };
  var trampoline__2 = function() {
    var G__17909__delegate = function(f, args) {
      return trampoline.call(null, function() {
        return cljs.core.apply.call(null, f, args);
      });
    };
    var G__17909 = function(f, var_args) {
      var args = null;
      if (arguments.length > 1) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__17909__delegate.call(this, f, args);
    };
    G__17909.cljs$lang$maxFixedArity = 1;
    G__17909.cljs$lang$applyTo = function(arglist__17910) {
      var f = cljs.core.first(arglist__17910);
      var args = cljs.core.rest(arglist__17910);
      return G__17909__delegate(f, args);
    };
    G__17909.cljs$core$IFn$_invoke$arity$variadic = G__17909__delegate;
    return G__17909;
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        return trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$core$IFn$_invoke$arity$1 = trampoline__1;
  trampoline.cljs$core$IFn$_invoke$arity$variadic = trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return trampoline;
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.call(null, 1);
  };
  var rand__1 = function(n) {
    return Math.random.call(null) * n;
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return Math.floor.call(null, Math.random.call(null) * n);
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.call(null, coll, cljs.core.rand_int.call(null, cljs.core.count.call(null, coll)));
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.reduce.call(null, function(ret, x) {
    var k = f.call(null, x);
    return cljs.core.assoc.call(null, ret, k, cljs.core.conj.call(null, cljs.core.get.call(null, ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.PersistentArrayMap.EMPTY, coll);
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 768214664), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = cljs.core.atom.call(null, cljs.core.make_hierarchy.call(null));
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.call(null, cljs.core.swap_BANG_, cljs.core.get_global_hierarchy.call(null), f, args);
  };
  var swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return swap_global_hierarchy_BANG___delegate.call(this, f, args);
  };
  swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__17911) {
    var f = cljs.core.first(arglist__17911);
    var args = cljs.core.rest(arglist__17911);
    return swap_global_hierarchy_BANG___delegate(f, args);
  };
  swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_global_hierarchy_BANG___delegate;
  return swap_global_hierarchy_BANG_;
}();
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), child, parent);
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__15542__auto__ = cljs.core._EQ_.call(null, child, parent);
    if (or__15542__auto__) {
      return or__15542__auto__;
    } else {
      var or__15542__auto____$1 = cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if (or__15542__auto____$1) {
        return or__15542__auto____$1;
      } else {
        var and__15530__auto__ = cljs.core.vector_QMARK_.call(null, parent);
        if (and__15530__auto__) {
          var and__15530__auto____$1 = cljs.core.vector_QMARK_.call(null, child);
          if (and__15530__auto____$1) {
            var and__15530__auto____$2 = cljs.core.count.call(null, parent) === cljs.core.count.call(null, child);
            if (and__15530__auto____$2) {
              var ret = true;
              var i = 0;
              while (true) {
                if (!ret || i === cljs.core.count.call(null, parent)) {
                  return ret;
                } else {
                  var G__17912 = isa_QMARK_.call(null, h, child.call(null, i), parent.call(null, i));
                  var G__17913 = i + 1;
                  ret = G__17912;
                  i = G__17913;
                  continue;
                }
                break;
              }
            } else {
              return and__15530__auto____$2;
            }
          } else {
            return and__15530__auto____$1;
          }
        } else {
          return and__15530__auto__;
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = isa_QMARK___3;
  return isa_QMARK_;
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents;
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$core$IFn$_invoke$arity$1 = ancestors__1;
  ancestors.cljs$core$IFn$_invoke$arity$2 = ancestors__2;
  return ancestors;
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$core$IFn$_invoke$arity$1 = descendants__1;
  descendants.cljs$core$IFn$_invoke$arity$2 = descendants__2;
  return descendants;
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if (cljs.core.truth_(cljs.core.namespace.call(null, parent))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", -388313324, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null))))].join(""));
    }
    cljs.core.swap_global_hierarchy_BANG_.call(null, derive, tag, parent);
    return null;
  };
  var derive__3 = function(h, tag, parent) {
    if (cljs.core.not_EQ_.call(null, tag, parent)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", -1637144189, null), new cljs.core.Symbol(null, "tag", "tag", -1640416941, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null))))].join(""));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.call(null, function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.call(null, ret, k, cljs.core.reduce.call(null, cljs.core.conj, cljs.core.get.call(null, targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons.call(null, target, targets.call(null, target))));
          };
        }(tp, td, ta), m, cljs.core.cons.call(null, source, sources.call(null, source)));
      };
    }(tp, td, ta);
    var or__15542__auto__ = cljs.core.contains_QMARK_.call(null, tp.call(null, tag), parent) ? null : function() {
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, tag), parent)) {
        throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, parent), tag)) {
        throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.assoc.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.call(null, cljs.core.get.call(null, tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), tf.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), 
      tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 768214664), tf.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
    }();
    if (cljs.core.truth_(or__15542__auto__)) {
      return or__15542__auto__;
    } else {
      return h;
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$core$IFn$_invoke$arity$2 = derive__2;
  derive.cljs$core$IFn$_invoke$arity$3 = derive__3;
  return derive;
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.call(null, underive, tag, parent);
    return null;
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(parentMap.call(null, tag)) ? cljs.core.disj.call(null, parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty.call(null, childsParents)) ? cljs.core.assoc.call(null, parentMap, tag, childsParents) : cljs.core.dissoc.call(null, parentMap, tag);
    var deriv_seq = cljs.core.flatten.call(null, cljs.core.map.call(null, function(parentMap, childsParents, newParents) {
      return function(p1__17914_SHARP_) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, p1__17914_SHARP_), cljs.core.interpose.call(null, cljs.core.first.call(null, p1__17914_SHARP_), cljs.core.second.call(null, p1__17914_SHARP_)));
      };
    }(parentMap, childsParents, newParents), cljs.core.seq.call(null, newParents)));
    if (cljs.core.contains_QMARK_.call(null, parentMap.call(null, tag), parent)) {
      return cljs.core.reduce.call(null, function(p1__17915_SHARP_, p2__17916_SHARP_) {
        return cljs.core.apply.call(null, cljs.core.derive, p1__17915_SHARP_, p2__17916_SHARP_);
      }, cljs.core.make_hierarchy.call(null), cljs.core.partition.call(null, 2, deriv_seq));
    } else {
      return h;
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$core$IFn$_invoke$arity$2 = underive__2;
  underive.cljs$core$IFn$_invoke$arity$3 = underive__3;
  return underive;
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.call(null, method_cache, function(_) {
    return cljs.core.deref.call(null, method_table);
  });
  return cljs.core.swap_BANG_.call(null, cached_hierarchy, function(_) {
    return cljs.core.deref.call(null, hierarchy);
  });
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = cljs.core.deref.call(null, prefer_table).call(null, x);
  var or__15542__auto__ = cljs.core.truth_(function() {
    var and__15530__auto__ = xprefs;
    if (cljs.core.truth_(and__15530__auto__)) {
      return xprefs.call(null, y);
    } else {
      return and__15530__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__15542__auto__)) {
    return or__15542__auto__;
  } else {
    var or__15542__auto____$1 = function() {
      var ps = cljs.core.parents.call(null, y);
      while (true) {
        if (cljs.core.count.call(null, ps) > 0) {
          if (cljs.core.truth_(prefers_STAR_.call(null, x, cljs.core.first.call(null, ps), prefer_table))) {
          } else {
          }
          var G__17917 = cljs.core.rest.call(null, ps);
          ps = G__17917;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__15542__auto____$1)) {
      return or__15542__auto____$1;
    } else {
      var or__15542__auto____$2 = function() {
        var ps = cljs.core.parents.call(null, x);
        while (true) {
          if (cljs.core.count.call(null, ps) > 0) {
            if (cljs.core.truth_(prefers_STAR_.call(null, cljs.core.first.call(null, ps), y, prefer_table))) {
            } else {
            }
            var G__17918 = cljs.core.rest.call(null, ps);
            ps = G__17918;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__15542__auto____$2)) {
        return or__15542__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__15542__auto__ = cljs.core.prefers_STAR_.call(null, x, y, prefer_table);
  if (cljs.core.truth_(or__15542__auto__)) {
    return or__15542__auto__;
  } else {
    return cljs.core.isa_QMARK_.call(null, x, y);
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.call(null, function(be, p__17921) {
    var vec__17922 = p__17921;
    var k = cljs.core.nth.call(null, vec__17922, 0, null);
    var _ = cljs.core.nth.call(null, vec__17922, 1, null);
    var e = vec__17922;
    if (cljs.core.isa_QMARK_.call(null, cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__15542__auto__ = be == null;
        if (or__15542__auto__) {
          return or__15542__auto__;
        } else {
          return cljs.core.dominates.call(null, k, cljs.core.first.call(null, be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates.call(null, cljs.core.first.call(null, be2), k, prefer_table))) {
      } else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -\x3e "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first.call(null, be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2;
    } else {
      return be;
    }
  }, null, cljs.core.deref.call(null, method_table));
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.call(null, method_cache, cljs.core.assoc, dispatch_val, cljs.core.second.call(null, best_entry));
      return cljs.core.second.call(null, best_entry);
    } else {
      cljs.core.reset_cache.call(null, method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj17924 = {};
  return obj17924;
}();
cljs.core._reset = function _reset(mf) {
  if (function() {
    var and__15530__auto__ = mf;
    if (and__15530__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__16169__auto__ = mf == null ? null : mf;
    return function() {
      var or__15542__auto__ = cljs.core._reset[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._reset["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if (function() {
    var and__15530__auto__ = mf;
    if (and__15530__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__16169__auto__ = mf == null ? null : mf;
    return function() {
      var or__15542__auto__ = cljs.core._add_method[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._add_method["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if (function() {
    var and__15530__auto__ = mf;
    if (and__15530__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__16169__auto__ = mf == null ? null : mf;
    return function() {
      var or__15542__auto__ = cljs.core._remove_method[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._remove_method["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__15530__auto__ = mf;
    if (and__15530__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__16169__auto__ = mf == null ? null : mf;
    return function() {
      var or__15542__auto__ = cljs.core._prefer_method[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._prefer_method["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if (function() {
    var and__15530__auto__ = mf;
    if (and__15530__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__16169__auto__ = mf == null ? null : mf;
    return function() {
      var or__15542__auto__ = cljs.core._get_method[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._get_method["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function _methods(mf) {
  if (function() {
    var and__15530__auto__ = mf;
    if (and__15530__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__16169__auto__ = mf == null ? null : mf;
    return function() {
      var or__15542__auto__ = cljs.core._methods[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._methods["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function _prefers(mf) {
  if (function() {
    var and__15530__auto__ = mf;
    if (and__15530__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__16169__auto__ = mf == null ? null : mf;
    return function() {
      var or__15542__auto__ = cljs.core._prefers[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._prefers["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._dispatch = function _dispatch(mf, args) {
  if (function() {
    var and__15530__auto__ = mf;
    if (and__15530__auto__) {
      return mf.cljs$core$IMultiFn$_dispatch$arity$2;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_dispatch$arity$2(mf, args);
  } else {
    var x__16169__auto__ = mf == null ? null : mf;
    return function() {
      var or__15542__auto__ = cljs.core._dispatch[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core._dispatch["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-dispatch", mf);
        }
      }
    }().call(null, mf, args);
  }
};
cljs.core.do_dispatch = function do_dispatch(mf, name, dispatch_fn, args) {
  var dispatch_val = cljs.core.apply.call(null, dispatch_fn, args);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
  }
  return cljs.core.apply.call(null, target_fn, args);
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194304;
  this.cljs$lang$protocol_mask$partition1$ = 256;
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core/MultiFn");
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.method_cache, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.cached_hierarchy, function(mf__$2) {
    return null;
  });
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.call(null, self__.hierarchy))) {
  } else {
    cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4090__auto__ = cljs.core.deref.call(null, self__.method_cache).call(null, dispatch_val);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var target_fn = temp__4090__auto__;
    return target_fn;
  } else {
    var temp__4090__auto____$1 = cljs.core.find_and_cache_best_method.call(null, self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4090__auto____$1)) {
      var target_fn = temp__4090__auto____$1;
      return target_fn;
    } else {
      return cljs.core.deref.call(null, self__.method_table).call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_.call(null, dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  } else {
  }
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(old) {
    return cljs.core.assoc.call(null, old, dispatch_val_x, cljs.core.conj.call(null, cljs.core.get.call(null, old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
  });
  return cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.method_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.prefer_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_dispatch$arity$2 = function(mf, args) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.do_dispatch.call(null, mf__$1, self__.name, self__.dispatch_fn, args);
};
cljs.core.__GT_MultiFn = function __GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.MultiFn.prototype.call = function() {
  var G__17925__delegate = function(_, args) {
    var self = this;
    return cljs.core._dispatch.call(null, self, args);
  };
  var G__17925 = function(_, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return G__17925__delegate.call(this, _, args);
  };
  G__17925.cljs$lang$maxFixedArity = 1;
  G__17925.cljs$lang$applyTo = function(arglist__17926) {
    var _ = cljs.core.first(arglist__17926);
    var args = cljs.core.rest(arglist__17926);
    return G__17925__delegate(_, args);
  };
  G__17925.cljs$core$IFn$_invoke$arity$variadic = G__17925__delegate;
  return G__17925;
}();
cljs.core.MultiFn.prototype.apply = function(_, args) {
  var self = this;
  return cljs.core._dispatch.call(null, self, args);
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset.call(null, multifn);
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method.call(null, multifn, dispatch_val);
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method.call(null, multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods.call(null, multifn);
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method.call(null, multifn, dispatch_val);
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers.call(null, multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core/UUID");
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.string.hashCode(cljs.core.pr_str.call(null, this$__$1));
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""));
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.__GT_UUID = function __GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause;
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorStr = "cljs.core/ExceptionInfo";
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__16112__auto__, writer__16113__auto__, opts__16114__auto__) {
  return cljs.core._write.call(null, writer__16113__auto__, "cljs.core/ExceptionInfo");
};
cljs.core.__GT_ExceptionInfo = function __GT_ExceptionInfo(message, data, cause) {
  return new cljs.core.ExceptionInfo(message, data, cause);
};
cljs.core.ExceptionInfo.prototype = new Error;
cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, map) {
    return new cljs.core.ExceptionInfo(msg, map, null);
  };
  var ex_info__3 = function(msg, map, cause) {
    return new cljs.core.ExceptionInfo(msg, map, cause);
  };
  ex_info = function(msg, map, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, map);
      case 3:
        return ex_info__3.call(this, msg, map, cause);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$core$IFn$_invoke$arity$2 = ex_info__2;
  ex_info.cljs$core$IFn$_invoke$arity$3 = ex_info__3;
  return ex_info;
}();
cljs.core.ex_data = function ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(pred.call(null, x, y))) {
      return-1;
    } else {
      if (cljs.core.truth_(pred.call(null, y, x))) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return 0;
        } else {
          return null;
        }
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "deftype*", "deftype*", -978581244, null), null, new cljs.core.Symbol(null, "new", "new", -1640422567, null), null, new cljs.core.Symbol(null, "quote", "quote", -1532577739, null), null, new cljs.core.Symbol(null, "\x26", "\x26", -1640531489, null), null, new cljs.core.Symbol(null, "set!", "set!", -1637004872, null), null, new cljs.core.Symbol(null, 
  "recur", "recur", -1532142362, null), null, new cljs.core.Symbol(null, ".", ".", -1640531481, null), null, new cljs.core.Symbol(null, "ns", "ns", -1640528002, null), null, new cljs.core.Symbol(null, "do", "do", -1640528316, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -1640430053, null), null, new cljs.core.Symbol(null, "throw", "throw", -1530191713, null), null, new cljs.core.Symbol(null, "letfn*", "letfn*", 1548249632, null), null, new cljs.core.Symbol(null, "js*", "js*", -1640426054, 
  null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", 774272013, null), null, new cljs.core.Symbol(null, "let*", "let*", -1637213400, null), null, new cljs.core.Symbol(null, "loop*", "loop*", -1537374273, null), null, new cljs.core.Symbol(null, "try", "try", -1640416396, null), null, new cljs.core.Symbol(null, "if", "if", -1640528170, null), null, new cljs.core.Symbol(null, "def", "def", -1640432194, null), null], null), null), x);
};
goog.provide("goog.structs");
goog.require("goog.array");
goog.require("goog.object");
goog.structs.getCount = function(col) {
  if (typeof col.getCount == "function") {
    return col.getCount();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return col.length;
  }
  return goog.object.getCount(col);
};
goog.structs.getValues = function(col) {
  if (typeof col.getValues == "function") {
    return col.getValues();
  }
  if (goog.isString(col)) {
    return col.split("");
  }
  if (goog.isArrayLike(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(col[i]);
    }
    return rv;
  }
  return goog.object.getValues(col);
};
goog.structs.getKeys = function(col) {
  if (typeof col.getKeys == "function") {
    return col.getKeys();
  }
  if (typeof col.getValues == "function") {
    return undefined;
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(i);
    }
    return rv;
  }
  return goog.object.getKeys(col);
};
goog.structs.contains = function(col, val) {
  if (typeof col.contains == "function") {
    return col.contains(val);
  }
  if (typeof col.containsValue == "function") {
    return col.containsValue(val);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.contains((col), val);
  }
  return goog.object.containsValue(col, val);
};
goog.structs.isEmpty = function(col) {
  if (typeof col.isEmpty == "function") {
    return col.isEmpty();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.isEmpty((col));
  }
  return goog.object.isEmpty(col);
};
goog.structs.clear = function(col) {
  if (typeof col.clear == "function") {
    col.clear();
  } else {
    if (goog.isArrayLike(col)) {
      goog.array.clear((col));
    } else {
      goog.object.clear(col);
    }
  }
};
goog.structs.forEach = function(col, f, opt_obj) {
  if (typeof col.forEach == "function") {
    col.forEach(f, opt_obj);
  } else {
    if (goog.isArrayLike(col) || goog.isString(col)) {
      goog.array.forEach((col), f, opt_obj);
    } else {
      var keys = goog.structs.getKeys(col);
      var values = goog.structs.getValues(col);
      var l = values.length;
      for (var i = 0;i < l;i++) {
        f.call(opt_obj, values[i], keys && keys[i], col);
      }
    }
  }
};
goog.structs.filter = function(col, f, opt_obj) {
  if (typeof col.filter == "function") {
    return col.filter(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.filter((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], keys[i], col)) {
        rv[keys[i]] = values[i];
      }
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], undefined, col)) {
        rv.push(values[i]);
      }
    }
  }
  return rv;
};
goog.structs.map = function(col, f, opt_obj) {
  if (typeof col.map == "function") {
    return col.map(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.map((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      rv[keys[i]] = f.call(opt_obj, values[i], keys[i], col);
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      rv[i] = f.call(opt_obj, values[i], undefined, col);
    }
  }
  return rv;
};
goog.structs.some = function(col, f, opt_obj) {
  if (typeof col.some == "function") {
    return col.some(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.some((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (f.call(opt_obj, values[i], keys && keys[i], col)) {
      return true;
    }
  }
  return false;
};
goog.structs.every = function(col, f, opt_obj) {
  if (typeof col.every == "function") {
    return col.every(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.every((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (!f.call(opt_obj, values[i], keys && keys[i], col)) {
      return false;
    }
  }
  return true;
};
goog.provide("goog.iter");
goog.provide("goog.iter.Iterator");
goog.provide("goog.iter.StopIteration");
goog.require("goog.array");
goog.require("goog.asserts");
goog.iter.Iterable;
if ("StopIteration" in goog.global) {
  goog.iter.StopIteration = goog.global["StopIteration"];
} else {
  goog.iter.StopIteration = Error("StopIteration");
}
goog.iter.Iterator = function() {
};
goog.iter.Iterator.prototype.next = function() {
  throw goog.iter.StopIteration;
};
goog.iter.Iterator.prototype.__iterator__ = function(opt_keys) {
  return this;
};
goog.iter.toIterator = function(iterable) {
  if (iterable instanceof goog.iter.Iterator) {
    return iterable;
  }
  if (typeof iterable.__iterator__ == "function") {
    return iterable.__iterator__(false);
  }
  if (goog.isArrayLike(iterable)) {
    var i = 0;
    var newIter = new goog.iter.Iterator;
    newIter.next = function() {
      while (true) {
        if (i >= iterable.length) {
          throw goog.iter.StopIteration;
        }
        if (!(i in iterable)) {
          i++;
          continue;
        }
        return iterable[i++];
      }
    };
    return newIter;
  }
  throw Error("Not implemented");
};
goog.iter.forEach = function(iterable, f, opt_obj) {
  if (goog.isArrayLike(iterable)) {
    try {
      goog.array.forEach((iterable), f, opt_obj);
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  } else {
    iterable = goog.iter.toIterator(iterable);
    try {
      while (true) {
        f.call(opt_obj, iterable.next(), undefined, iterable);
      }
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  }
};
goog.iter.filter = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (f.call(opt_obj, val, undefined, iterator)) {
        return val;
      }
    }
  };
  return newIter;
};
goog.iter.range = function(startOrStop, opt_stop, opt_step) {
  var start = 0;
  var stop = startOrStop;
  var step = opt_step || 1;
  if (arguments.length > 1) {
    start = startOrStop;
    stop = opt_stop;
  }
  if (step == 0) {
    throw Error("Range step argument must not be zero");
  }
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if (step > 0 && start >= stop || step < 0 && start <= stop) {
      throw goog.iter.StopIteration;
    }
    var rv = start;
    start += step;
    return rv;
  };
  return newIter;
};
goog.iter.join = function(iterable, deliminator) {
  return goog.iter.toArray(iterable).join(deliminator);
};
goog.iter.map = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      return f.call(opt_obj, val, undefined, iterator);
    }
  };
  return newIter;
};
goog.iter.reduce = function(iterable, f, val, opt_obj) {
  var rval = val;
  goog.iter.forEach(iterable, function(val) {
    rval = f.call(opt_obj, rval, val);
  });
  return rval;
};
goog.iter.some = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return true;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return false;
};
goog.iter.every = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (!f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return false;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return true;
};
goog.iter.chain = function(var_args) {
  var args = arguments;
  var length = args.length;
  var i = 0;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    try {
      if (i >= length) {
        throw goog.iter.StopIteration;
      }
      var current = goog.iter.toIterator(args[i]);
      return current.next();
    } catch (ex) {
      if (ex !== goog.iter.StopIteration || i >= length) {
        throw ex;
      } else {
        i++;
        return this.next();
      }
    }
  };
  return newIter;
};
goog.iter.dropWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var dropping = true;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (dropping && f.call(opt_obj, val, undefined, iterator)) {
        continue;
      } else {
        dropping = false;
      }
      return val;
    }
  };
  return newIter;
};
goog.iter.takeWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var taking = true;
  newIter.next = function() {
    while (true) {
      if (taking) {
        var val = iterator.next();
        if (f.call(opt_obj, val, undefined, iterator)) {
          return val;
        } else {
          taking = false;
        }
      } else {
        throw goog.iter.StopIteration;
      }
    }
  };
  return newIter;
};
goog.iter.toArray = function(iterable) {
  if (goog.isArrayLike(iterable)) {
    return goog.array.toArray((iterable));
  }
  iterable = goog.iter.toIterator(iterable);
  var array = [];
  goog.iter.forEach(iterable, function(val) {
    array.push(val);
  });
  return array;
};
goog.iter.equals = function(iterable1, iterable2) {
  iterable1 = goog.iter.toIterator(iterable1);
  iterable2 = goog.iter.toIterator(iterable2);
  var b1, b2;
  try {
    while (true) {
      b1 = b2 = false;
      var val1 = iterable1.next();
      b1 = true;
      var val2 = iterable2.next();
      b2 = true;
      if (val1 != val2) {
        return false;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    } else {
      if (b1 && !b2) {
        return false;
      }
      if (!b2) {
        try {
          val2 = iterable2.next();
          return false;
        } catch (ex1) {
          if (ex1 !== goog.iter.StopIteration) {
            throw ex1;
          }
          return true;
        }
      }
    }
  }
  return false;
};
goog.iter.nextOrValue = function(iterable, defaultValue) {
  try {
    return goog.iter.toIterator(iterable).next();
  } catch (e) {
    if (e != goog.iter.StopIteration) {
      throw e;
    }
    return defaultValue;
  }
};
goog.iter.product = function(var_args) {
  var someArrayEmpty = goog.array.some(arguments, function(arr) {
    return!arr.length;
  });
  if (someArrayEmpty || !arguments.length) {
    return new goog.iter.Iterator;
  }
  var iter = new goog.iter.Iterator;
  var arrays = arguments;
  var indicies = goog.array.repeat(0, arrays.length);
  iter.next = function() {
    if (indicies) {
      var retVal = goog.array.map(indicies, function(valueIndex, arrayIndex) {
        return arrays[arrayIndex][valueIndex];
      });
      for (var i = indicies.length - 1;i >= 0;i--) {
        goog.asserts.assert(indicies);
        if (indicies[i] < arrays[i].length - 1) {
          indicies[i]++;
          break;
        }
        if (i == 0) {
          indicies = null;
          break;
        }
        indicies[i] = 0;
      }
      return retVal;
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.cycle = function(iterable) {
  var baseIterator = goog.iter.toIterator(iterable);
  var cache = [];
  var cacheIndex = 0;
  var iter = new goog.iter.Iterator;
  var useCache = false;
  iter.next = function() {
    var returnElement = null;
    if (!useCache) {
      try {
        returnElement = baseIterator.next();
        cache.push(returnElement);
        return returnElement;
      } catch (e) {
        if (e != goog.iter.StopIteration || goog.array.isEmpty(cache)) {
          throw e;
        }
        useCache = true;
      }
    }
    returnElement = cache[cacheIndex];
    cacheIndex = (cacheIndex + 1) % cache.length;
    return returnElement;
  };
  return iter;
};
goog.provide("goog.structs.Map");
goog.require("goog.iter.Iterator");
goog.require("goog.iter.StopIteration");
goog.require("goog.object");
goog.require("goog.structs");
goog.structs.Map = function(opt_map, var_args) {
  this.map_ = {};
  this.keys_ = [];
  var argLength = arguments.length;
  if (argLength > 1) {
    if (argLength % 2) {
      throw Error("Uneven number of arguments");
    }
    for (var i = 0;i < argLength;i += 2) {
      this.set(arguments[i], arguments[i + 1]);
    }
  } else {
    if (opt_map) {
      this.addAll((opt_map));
    }
  }
};
goog.structs.Map.prototype.count_ = 0;
goog.structs.Map.prototype.version_ = 0;
goog.structs.Map.prototype.getCount = function() {
  return this.count_;
};
goog.structs.Map.prototype.getValues = function() {
  this.cleanupKeysArray_();
  var rv = [];
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    rv.push(this.map_[key]);
  }
  return rv;
};
goog.structs.Map.prototype.getKeys = function() {
  this.cleanupKeysArray_();
  return(this.keys_.concat());
};
goog.structs.Map.prototype.containsKey = function(key) {
  return goog.structs.Map.hasKey_(this.map_, key);
};
goog.structs.Map.prototype.containsValue = function(val) {
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    if (goog.structs.Map.hasKey_(this.map_, key) && this.map_[key] == val) {
      return true;
    }
  }
  return false;
};
goog.structs.Map.prototype.equals = function(otherMap, opt_equalityFn) {
  if (this === otherMap) {
    return true;
  }
  if (this.count_ != otherMap.getCount()) {
    return false;
  }
  var equalityFn = opt_equalityFn || goog.structs.Map.defaultEquals;
  this.cleanupKeysArray_();
  for (var key, i = 0;key = this.keys_[i];i++) {
    if (!equalityFn(this.get(key), otherMap.get(key))) {
      return false;
    }
  }
  return true;
};
goog.structs.Map.defaultEquals = function(a, b) {
  return a === b;
};
goog.structs.Map.prototype.isEmpty = function() {
  return this.count_ == 0;
};
goog.structs.Map.prototype.clear = function() {
  this.map_ = {};
  this.keys_.length = 0;
  this.count_ = 0;
  this.version_ = 0;
};
goog.structs.Map.prototype.remove = function(key) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    delete this.map_[key];
    this.count_--;
    this.version_++;
    if (this.keys_.length > 2 * this.count_) {
      this.cleanupKeysArray_();
    }
    return true;
  }
  return false;
};
goog.structs.Map.prototype.cleanupKeysArray_ = function() {
  if (this.count_ != this.keys_.length) {
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (goog.structs.Map.hasKey_(this.map_, key)) {
        this.keys_[destIndex++] = key;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
  if (this.count_ != this.keys_.length) {
    var seen = {};
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (!goog.structs.Map.hasKey_(seen, key)) {
        this.keys_[destIndex++] = key;
        seen[key] = 1;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
};
goog.structs.Map.prototype.get = function(key, opt_val) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    return this.map_[key];
  }
  return opt_val;
};
goog.structs.Map.prototype.set = function(key, value) {
  if (!goog.structs.Map.hasKey_(this.map_, key)) {
    this.count_++;
    this.keys_.push(key);
    this.version_++;
  }
  this.map_[key] = value;
};
goog.structs.Map.prototype.addAll = function(map) {
  var keys, values;
  if (map instanceof goog.structs.Map) {
    keys = map.getKeys();
    values = map.getValues();
  } else {
    keys = goog.object.getKeys(map);
    values = goog.object.getValues(map);
  }
  for (var i = 0;i < keys.length;i++) {
    this.set(keys[i], values[i]);
  }
};
goog.structs.Map.prototype.clone = function() {
  return new goog.structs.Map(this);
};
goog.structs.Map.prototype.transpose = function() {
  var transposed = new goog.structs.Map;
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    var value = this.map_[key];
    transposed.set(value, key);
  }
  return transposed;
};
goog.structs.Map.prototype.toObject = function() {
  this.cleanupKeysArray_();
  var obj = {};
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    obj[key] = this.map_[key];
  }
  return obj;
};
goog.structs.Map.prototype.getKeyIterator = function() {
  return this.__iterator__(true);
};
goog.structs.Map.prototype.getValueIterator = function() {
  return this.__iterator__(false);
};
goog.structs.Map.prototype.__iterator__ = function(opt_keys) {
  this.cleanupKeysArray_();
  var i = 0;
  var keys = this.keys_;
  var map = this.map_;
  var version = this.version_;
  var selfObj = this;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      if (version != selfObj.version_) {
        throw Error("The map has changed since the iterator was created");
      }
      if (i >= keys.length) {
        throw goog.iter.StopIteration;
      }
      var key = keys[i++];
      return opt_keys ? key : map[key];
    }
  };
  return newIter;
};
goog.structs.Map.hasKey_ = function(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
};
goog.provide("goog.userAgent");
goog.require("goog.string");
goog.userAgent.ASSUME_IE = false;
goog.userAgent.ASSUME_GECKO = false;
goog.userAgent.ASSUME_WEBKIT = false;
goog.userAgent.ASSUME_MOBILE_WEBKIT = false;
goog.userAgent.ASSUME_OPERA = false;
goog.userAgent.ASSUME_ANY_VERSION = false;
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || (goog.userAgent.ASSUME_GECKO || (goog.userAgent.ASSUME_MOBILE_WEBKIT || (goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA)));
goog.userAgent.getUserAgentString = function() {
  return goog.global["navigator"] ? goog.global["navigator"].userAgent : null;
};
goog.userAgent.getNavigator = function() {
  return goog.global["navigator"];
};
goog.userAgent.init_ = function() {
  goog.userAgent.detectedOpera_ = false;
  goog.userAgent.detectedIe_ = false;
  goog.userAgent.detectedWebkit_ = false;
  goog.userAgent.detectedMobile_ = false;
  goog.userAgent.detectedGecko_ = false;
  var ua;
  if (!goog.userAgent.BROWSER_KNOWN_ && (ua = goog.userAgent.getUserAgentString())) {
    var navigator = goog.userAgent.getNavigator();
    goog.userAgent.detectedOpera_ = ua.indexOf("Opera") == 0;
    goog.userAgent.detectedIe_ = !goog.userAgent.detectedOpera_ && ua.indexOf("MSIE") != -1;
    goog.userAgent.detectedWebkit_ = !goog.userAgent.detectedOpera_ && ua.indexOf("WebKit") != -1;
    goog.userAgent.detectedMobile_ = goog.userAgent.detectedWebkit_ && ua.indexOf("Mobile") != -1;
    goog.userAgent.detectedGecko_ = !goog.userAgent.detectedOpera_ && (!goog.userAgent.detectedWebkit_ && navigator.product == "Gecko");
  }
};
if (!goog.userAgent.BROWSER_KNOWN_) {
  goog.userAgent.init_();
}
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.userAgent.detectedOpera_;
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.userAgent.detectedIe_;
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.userAgent.detectedGecko_;
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.userAgent.detectedWebkit_;
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.detectedMobile_;
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return navigator && navigator.platform || "";
};
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.userAgent.ASSUME_MAC = false;
goog.userAgent.ASSUME_WINDOWS = false;
goog.userAgent.ASSUME_LINUX = false;
goog.userAgent.ASSUME_X11 = false;
goog.userAgent.ASSUME_ANDROID = false;
goog.userAgent.ASSUME_IPHONE = false;
goog.userAgent.ASSUME_IPAD = false;
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || (goog.userAgent.ASSUME_WINDOWS || (goog.userAgent.ASSUME_LINUX || (goog.userAgent.ASSUME_X11 || (goog.userAgent.ASSUME_ANDROID || (goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD)))));
goog.userAgent.initPlatform_ = function() {
  goog.userAgent.detectedMac_ = goog.string.contains(goog.userAgent.PLATFORM, "Mac");
  goog.userAgent.detectedWindows_ = goog.string.contains(goog.userAgent.PLATFORM, "Win");
  goog.userAgent.detectedLinux_ = goog.string.contains(goog.userAgent.PLATFORM, "Linux");
  goog.userAgent.detectedX11_ = !!goog.userAgent.getNavigator() && goog.string.contains(goog.userAgent.getNavigator()["appVersion"] || "", "X11");
  var ua = goog.userAgent.getUserAgentString();
  goog.userAgent.detectedAndroid_ = !!ua && ua.indexOf("Android") >= 0;
  goog.userAgent.detectedIPhone_ = !!ua && ua.indexOf("iPhone") >= 0;
  goog.userAgent.detectedIPad_ = !!ua && ua.indexOf("iPad") >= 0;
};
if (!goog.userAgent.PLATFORM_KNOWN_) {
  goog.userAgent.initPlatform_();
}
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.userAgent.detectedMac_;
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.userAgent.detectedWindows_;
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.detectedLinux_;
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.detectedX11_;
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.userAgent.detectedAndroid_;
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.userAgent.detectedIPhone_;
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.userAgent.detectedIPad_;
goog.userAgent.determineVersion_ = function() {
  var version = "", re;
  if (goog.userAgent.OPERA && goog.global["opera"]) {
    var operaVersion = goog.global["opera"].version;
    version = typeof operaVersion == "function" ? operaVersion() : operaVersion;
  } else {
    if (goog.userAgent.GECKO) {
      re = /rv\:([^\);]+)(\)|;)/;
    } else {
      if (goog.userAgent.IE) {
        re = /MSIE\s+([^\);]+)(\)|;)/;
      } else {
        if (goog.userAgent.WEBKIT) {
          re = /WebKit\/(\S+)/;
        }
      }
    }
    if (re) {
      var arr = re.exec(goog.userAgent.getUserAgentString());
      version = arr ? arr[1] : "";
    }
  }
  if (goog.userAgent.IE) {
    var docMode = goog.userAgent.getDocumentMode_();
    if (docMode > parseFloat(version)) {
      return String(docMode);
    }
  }
  return version;
};
goog.userAgent.getDocumentMode_ = function() {
  var doc = goog.global["document"];
  return doc ? doc["documentMode"] : undefined;
};
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function(v1, v2) {
  return goog.string.compareVersions(v1, v2);
};
goog.userAgent.isVersionCache_ = {};
goog.userAgent.isVersion = function(version) {
  return goog.userAgent.ASSUME_ANY_VERSION || (goog.userAgent.isVersionCache_[version] || (goog.userAgent.isVersionCache_[version] = goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0));
};
goog.userAgent.isDocumentMode = function(documentMode) {
  return goog.userAgent.IE && goog.userAgent.DOCUMENT_MODE >= documentMode;
};
goog.userAgent.DOCUMENT_MODE = function() {
  var doc = goog.global["document"];
  if (!doc || !goog.userAgent.IE) {
    return undefined;
  }
  var mode = goog.userAgent.getDocumentMode_();
  return mode || (doc["compatMode"] == "CSS1Compat" ? parseInt(goog.userAgent.VERSION, 10) : 5);
}();
goog.provide("goog.uri.utils");
goog.provide("goog.uri.utils.ComponentIndex");
goog.provide("goog.uri.utils.QueryArray");
goog.provide("goog.uri.utils.QueryValue");
goog.provide("goog.uri.utils.StandardQueryParam");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.uri.utils.CharCode_ = {AMPERSAND:38, EQUAL:61, HASH:35, QUESTION:63};
goog.uri.utils.buildFromEncodedParts = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
  var out = "";
  if (opt_scheme) {
    out += opt_scheme + ":";
  }
  if (opt_domain) {
    out += "//";
    if (opt_userInfo) {
      out += opt_userInfo + "@";
    }
    out += opt_domain;
    if (opt_port) {
      out += ":" + opt_port;
    }
  }
  if (opt_path) {
    out += opt_path;
  }
  if (opt_queryData) {
    out += "?" + opt_queryData;
  }
  if (opt_fragment) {
    out += "#" + opt_fragment;
  }
  return out;
};
goog.uri.utils.splitRe_ = new RegExp("^" + "(?:" + "([^:/?#.]+)" + ":)?" + "(?://" + "(?:([^/?#]*)@)?" + "([^/#?]*?)" + "(?::([0-9]+))?" + "(?\x3d[/#?]|$)" + ")?" + "([^?#]+)?" + "(?:\\?([^#]*))?" + "(?:#(.*))?" + "$");
goog.uri.utils.ComponentIndex = {SCHEME:1, USER_INFO:2, DOMAIN:3, PORT:4, PATH:5, QUERY_DATA:6, FRAGMENT:7};
goog.uri.utils.split = function(uri) {
  return(uri.match(goog.uri.utils.splitRe_));
};
goog.uri.utils.decodeIfPossible_ = function(uri) {
  return uri && decodeURIComponent(uri);
};
goog.uri.utils.getComponentByIndex_ = function(componentIndex, uri) {
  return goog.uri.utils.split(uri)[componentIndex] || null;
};
goog.uri.utils.getScheme = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.SCHEME, uri);
};
goog.uri.utils.getEffectiveScheme = function(uri) {
  var scheme = goog.uri.utils.getScheme(uri);
  if (!scheme && self.location) {
    var protocol = self.location.protocol;
    scheme = protocol.substr(0, protocol.length - 1);
  }
  return scheme ? scheme.toLowerCase() : "";
};
goog.uri.utils.getUserInfoEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.USER_INFO, uri);
};
goog.uri.utils.getUserInfo = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getUserInfoEncoded(uri));
};
goog.uri.utils.getDomainEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.DOMAIN, uri);
};
goog.uri.utils.getDomain = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getDomainEncoded(uri));
};
goog.uri.utils.getPort = function(uri) {
  return Number(goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PORT, uri)) || null;
};
goog.uri.utils.getPathEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PATH, uri);
};
goog.uri.utils.getPath = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getPathEncoded(uri));
};
goog.uri.utils.getQueryData = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.QUERY_DATA, uri);
};
goog.uri.utils.getFragmentEncoded = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? null : uri.substr(hashIndex + 1);
};
goog.uri.utils.setFragmentEncoded = function(uri, fragment) {
  return goog.uri.utils.removeFragment(uri) + (fragment ? "#" + fragment : "");
};
goog.uri.utils.getFragment = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getFragmentEncoded(uri));
};
goog.uri.utils.getHost = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(pieces[goog.uri.utils.ComponentIndex.SCHEME], pieces[goog.uri.utils.ComponentIndex.USER_INFO], pieces[goog.uri.utils.ComponentIndex.DOMAIN], pieces[goog.uri.utils.ComponentIndex.PORT]);
};
goog.uri.utils.getPathAndAfter = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(null, null, null, null, pieces[goog.uri.utils.ComponentIndex.PATH], pieces[goog.uri.utils.ComponentIndex.QUERY_DATA], pieces[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.removeFragment = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? uri : uri.substr(0, hashIndex);
};
goog.uri.utils.haveSameDomain = function(uri1, uri2) {
  var pieces1 = goog.uri.utils.split(uri1);
  var pieces2 = goog.uri.utils.split(uri2);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && (pieces1[goog.uri.utils.ComponentIndex.SCHEME] == pieces2[goog.uri.utils.ComponentIndex.SCHEME] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT]);
};
goog.uri.utils.assertNoFragmentsOrQueries_ = function(uri) {
  if (goog.DEBUG && (uri.indexOf("#") >= 0 || uri.indexOf("?") >= 0)) {
    throw Error("goog.uri.utils: Fragment or query identifiers are not " + "supported: [" + uri + "]");
  }
};
goog.uri.utils.QueryValue;
goog.uri.utils.QueryArray;
goog.uri.utils.appendQueryData_ = function(buffer) {
  if (buffer[1]) {
    var baseUri = (buffer[0]);
    var hashIndex = baseUri.indexOf("#");
    if (hashIndex >= 0) {
      buffer.push(baseUri.substr(hashIndex));
      buffer[0] = baseUri = baseUri.substr(0, hashIndex);
    }
    var questionIndex = baseUri.indexOf("?");
    if (questionIndex < 0) {
      buffer[1] = "?";
    } else {
      if (questionIndex == baseUri.length - 1) {
        buffer[1] = undefined;
      }
    }
  }
  return buffer.join("");
};
goog.uri.utils.appendKeyValuePairs_ = function(key, value, pairs) {
  if (goog.isArray(value)) {
    goog.asserts.assertArray(value);
    for (var j = 0;j < value.length;j++) {
      goog.uri.utils.appendKeyValuePairs_(key, String(value[j]), pairs);
    }
  } else {
    if (value != null) {
      pairs.push("\x26", key, value === "" ? "" : "\x3d", goog.string.urlEncode(value));
    }
  }
};
goog.uri.utils.buildQueryDataBuffer_ = function(buffer, keysAndValues, opt_startIndex) {
  goog.asserts.assert(Math.max(keysAndValues.length - (opt_startIndex || 0), 0) % 2 == 0, "goog.uri.utils: Key/value lists must be even in length.");
  for (var i = opt_startIndex || 0;i < keysAndValues.length;i += 2) {
    goog.uri.utils.appendKeyValuePairs_(keysAndValues[i], keysAndValues[i + 1], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryData = function(keysAndValues, opt_startIndex) {
  var buffer = goog.uri.utils.buildQueryDataBuffer_([], keysAndValues, opt_startIndex);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.buildQueryDataBufferFromMap_ = function(buffer, map) {
  for (var key in map) {
    goog.uri.utils.appendKeyValuePairs_(key, map[key], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryDataFromMap = function(map) {
  var buffer = goog.uri.utils.buildQueryDataBufferFromMap_([], map);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.appendParams = function(uri, var_args) {
  return goog.uri.utils.appendQueryData_(arguments.length == 2 ? goog.uri.utils.buildQueryDataBuffer_([uri], arguments[1], 0) : goog.uri.utils.buildQueryDataBuffer_([uri], arguments, 1));
};
goog.uri.utils.appendParamsFromMap = function(uri, map) {
  return goog.uri.utils.appendQueryData_(goog.uri.utils.buildQueryDataBufferFromMap_([uri], map));
};
goog.uri.utils.appendParam = function(uri, key, value) {
  return goog.uri.utils.appendQueryData_([uri, "\x26", key, "\x3d", goog.string.urlEncode(value)]);
};
goog.uri.utils.findParam_ = function(uri, startIndex, keyEncoded, hashOrEndIndex) {
  var index = startIndex;
  var keyLength = keyEncoded.length;
  while ((index = uri.indexOf(keyEncoded, index)) >= 0 && index < hashOrEndIndex) {
    var precedingChar = uri.charCodeAt(index - 1);
    if (precedingChar == goog.uri.utils.CharCode_.AMPERSAND || precedingChar == goog.uri.utils.CharCode_.QUESTION) {
      var followingChar = uri.charCodeAt(index + keyLength);
      if (!followingChar || (followingChar == goog.uri.utils.CharCode_.EQUAL || (followingChar == goog.uri.utils.CharCode_.AMPERSAND || followingChar == goog.uri.utils.CharCode_.HASH))) {
        return index;
      }
    }
    index += keyLength + 1;
  }
  return-1;
};
goog.uri.utils.hashOrEndRe_ = /#|$/;
goog.uri.utils.hasParam = function(uri, keyEncoded) {
  return goog.uri.utils.findParam_(uri, 0, keyEncoded, uri.search(goog.uri.utils.hashOrEndRe_)) >= 0;
};
goog.uri.utils.getParamValue = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var foundIndex = goog.uri.utils.findParam_(uri, 0, keyEncoded, hashOrEndIndex);
  if (foundIndex < 0) {
    return null;
  } else {
    var endPosition = uri.indexOf("\x26", foundIndex);
    if (endPosition < 0 || endPosition > hashOrEndIndex) {
      endPosition = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    return goog.string.urlDecode(uri.substr(foundIndex, endPosition - foundIndex));
  }
};
goog.uri.utils.getParamValues = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var result = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    position = uri.indexOf("\x26", foundIndex);
    if (position < 0 || position > hashOrEndIndex) {
      position = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    result.push(goog.string.urlDecode(uri.substr(foundIndex, position - foundIndex)));
  }
  return result;
};
goog.uri.utils.trailingQueryPunctuationRe_ = /[?&]($|#)/;
goog.uri.utils.removeParam = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var buffer = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    buffer.push(uri.substring(position, foundIndex));
    position = Math.min(uri.indexOf("\x26", foundIndex) + 1 || hashOrEndIndex, hashOrEndIndex);
  }
  buffer.push(uri.substr(position));
  return buffer.join("").replace(goog.uri.utils.trailingQueryPunctuationRe_, "$1");
};
goog.uri.utils.setParam = function(uri, keyEncoded, value) {
  return goog.uri.utils.appendParam(goog.uri.utils.removeParam(uri, keyEncoded), keyEncoded, value);
};
goog.uri.utils.appendPath = function(baseUri, path) {
  goog.uri.utils.assertNoFragmentsOrQueries_(baseUri);
  if (goog.string.endsWith(baseUri, "/")) {
    baseUri = baseUri.substr(0, baseUri.length - 1);
  }
  if (goog.string.startsWith(path, "/")) {
    path = path.substr(1);
  }
  return goog.string.buildString(baseUri, "/", path);
};
goog.uri.utils.StandardQueryParam = {RANDOM:"zx"};
goog.uri.utils.makeUnique = function(uri) {
  return goog.uri.utils.setParam(uri, goog.uri.utils.StandardQueryParam.RANDOM, goog.string.getRandomString());
};
goog.provide("goog.Uri");
goog.provide("goog.Uri.QueryData");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.uri.utils.ComponentIndex");
goog.Uri = function(opt_uri, opt_ignoreCase) {
  var m;
  if (opt_uri instanceof goog.Uri) {
    this.ignoreCase_ = goog.isDef(opt_ignoreCase) ? opt_ignoreCase : opt_uri.getIgnoreCase();
    this.setScheme(opt_uri.getScheme());
    this.setUserInfo(opt_uri.getUserInfo());
    this.setDomain(opt_uri.getDomain());
    this.setPort(opt_uri.getPort());
    this.setPath(opt_uri.getPath());
    this.setQueryData(opt_uri.getQueryData().clone());
    this.setFragment(opt_uri.getFragment());
  } else {
    if (opt_uri && (m = goog.uri.utils.split(String(opt_uri)))) {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.setScheme(m[goog.uri.utils.ComponentIndex.SCHEME] || "", true);
      this.setUserInfo(m[goog.uri.utils.ComponentIndex.USER_INFO] || "", true);
      this.setDomain(m[goog.uri.utils.ComponentIndex.DOMAIN] || "", true);
      this.setPort(m[goog.uri.utils.ComponentIndex.PORT]);
      this.setPath(m[goog.uri.utils.ComponentIndex.PATH] || "", true);
      this.setQueryData(m[goog.uri.utils.ComponentIndex.QUERY_DATA] || "", true);
      this.setFragment(m[goog.uri.utils.ComponentIndex.FRAGMENT] || "", true);
    } else {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.queryData_ = new goog.Uri.QueryData(null, null, this.ignoreCase_);
    }
  }
};
goog.Uri.preserveParameterTypesCompatibilityFlag = false;
goog.Uri.RANDOM_PARAM = goog.uri.utils.StandardQueryParam.RANDOM;
goog.Uri.prototype.scheme_ = "";
goog.Uri.prototype.userInfo_ = "";
goog.Uri.prototype.domain_ = "";
goog.Uri.prototype.port_ = null;
goog.Uri.prototype.path_ = "";
goog.Uri.prototype.queryData_;
goog.Uri.prototype.fragment_ = "";
goog.Uri.prototype.isReadOnly_ = false;
goog.Uri.prototype.ignoreCase_ = false;
goog.Uri.prototype.toString = function() {
  var out = [];
  var scheme = this.getScheme();
  if (scheme) {
    out.push(goog.Uri.encodeSpecialChars_(scheme, goog.Uri.reDisallowedInSchemeOrUserInfo_), ":");
  }
  var domain = this.getDomain();
  if (domain) {
    out.push("//");
    var userInfo = this.getUserInfo();
    if (userInfo) {
      out.push(goog.Uri.encodeSpecialChars_(userInfo, goog.Uri.reDisallowedInSchemeOrUserInfo_), "@");
    }
    out.push(goog.string.urlEncode(domain));
    var port = this.getPort();
    if (port != null) {
      out.push(":", String(port));
    }
  }
  var path = this.getPath();
  if (path) {
    if (this.hasDomain() && path.charAt(0) != "/") {
      out.push("/");
    }
    out.push(goog.Uri.encodeSpecialChars_(path, path.charAt(0) == "/" ? goog.Uri.reDisallowedInAbsolutePath_ : goog.Uri.reDisallowedInRelativePath_));
  }
  var query = this.getEncodedQuery();
  if (query) {
    out.push("?", query);
  }
  var fragment = this.getFragment();
  if (fragment) {
    out.push("#", goog.Uri.encodeSpecialChars_(fragment, goog.Uri.reDisallowedInFragment_));
  }
  return out.join("");
};
goog.Uri.prototype.resolve = function(relativeUri) {
  var absoluteUri = this.clone();
  var overridden = relativeUri.hasScheme();
  if (overridden) {
    absoluteUri.setScheme(relativeUri.getScheme());
  } else {
    overridden = relativeUri.hasUserInfo();
  }
  if (overridden) {
    absoluteUri.setUserInfo(relativeUri.getUserInfo());
  } else {
    overridden = relativeUri.hasDomain();
  }
  if (overridden) {
    absoluteUri.setDomain(relativeUri.getDomain());
  } else {
    overridden = relativeUri.hasPort();
  }
  var path = relativeUri.getPath();
  if (overridden) {
    absoluteUri.setPort(relativeUri.getPort());
  } else {
    overridden = relativeUri.hasPath();
    if (overridden) {
      if (path.charAt(0) != "/") {
        if (this.hasDomain() && !this.hasPath()) {
          path = "/" + path;
        } else {
          var lastSlashIndex = absoluteUri.getPath().lastIndexOf("/");
          if (lastSlashIndex != -1) {
            path = absoluteUri.getPath().substr(0, lastSlashIndex + 1) + path;
          }
        }
      }
      path = goog.Uri.removeDotSegments(path);
    }
  }
  if (overridden) {
    absoluteUri.setPath(path);
  } else {
    overridden = relativeUri.hasQuery();
  }
  if (overridden) {
    absoluteUri.setQueryData(relativeUri.getDecodedQuery());
  } else {
    overridden = relativeUri.hasFragment();
  }
  if (overridden) {
    absoluteUri.setFragment(relativeUri.getFragment());
  }
  return absoluteUri;
};
goog.Uri.prototype.clone = function() {
  return new goog.Uri(this);
};
goog.Uri.prototype.getScheme = function() {
  return this.scheme_;
};
goog.Uri.prototype.setScheme = function(newScheme, opt_decode) {
  this.enforceReadOnly();
  this.scheme_ = opt_decode ? goog.Uri.decodeOrEmpty_(newScheme) : newScheme;
  if (this.scheme_) {
    this.scheme_ = this.scheme_.replace(/:$/, "");
  }
  return this;
};
goog.Uri.prototype.hasScheme = function() {
  return!!this.scheme_;
};
goog.Uri.prototype.getUserInfo = function() {
  return this.userInfo_;
};
goog.Uri.prototype.setUserInfo = function(newUserInfo, opt_decode) {
  this.enforceReadOnly();
  this.userInfo_ = opt_decode ? goog.Uri.decodeOrEmpty_(newUserInfo) : newUserInfo;
  return this;
};
goog.Uri.prototype.hasUserInfo = function() {
  return!!this.userInfo_;
};
goog.Uri.prototype.getDomain = function() {
  return this.domain_;
};
goog.Uri.prototype.setDomain = function(newDomain, opt_decode) {
  this.enforceReadOnly();
  this.domain_ = opt_decode ? goog.Uri.decodeOrEmpty_(newDomain) : newDomain;
  return this;
};
goog.Uri.prototype.hasDomain = function() {
  return!!this.domain_;
};
goog.Uri.prototype.getPort = function() {
  return this.port_;
};
goog.Uri.prototype.setPort = function(newPort) {
  this.enforceReadOnly();
  if (newPort) {
    newPort = Number(newPort);
    if (isNaN(newPort) || newPort < 0) {
      throw Error("Bad port number " + newPort);
    }
    this.port_ = newPort;
  } else {
    this.port_ = null;
  }
  return this;
};
goog.Uri.prototype.hasPort = function() {
  return this.port_ != null;
};
goog.Uri.prototype.getPath = function() {
  return this.path_;
};
goog.Uri.prototype.setPath = function(newPath, opt_decode) {
  this.enforceReadOnly();
  this.path_ = opt_decode ? goog.Uri.decodeOrEmpty_(newPath) : newPath;
  return this;
};
goog.Uri.prototype.hasPath = function() {
  return!!this.path_;
};
goog.Uri.prototype.hasQuery = function() {
  return this.queryData_.toString() !== "";
};
goog.Uri.prototype.setQueryData = function(queryData, opt_decode) {
  this.enforceReadOnly();
  if (queryData instanceof goog.Uri.QueryData) {
    this.queryData_ = queryData;
    this.queryData_.setIgnoreCase(this.ignoreCase_);
  } else {
    if (!opt_decode) {
      queryData = goog.Uri.encodeSpecialChars_(queryData, goog.Uri.reDisallowedInQuery_);
    }
    this.queryData_ = new goog.Uri.QueryData(queryData, null, this.ignoreCase_);
  }
  return this;
};
goog.Uri.prototype.setQuery = function(newQuery, opt_decode) {
  return this.setQueryData(newQuery, opt_decode);
};
goog.Uri.prototype.getEncodedQuery = function() {
  return this.queryData_.toString();
};
goog.Uri.prototype.getDecodedQuery = function() {
  return this.queryData_.toDecodedString();
};
goog.Uri.prototype.getQueryData = function() {
  return this.queryData_;
};
goog.Uri.prototype.getQuery = function() {
  return this.getEncodedQuery();
};
goog.Uri.prototype.setParameterValue = function(key, value) {
  this.enforceReadOnly();
  this.queryData_.set(key, value);
  return this;
};
goog.Uri.prototype.setParameterValues = function(key, values) {
  this.enforceReadOnly();
  if (!goog.isArray(values)) {
    values = [String(values)];
  }
  this.queryData_.setValues(key, (values));
  return this;
};
goog.Uri.prototype.getParameterValues = function(name) {
  return this.queryData_.getValues(name);
};
goog.Uri.prototype.getParameterValue = function(paramName) {
  return(this.queryData_.get(paramName));
};
goog.Uri.prototype.getFragment = function() {
  return this.fragment_;
};
goog.Uri.prototype.setFragment = function(newFragment, opt_decode) {
  this.enforceReadOnly();
  this.fragment_ = opt_decode ? goog.Uri.decodeOrEmpty_(newFragment) : newFragment;
  return this;
};
goog.Uri.prototype.hasFragment = function() {
  return!!this.fragment_;
};
goog.Uri.prototype.hasSameDomainAs = function(uri2) {
  return(!this.hasDomain() && !uri2.hasDomain() || this.getDomain() == uri2.getDomain()) && (!this.hasPort() && !uri2.hasPort() || this.getPort() == uri2.getPort());
};
goog.Uri.prototype.makeUnique = function() {
  this.enforceReadOnly();
  this.setParameterValue(goog.Uri.RANDOM_PARAM, goog.string.getRandomString());
  return this;
};
goog.Uri.prototype.removeParameter = function(key) {
  this.enforceReadOnly();
  this.queryData_.remove(key);
  return this;
};
goog.Uri.prototype.setReadOnly = function(isReadOnly) {
  this.isReadOnly_ = isReadOnly;
  return this;
};
goog.Uri.prototype.isReadOnly = function() {
  return this.isReadOnly_;
};
goog.Uri.prototype.enforceReadOnly = function() {
  if (this.isReadOnly_) {
    throw Error("Tried to modify a read-only Uri");
  }
};
goog.Uri.prototype.setIgnoreCase = function(ignoreCase) {
  this.ignoreCase_ = ignoreCase;
  if (this.queryData_) {
    this.queryData_.setIgnoreCase(ignoreCase);
  }
  return this;
};
goog.Uri.prototype.getIgnoreCase = function() {
  return this.ignoreCase_;
};
goog.Uri.parse = function(uri, opt_ignoreCase) {
  return uri instanceof goog.Uri ? uri.clone() : new goog.Uri(uri, opt_ignoreCase);
};
goog.Uri.create = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_query, opt_fragment, opt_ignoreCase) {
  var uri = new goog.Uri(null, opt_ignoreCase);
  opt_scheme && uri.setScheme(opt_scheme);
  opt_userInfo && uri.setUserInfo(opt_userInfo);
  opt_domain && uri.setDomain(opt_domain);
  opt_port && uri.setPort(opt_port);
  opt_path && uri.setPath(opt_path);
  opt_query && uri.setQueryData(opt_query);
  opt_fragment && uri.setFragment(opt_fragment);
  return uri;
};
goog.Uri.resolve = function(base, rel) {
  if (!(base instanceof goog.Uri)) {
    base = goog.Uri.parse(base);
  }
  if (!(rel instanceof goog.Uri)) {
    rel = goog.Uri.parse(rel);
  }
  return base.resolve(rel);
};
goog.Uri.removeDotSegments = function(path) {
  if (path == ".." || path == ".") {
    return "";
  } else {
    if (!goog.string.contains(path, "./") && !goog.string.contains(path, "/.")) {
      return path;
    } else {
      var leadingSlash = goog.string.startsWith(path, "/");
      var segments = path.split("/");
      var out = [];
      for (var pos = 0;pos < segments.length;) {
        var segment = segments[pos++];
        if (segment == ".") {
          if (leadingSlash && pos == segments.length) {
            out.push("");
          }
        } else {
          if (segment == "..") {
            if (out.length > 1 || out.length == 1 && out[0] != "") {
              out.pop();
            }
            if (leadingSlash && pos == segments.length) {
              out.push("");
            }
          } else {
            out.push(segment);
            leadingSlash = true;
          }
        }
      }
      return out.join("/");
    }
  }
};
goog.Uri.decodeOrEmpty_ = function(val) {
  return val ? decodeURIComponent(val) : "";
};
goog.Uri.encodeSpecialChars_ = function(unescapedPart, extra) {
  if (goog.isString(unescapedPart)) {
    return encodeURI(unescapedPart).replace(extra, goog.Uri.encodeChar_);
  }
  return null;
};
goog.Uri.encodeChar_ = function(ch) {
  var n = ch.charCodeAt(0);
  return "%" + (n >> 4 & 15).toString(16) + (n & 15).toString(16);
};
goog.Uri.reDisallowedInSchemeOrUserInfo_ = /[#\/\?@]/g;
goog.Uri.reDisallowedInRelativePath_ = /[\#\?:]/g;
goog.Uri.reDisallowedInAbsolutePath_ = /[\#\?]/g;
goog.Uri.reDisallowedInQuery_ = /[\#\?@]/g;
goog.Uri.reDisallowedInFragment_ = /#/g;
goog.Uri.haveSameDomain = function(uri1String, uri2String) {
  var pieces1 = goog.uri.utils.split(uri1String);
  var pieces2 = goog.uri.utils.split(uri2String);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.Uri.QueryData = function(opt_query, opt_uri, opt_ignoreCase) {
  this.encodedQuery_ = opt_query || null;
  this.ignoreCase_ = !!opt_ignoreCase;
};
goog.Uri.QueryData.prototype.ensureKeyMapInitialized_ = function() {
  if (!this.keyMap_) {
    this.keyMap_ = new goog.structs.Map;
    this.count_ = 0;
    if (this.encodedQuery_) {
      var pairs = this.encodedQuery_.split("\x26");
      for (var i = 0;i < pairs.length;i++) {
        var indexOfEquals = pairs[i].indexOf("\x3d");
        var name = null;
        var value = null;
        if (indexOfEquals >= 0) {
          name = pairs[i].substring(0, indexOfEquals);
          value = pairs[i].substring(indexOfEquals + 1);
        } else {
          name = pairs[i];
        }
        name = goog.string.urlDecode(name);
        name = this.getKeyName_(name);
        this.add(name, value ? goog.string.urlDecode(value) : "");
      }
    }
  }
};
goog.Uri.QueryData.createFromMap = function(map, opt_uri, opt_ignoreCase) {
  var keys = goog.structs.getKeys(map);
  if (typeof keys == "undefined") {
    throw Error("Keys are undefined");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  var values = goog.structs.getValues(map);
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = values[i];
    if (!goog.isArray(value)) {
      queryData.add(key, value);
    } else {
      queryData.setValues(key, value);
    }
  }
  return queryData;
};
goog.Uri.QueryData.createFromKeysValues = function(keys, values, opt_uri, opt_ignoreCase) {
  if (keys.length != values.length) {
    throw Error("Mismatched lengths for keys/values");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  for (var i = 0;i < keys.length;i++) {
    queryData.add(keys[i], values[i]);
  }
  return queryData;
};
goog.Uri.QueryData.prototype.keyMap_ = null;
goog.Uri.QueryData.prototype.count_ = null;
goog.Uri.QueryData.prototype.getCount = function() {
  this.ensureKeyMapInitialized_();
  return this.count_;
};
goog.Uri.QueryData.prototype.add = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  var values = this.keyMap_.get(key);
  if (!values) {
    this.keyMap_.set(key, values = []);
  }
  values.push(value);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.remove = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  if (this.keyMap_.containsKey(key)) {
    this.invalidateCache_();
    this.count_ -= this.keyMap_.get(key).length;
    return this.keyMap_.remove(key);
  }
  return false;
};
goog.Uri.QueryData.prototype.clear = function() {
  this.invalidateCache_();
  this.keyMap_ = null;
  this.count_ = 0;
};
goog.Uri.QueryData.prototype.isEmpty = function() {
  this.ensureKeyMapInitialized_();
  return this.count_ == 0;
};
goog.Uri.QueryData.prototype.containsKey = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  return this.keyMap_.containsKey(key);
};
goog.Uri.QueryData.prototype.containsValue = function(value) {
  var vals = this.getValues();
  return goog.array.contains(vals, value);
};
goog.Uri.QueryData.prototype.getKeys = function() {
  this.ensureKeyMapInitialized_();
  var vals = (this.keyMap_.getValues());
  var keys = this.keyMap_.getKeys();
  var rv = [];
  for (var i = 0;i < keys.length;i++) {
    var val = vals[i];
    for (var j = 0;j < val.length;j++) {
      rv.push(keys[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.getValues = function(opt_key) {
  this.ensureKeyMapInitialized_();
  var rv = [];
  if (opt_key) {
    if (this.containsKey(opt_key)) {
      rv = goog.array.concat(rv, this.keyMap_.get(this.getKeyName_(opt_key)));
    }
  } else {
    var values = (this.keyMap_.getValues());
    for (var i = 0;i < values.length;i++) {
      rv = goog.array.concat(rv, values[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.set = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  if (this.containsKey(key)) {
    this.count_ -= this.keyMap_.get(key).length;
  }
  this.keyMap_.set(key, [value]);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.get = function(key, opt_default) {
  var values = key ? this.getValues(key) : [];
  if (goog.Uri.preserveParameterTypesCompatibilityFlag) {
    return values.length > 0 ? values[0] : opt_default;
  } else {
    return values.length > 0 ? String(values[0]) : opt_default;
  }
};
goog.Uri.QueryData.prototype.setValues = function(key, values) {
  this.remove(key);
  if (values.length > 0) {
    this.invalidateCache_();
    this.keyMap_.set(this.getKeyName_(key), goog.array.clone(values));
    this.count_ += values.length;
  }
};
goog.Uri.QueryData.prototype.toString = function() {
  if (this.encodedQuery_) {
    return this.encodedQuery_;
  }
  if (!this.keyMap_) {
    return "";
  }
  var sb = [];
  var keys = this.keyMap_.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var encodedKey = goog.string.urlEncode(key);
    var val = this.getValues(key);
    for (var j = 0;j < val.length;j++) {
      var param = encodedKey;
      if (val[j] !== "") {
        param += "\x3d" + goog.string.urlEncode(val[j]);
      }
      sb.push(param);
    }
  }
  return this.encodedQuery_ = sb.join("\x26");
};
goog.Uri.QueryData.prototype.toDecodedString = function() {
  return goog.Uri.decodeOrEmpty_(this.toString());
};
goog.Uri.QueryData.prototype.invalidateCache_ = function() {
  this.encodedQuery_ = null;
};
goog.Uri.QueryData.prototype.filterKeys = function(keys) {
  this.ensureKeyMapInitialized_();
  goog.structs.forEach(this.keyMap_, function(value, key, map) {
    if (!goog.array.contains(keys, key)) {
      this.remove(key);
    }
  }, this);
  return this;
};
goog.Uri.QueryData.prototype.clone = function() {
  var rv = new goog.Uri.QueryData;
  rv.encodedQuery_ = this.encodedQuery_;
  if (this.keyMap_) {
    rv.keyMap_ = this.keyMap_.clone();
    rv.count_ = this.count_;
  }
  return rv;
};
goog.Uri.QueryData.prototype.getKeyName_ = function(arg) {
  var keyName = String(arg);
  if (this.ignoreCase_) {
    keyName = keyName.toLowerCase();
  }
  return keyName;
};
goog.Uri.QueryData.prototype.setIgnoreCase = function(ignoreCase) {
  var resetKeys = ignoreCase && !this.ignoreCase_;
  if (resetKeys) {
    this.ensureKeyMapInitialized_();
    this.invalidateCache_();
    goog.structs.forEach(this.keyMap_, function(value, key) {
      var lowerCase = key.toLowerCase();
      if (key != lowerCase) {
        this.remove(key);
        this.setValues(lowerCase, value);
      }
    }, this);
  }
  this.ignoreCase_ = ignoreCase;
};
goog.Uri.QueryData.prototype.extend = function(var_args) {
  for (var i = 0;i < arguments.length;i++) {
    var data = arguments[i];
    goog.structs.forEach(data, function(value, key) {
      this.add(key, value);
    }, this);
  }
};
goog.provide("goog.disposable.IDisposable");
goog.disposable.IDisposable = function() {
};
goog.disposable.IDisposable.prototype.dispose;
goog.disposable.IDisposable.prototype.isDisposed;
goog.provide("goog.Disposable");
goog.provide("goog.dispose");
goog.require("goog.disposable.IDisposable");
goog.Disposable = function() {
  if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
    this.creationStack = (new Error).stack;
    goog.Disposable.instances_[goog.getUid(this)] = this;
  }
};
goog.Disposable.MonitoringMode = {OFF:0, PERMANENT:1, INTERACTIVE:2};
goog.Disposable.MONITORING_MODE = 0;
goog.Disposable.instances_ = {};
goog.Disposable.getUndisposedObjects = function() {
  var ret = [];
  for (var id in goog.Disposable.instances_) {
    if (goog.Disposable.instances_.hasOwnProperty(id)) {
      ret.push(goog.Disposable.instances_[Number(id)]);
    }
  }
  return ret;
};
goog.Disposable.clearUndisposedObjects = function() {
  goog.Disposable.instances_ = {};
};
goog.Disposable.prototype.disposed_ = false;
goog.Disposable.prototype.onDisposeCallbacks_;
goog.Disposable.prototype.creationStack;
goog.Disposable.prototype.isDisposed = function() {
  return this.disposed_;
};
goog.Disposable.prototype.getDisposed = goog.Disposable.prototype.isDisposed;
goog.Disposable.prototype.dispose = function() {
  if (!this.disposed_) {
    this.disposed_ = true;
    this.disposeInternal();
    if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
      var uid = goog.getUid(this);
      if (goog.Disposable.MONITORING_MODE == goog.Disposable.MonitoringMode.PERMANENT && !goog.Disposable.instances_.hasOwnProperty(uid)) {
        throw Error(this + " did not call the goog.Disposable base " + "constructor or was disposed of after a clearUndisposedObjects " + "call");
      }
      delete goog.Disposable.instances_[uid];
    }
  }
};
goog.Disposable.prototype.registerDisposable = function(disposable) {
  this.addOnDisposeCallback(goog.partial(goog.dispose, disposable));
};
goog.Disposable.prototype.addOnDisposeCallback = function(callback, opt_scope) {
  if (!this.onDisposeCallbacks_) {
    this.onDisposeCallbacks_ = [];
  }
  this.onDisposeCallbacks_.push(goog.bind(callback, opt_scope));
};
goog.Disposable.prototype.disposeInternal = function() {
  if (this.onDisposeCallbacks_) {
    while (this.onDisposeCallbacks_.length) {
      this.onDisposeCallbacks_.shift()();
    }
  }
};
goog.Disposable.isDisposed = function(obj) {
  if (obj && typeof obj.isDisposed == "function") {
    return obj.isDisposed();
  }
  return false;
};
goog.dispose = function(obj) {
  if (obj && typeof obj.dispose == "function") {
    obj.dispose();
  }
};
goog.disposeAll = function(var_args) {
  for (var i = 0, len = arguments.length;i < len;++i) {
    var disposable = arguments[i];
    if (goog.isArrayLike(disposable)) {
      goog.disposeAll.apply(null, disposable);
    } else {
      goog.dispose(disposable);
    }
  }
};
goog.provide("goog.debug.EntryPointMonitor");
goog.provide("goog.debug.entryPointRegistry");
goog.require("goog.asserts");
goog.debug.EntryPointMonitor = function() {
};
goog.debug.EntryPointMonitor.prototype.wrap;
goog.debug.EntryPointMonitor.prototype.unwrap;
goog.debug.entryPointRegistry.refList_ = [];
goog.debug.entryPointRegistry.monitors_ = [];
goog.debug.entryPointRegistry.monitorsMayExist_ = false;
goog.debug.entryPointRegistry.register = function(callback) {
  goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length] = callback;
  if (goog.debug.entryPointRegistry.monitorsMayExist_) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    for (var i = 0;i < monitors.length;i++) {
      callback(goog.bind(monitors[i].wrap, monitors[i]));
    }
  }
};
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
  goog.debug.entryPointRegistry.monitorsMayExist_ = true;
  var transformer = goog.bind(monitor.wrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  goog.debug.entryPointRegistry.monitors_.push(monitor);
};
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
  var monitors = goog.debug.entryPointRegistry.monitors_;
  goog.asserts.assert(monitor == monitors[monitors.length - 1], "Only the most recent monitor can be unwrapped.");
  var transformer = goog.bind(monitor.unwrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  monitors.length--;
};
goog.provide("goog.debug.errorHandlerWeakDep");
goog.debug.errorHandlerWeakDep = {protectEntryPoint:function(fn, opt_tracers) {
  return fn;
}};
goog.provide("goog.events.BrowserFeature");
goog.require("goog.userAgent");
goog.events.BrowserFeature = {HAS_W3C_BUTTON:!goog.userAgent.IE || goog.userAgent.isDocumentMode(9), HAS_W3C_EVENT_SUPPORT:!goog.userAgent.IE || goog.userAgent.isDocumentMode(9), SET_KEY_CODE_TO_PREVENT_DEFAULT:goog.userAgent.IE && !goog.userAgent.isVersion("9"), HAS_NAVIGATOR_ONLINE_PROPERTY:!goog.userAgent.WEBKIT || goog.userAgent.isVersion("528"), HAS_HTML5_NETWORK_EVENT_SUPPORT:goog.userAgent.GECKO && goog.userAgent.isVersion("1.9b") || (goog.userAgent.IE && goog.userAgent.isVersion("8") || (goog.userAgent.OPERA && 
goog.userAgent.isVersion("9.5") || goog.userAgent.WEBKIT && goog.userAgent.isVersion("528"))), HTML5_NETWORK_EVENTS_FIRE_ON_BODY:goog.userAgent.GECKO && !goog.userAgent.isVersion("8") || goog.userAgent.IE && !goog.userAgent.isVersion("9"), TOUCH_ENABLED:"ontouchstart" in goog.global || (!!(goog.global["document"] && (document.documentElement && "ontouchstart" in document.documentElement)) || !!(goog.global["navigator"] && goog.global["navigator"]["msMaxTouchPoints"]))};
goog.provide("goog.events.Event");
goog.provide("goog.events.EventLike");
goog.require("goog.Disposable");
goog.events.EventLike;
goog.events.Event = function(type, opt_target) {
  this.type = type;
  this.target = opt_target;
  this.currentTarget = this.target;
};
goog.events.Event.prototype.disposeInternal = function() {
};
goog.events.Event.prototype.dispose = function() {
};
goog.events.Event.prototype.propagationStopped_ = false;
goog.events.Event.prototype.defaultPrevented = false;
goog.events.Event.prototype.returnValue_ = true;
goog.events.Event.prototype.stopPropagation = function() {
  this.propagationStopped_ = true;
};
goog.events.Event.prototype.preventDefault = function() {
  this.defaultPrevented = true;
  this.returnValue_ = false;
};
goog.events.Event.stopPropagation = function(e) {
  e.stopPropagation();
};
goog.events.Event.preventDefault = function(e) {
  e.preventDefault();
};
goog.provide("goog.events.EventType");
goog.require("goog.userAgent");
goog.events.EventType = {CLICK:"click", DBLCLICK:"dblclick", MOUSEDOWN:"mousedown", MOUSEUP:"mouseup", MOUSEOVER:"mouseover", MOUSEOUT:"mouseout", MOUSEMOVE:"mousemove", SELECTSTART:"selectstart", KEYPRESS:"keypress", KEYDOWN:"keydown", KEYUP:"keyup", BLUR:"blur", FOCUS:"focus", DEACTIVATE:"deactivate", FOCUSIN:goog.userAgent.IE ? "focusin" : "DOMFocusIn", FOCUSOUT:goog.userAgent.IE ? "focusout" : "DOMFocusOut", CHANGE:"change", SELECT:"select", SUBMIT:"submit", INPUT:"input", PROPERTYCHANGE:"propertychange", 
DRAGSTART:"dragstart", DRAG:"drag", DRAGENTER:"dragenter", DRAGOVER:"dragover", DRAGLEAVE:"dragleave", DROP:"drop", DRAGEND:"dragend", TOUCHSTART:"touchstart", TOUCHMOVE:"touchmove", TOUCHEND:"touchend", TOUCHCANCEL:"touchcancel", BEFOREUNLOAD:"beforeunload", CONTEXTMENU:"contextmenu", ERROR:"error", HELP:"help", LOAD:"load", LOSECAPTURE:"losecapture", READYSTATECHANGE:"readystatechange", RESIZE:"resize", SCROLL:"scroll", UNLOAD:"unload", HASHCHANGE:"hashchange", PAGEHIDE:"pagehide", PAGESHOW:"pageshow", 
POPSTATE:"popstate", COPY:"copy", PASTE:"paste", CUT:"cut", BEFORECOPY:"beforecopy", BEFORECUT:"beforecut", BEFOREPASTE:"beforepaste", ONLINE:"online", OFFLINE:"offline", MESSAGE:"message", CONNECT:"connect", TRANSITIONEND:goog.userAgent.WEBKIT ? "webkitTransitionEnd" : goog.userAgent.OPERA ? "oTransitionEnd" : "transitionend", MSGESTURECHANGE:"MSGestureChange", MSGESTUREEND:"MSGestureEnd", MSGESTUREHOLD:"MSGestureHold", MSGESTURESTART:"MSGestureStart", MSGESTURETAP:"MSGestureTap", MSGOTPOINTERCAPTURE:"MSGotPointerCapture", 
MSINERTIASTART:"MSInertiaStart", MSLOSTPOINTERCAPTURE:"MSLostPointerCapture", MSPOINTERCANCEL:"MSPointerCancel", MSPOINTERDOWN:"MSPointerDown", MSPOINTERMOVE:"MSPointerMove", MSPOINTEROVER:"MSPointerOver", MSPOINTEROUT:"MSPointerOut", MSPOINTERUP:"MSPointerUp", TEXTINPUT:"textinput", COMPOSITIONSTART:"compositionstart", COMPOSITIONUPDATE:"compositionupdate", COMPOSITIONEND:"compositionend"};
goog.provide("goog.reflect");
goog.reflect.object = function(type, object) {
  return object;
};
goog.reflect.sinkValue = function(x) {
  goog.reflect.sinkValue[" "](x);
  return x;
};
goog.reflect.sinkValue[" "] = goog.nullFunction;
goog.reflect.canAccessProperty = function(obj, prop) {
  try {
    goog.reflect.sinkValue(obj[prop]);
    return true;
  } catch (e) {
  }
  return false;
};
goog.provide("goog.events.BrowserEvent");
goog.provide("goog.events.BrowserEvent.MouseButton");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventType");
goog.require("goog.reflect");
goog.require("goog.userAgent");
goog.events.BrowserEvent = function(opt_e, opt_currentTarget) {
  if (opt_e) {
    this.init(opt_e, opt_currentTarget);
  }
};
goog.inherits(goog.events.BrowserEvent, goog.events.Event);
goog.events.BrowserEvent.MouseButton = {LEFT:0, MIDDLE:1, RIGHT:2};
goog.events.BrowserEvent.IEButtonMap = [1, 4, 2];
goog.events.BrowserEvent.prototype.target = null;
goog.events.BrowserEvent.prototype.currentTarget;
goog.events.BrowserEvent.prototype.relatedTarget = null;
goog.events.BrowserEvent.prototype.offsetX = 0;
goog.events.BrowserEvent.prototype.offsetY = 0;
goog.events.BrowserEvent.prototype.clientX = 0;
goog.events.BrowserEvent.prototype.clientY = 0;
goog.events.BrowserEvent.prototype.screenX = 0;
goog.events.BrowserEvent.prototype.screenY = 0;
goog.events.BrowserEvent.prototype.button = 0;
goog.events.BrowserEvent.prototype.keyCode = 0;
goog.events.BrowserEvent.prototype.charCode = 0;
goog.events.BrowserEvent.prototype.ctrlKey = false;
goog.events.BrowserEvent.prototype.altKey = false;
goog.events.BrowserEvent.prototype.shiftKey = false;
goog.events.BrowserEvent.prototype.metaKey = false;
goog.events.BrowserEvent.prototype.state;
goog.events.BrowserEvent.prototype.platformModifierKey = false;
goog.events.BrowserEvent.prototype.event_ = null;
goog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {
  var type = this.type = e.type;
  goog.events.Event.call(this, type);
  this.target = (e.target) || e.srcElement;
  this.currentTarget = (opt_currentTarget);
  var relatedTarget = (e.relatedTarget);
  if (relatedTarget) {
    if (goog.userAgent.GECKO) {
      if (!goog.reflect.canAccessProperty(relatedTarget, "nodeName")) {
        relatedTarget = null;
      }
    }
  } else {
    if (type == goog.events.EventType.MOUSEOVER) {
      relatedTarget = e.fromElement;
    } else {
      if (type == goog.events.EventType.MOUSEOUT) {
        relatedTarget = e.toElement;
      }
    }
  }
  this.relatedTarget = relatedTarget;
  this.offsetX = goog.userAgent.WEBKIT || e.offsetX !== undefined ? e.offsetX : e.layerX;
  this.offsetY = goog.userAgent.WEBKIT || e.offsetY !== undefined ? e.offsetY : e.layerY;
  this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;
  this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;
  this.screenX = e.screenX || 0;
  this.screenY = e.screenY || 0;
  this.button = e.button;
  this.keyCode = e.keyCode || 0;
  this.charCode = e.charCode || (type == "keypress" ? e.keyCode : 0);
  this.ctrlKey = e.ctrlKey;
  this.altKey = e.altKey;
  this.shiftKey = e.shiftKey;
  this.metaKey = e.metaKey;
  this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;
  this.state = e.state;
  this.event_ = e;
  if (e.defaultPrevented) {
    this.preventDefault();
  }
  delete this.propagationStopped_;
};
goog.events.BrowserEvent.prototype.isButton = function(button) {
  if (!goog.events.BrowserFeature.HAS_W3C_BUTTON) {
    if (this.type == "click") {
      return button == goog.events.BrowserEvent.MouseButton.LEFT;
    } else {
      return!!(this.event_.button & goog.events.BrowserEvent.IEButtonMap[button]);
    }
  } else {
    return this.event_.button == button;
  }
};
goog.events.BrowserEvent.prototype.isMouseActionButton = function() {
  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) && !(goog.userAgent.WEBKIT && (goog.userAgent.MAC && this.ctrlKey));
};
goog.events.BrowserEvent.prototype.stopPropagation = function() {
  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);
  if (this.event_.stopPropagation) {
    this.event_.stopPropagation();
  } else {
    this.event_.cancelBubble = true;
  }
};
goog.events.BrowserEvent.prototype.preventDefault = function() {
  goog.events.BrowserEvent.superClass_.preventDefault.call(this);
  var be = this.event_;
  if (!be.preventDefault) {
    be.returnValue = false;
    if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {
      try {
        var VK_F1 = 112;
        var VK_F12 = 123;
        if (be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {
          be.keyCode = -1;
        }
      } catch (ex) {
      }
    }
  } else {
    be.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.getBrowserEvent = function() {
  return this.event_;
};
goog.events.BrowserEvent.prototype.disposeInternal = function() {
};
goog.provide("goog.events.EventWrapper");
goog.events.EventWrapper = function() {
};
goog.events.EventWrapper.prototype.listen = function(src, listener, opt_capt, opt_scope, opt_eventHandler) {
};
goog.events.EventWrapper.prototype.unlisten = function(src, listener, opt_capt, opt_scope, opt_eventHandler) {
};
goog.provide("goog.events.Listenable");
goog.provide("goog.events.ListenableKey");
goog.require("goog.events.EventLike");
goog.events.Listenable = function() {
};
goog.events.Listenable.USE_LISTENABLE_INTERFACE = false;
goog.events.Listenable.IMPLEMENTED_BY_PROP_ = "__closure_listenable";
goog.events.Listenable.addImplementation = function(cls) {
  cls.prototype[goog.events.Listenable.IMPLEMENTED_BY_PROP_] = true;
};
goog.events.Listenable.isImplementedBy = function(obj) {
  return!!(obj && obj[goog.events.Listenable.IMPLEMENTED_BY_PROP_]);
};
goog.events.Listenable.prototype.listen;
goog.events.Listenable.prototype.listenOnce;
goog.events.Listenable.prototype.unlisten;
goog.events.Listenable.prototype.unlistenByKey;
goog.events.Listenable.prototype.dispatchEvent;
goog.events.Listenable.prototype.removeAllListeners;
goog.events.Listenable.prototype.fireListeners;
goog.events.Listenable.prototype.getListeners;
goog.events.Listenable.prototype.getListener;
goog.events.Listenable.prototype.hasListener;
goog.events.ListenableKey = function() {
};
goog.events.ListenableKey.counter_ = 0;
goog.events.ListenableKey.reserveKey = function() {
  return++goog.events.ListenableKey.counter_;
};
goog.events.ListenableKey.prototype.src;
goog.events.ListenableKey.prototype.type;
goog.events.ListenableKey.prototype.listener;
goog.events.ListenableKey.prototype.capture;
goog.events.ListenableKey.prototype.handler;
goog.events.ListenableKey.prototype.key;
goog.provide("goog.events.Listener");
goog.require("goog.events.ListenableKey");
goog.events.Listener = function() {
  if (goog.events.Listener.ENABLE_MONITORING) {
    this.creationStack = (new Error).stack;
  }
};
goog.events.Listener.ENABLE_MONITORING = false;
goog.events.Listener.prototype.isFunctionListener_;
goog.events.Listener.prototype.listener;
goog.events.Listener.prototype.proxy;
goog.events.Listener.prototype.src;
goog.events.Listener.prototype.type;
goog.events.Listener.prototype.capture;
goog.events.Listener.prototype.handler;
goog.events.Listener.prototype.key = 0;
goog.events.Listener.prototype.removed = false;
goog.events.Listener.prototype.callOnce = false;
goog.events.Listener.prototype.creationStack;
goog.events.Listener.prototype.init = function(listener, proxy, src, type, capture, opt_handler) {
  if (goog.isFunction(listener)) {
    this.isFunctionListener_ = true;
  } else {
    if (listener && (listener.handleEvent && goog.isFunction(listener.handleEvent))) {
      this.isFunctionListener_ = false;
    } else {
      throw Error("Invalid listener argument");
    }
  }
  this.listener = listener;
  this.proxy = proxy;
  this.src = src;
  this.type = type;
  this.capture = !!capture;
  this.handler = opt_handler;
  this.callOnce = false;
  this.key = goog.events.ListenableKey.reserveKey();
  this.removed = false;
};
goog.events.Listener.prototype.handleEvent = function(eventObject) {
  if (this.isFunctionListener_) {
    return this.listener.call(this.handler || this.src, eventObject);
  }
  return this.listener.handleEvent.call(this.listener, eventObject);
};
goog.provide("goog.events");
goog.provide("goog.events.Key");
goog.require("goog.array");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.debug.errorHandlerWeakDep");
goog.require("goog.events.BrowserEvent");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventWrapper");
goog.require("goog.events.Listenable");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.require("goog.userAgent");
goog.events.Key;
goog.events.ListenableType;
goog.events.listeners_ = {};
goog.events.listenerTree_ = {};
goog.events.sources_ = {};
goog.events.onString_ = "on";
goog.events.onStringMap_ = {};
goog.events.keySeparator_ = "_";
goog.events.listen = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listen(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  var listenableKey;
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    listenableKey = src.listen((type), goog.events.wrapListener_(listener), opt_capt, opt_handler);
  } else {
    listenableKey = goog.events.listen_((src), type, listener, false, opt_capt, opt_handler);
  }
  var key = listenableKey.key;
  goog.events.listeners_[key] = listenableKey;
  return key;
};
goog.events.listen_ = function(src, type, listener, callOnce, opt_capt, opt_handler) {
  if (!type) {
    throw Error("Invalid event type");
  }
  var capture = !!opt_capt;
  var map = goog.events.listenerTree_;
  if (!(type in map)) {
    map[type] = {count_:0, remaining_:0};
  }
  map = map[type];
  if (!(capture in map)) {
    map[capture] = {count_:0, remaining_:0};
    map.count_++;
  }
  map = map[capture];
  var srcUid = goog.getUid(src);
  var listenerArray, listenerObj;
  map.remaining_++;
  if (!map[srcUid]) {
    listenerArray = map[srcUid] = [];
    map.count_++;
  } else {
    listenerArray = map[srcUid];
    for (var i = 0;i < listenerArray.length;i++) {
      listenerObj = listenerArray[i];
      if (listenerObj.listener == listener && listenerObj.handler == opt_handler) {
        if (listenerObj.removed) {
          break;
        }
        if (!callOnce) {
          listenerArray[i].callOnce = false;
        }
        return listenerArray[i];
      }
    }
  }
  var proxy = goog.events.getProxy();
  listenerObj = new goog.events.Listener;
  listenerObj.init(listener, proxy, src, type, capture, opt_handler);
  listenerObj.callOnce = callOnce;
  proxy.src = src;
  proxy.listener = listenerObj;
  listenerArray.push(listenerObj);
  if (!goog.events.sources_[srcUid]) {
    goog.events.sources_[srcUid] = [];
  }
  goog.events.sources_[srcUid].push(listenerObj);
  if (src.addEventListener) {
    if (src == goog.global || !src.customEvent_) {
      src.addEventListener(type, proxy, capture);
    }
  } else {
    src.attachEvent(goog.events.getOnString_(type), proxy);
  }
  return listenerObj;
};
goog.events.getProxy = function() {
  var proxyCallbackFunction = goog.events.handleBrowserEvent_;
  var f = goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT ? function(eventObject) {
    return proxyCallbackFunction.call(f.src, f.listener, eventObject);
  } : function(eventObject) {
    var v = proxyCallbackFunction.call(f.src, f.listener, eventObject);
    if (!v) {
      return v;
    }
  };
  return f;
};
goog.events.listenOnce = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listenOnce(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  var listenableKey;
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    listenableKey = src.listenOnce((type), goog.events.wrapListener_(listener), opt_capt, opt_handler);
  } else {
    listenableKey = goog.events.listen_((src), type, listener, true, opt_capt, opt_handler);
  }
  var key = listenableKey.key;
  goog.events.listeners_[key] = listenableKey;
  return key;
};
goog.events.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler);
};
goog.events.unlisten = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.unlisten(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    return src.unlisten((type), goog.events.wrapListener_(listener), opt_capt, opt_handler);
  }
  var capture = !!opt_capt;
  var listenerArray = goog.events.getListeners_(src, type, capture);
  if (!listenerArray) {
    return false;
  }
  for (var i = 0;i < listenerArray.length;i++) {
    if (listenerArray[i].listener == listener && (listenerArray[i].capture == capture && listenerArray[i].handler == opt_handler)) {
      return goog.events.unlistenByKey(listenerArray[i].key);
    }
  }
  return false;
};
goog.events.unlistenByKey = function(key) {
  var listener = goog.events.listeners_[key];
  if (!listener) {
    return false;
  }
  if (listener.removed) {
    return false;
  }
  var src = listener.src;
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    return src.unlistenByKey(listener);
  }
  var type = listener.type;
  var proxy = listener.proxy;
  var capture = listener.capture;
  if (src.removeEventListener) {
    if (src == goog.global || !src.customEvent_) {
      src.removeEventListener(type, proxy, capture);
    }
  } else {
    if (src.detachEvent) {
      src.detachEvent(goog.events.getOnString_(type), proxy);
    }
  }
  var srcUid = goog.getUid(src);
  if (goog.events.sources_[srcUid]) {
    var sourcesArray = goog.events.sources_[srcUid];
    goog.array.remove(sourcesArray, listener);
    if (sourcesArray.length == 0) {
      delete goog.events.sources_[srcUid];
    }
  }
  listener.removed = true;
  var listenerArray = goog.events.listenerTree_[type][capture][srcUid];
  if (listenerArray) {
    listenerArray.needsCleanup_ = true;
    goog.events.cleanUp_(type, capture, srcUid, listenerArray);
  }
  delete goog.events.listeners_[key];
  return true;
};
goog.events.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler);
};
goog.events.cleanUp = function(listenableKey) {
  delete goog.events.listeners_[listenableKey.key];
};
goog.events.cleanUp_ = function(type, capture, srcUid, listenerArray) {
  if (!listenerArray.locked_) {
    if (listenerArray.needsCleanup_) {
      for (var oldIndex = 0, newIndex = 0;oldIndex < listenerArray.length;oldIndex++) {
        if (listenerArray[oldIndex].removed) {
          var proxy = listenerArray[oldIndex].proxy;
          proxy.src = null;
          continue;
        }
        if (oldIndex != newIndex) {
          listenerArray[newIndex] = listenerArray[oldIndex];
        }
        newIndex++;
      }
      listenerArray.length = newIndex;
      listenerArray.needsCleanup_ = false;
      if (newIndex == 0) {
        delete goog.events.listenerTree_[type][capture][srcUid];
        goog.events.listenerTree_[type][capture].count_--;
        if (goog.events.listenerTree_[type][capture].count_ == 0) {
          delete goog.events.listenerTree_[type][capture];
          goog.events.listenerTree_[type].count_--;
        }
        if (goog.events.listenerTree_[type].count_ == 0) {
          delete goog.events.listenerTree_[type];
        }
      }
    }
  }
};
goog.events.removeAll = function(opt_obj, opt_type) {
  var count = 0;
  var noObj = opt_obj == null;
  var noType = opt_type == null;
  if (!noObj) {
    if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && (opt_obj && goog.events.Listenable.isImplementedBy(opt_obj))) {
      return opt_obj.removeAllListeners(opt_type);
    }
    var srcUid = goog.getUid((opt_obj));
    if (goog.events.sources_[srcUid]) {
      var sourcesArray = goog.events.sources_[srcUid];
      for (var i = sourcesArray.length - 1;i >= 0;i--) {
        var listener = sourcesArray[i];
        if (noType || opt_type == listener.type) {
          goog.events.unlistenByKey(listener.key);
          count++;
        }
      }
    }
  } else {
    goog.object.forEach(goog.events.listeners_, function(listener, key) {
      goog.events.unlistenByKey(key);
      count++;
    });
  }
  return count;
};
goog.events.getListeners = function(obj, type, capture) {
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(obj)) {
    return obj.getListeners(type, capture);
  } else {
    return goog.events.getListeners_(obj, type, capture) || [];
  }
};
goog.events.getListeners_ = function(obj, type, capture) {
  var map = goog.events.listenerTree_;
  if (type in map) {
    map = map[type];
    if (capture in map) {
      map = map[capture];
      var objUid = goog.getUid(obj);
      if (map[objUid]) {
        return map[objUid];
      }
    }
  }
  return null;
};
goog.events.getListener = function(src, type, listener, opt_capt, opt_handler) {
  var capture = !!opt_capt;
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    return src.getListener((type), goog.events.wrapListener_(listener), capture, opt_handler);
  }
  var listenerArray = goog.events.getListeners_(src, type, capture);
  if (listenerArray) {
    for (var i = 0;i < listenerArray.length;i++) {
      if (!listenerArray[i].removed && (listenerArray[i].listener == listener && (listenerArray[i].capture == capture && listenerArray[i].handler == opt_handler))) {
        return listenerArray[i];
      }
    }
  }
  return null;
};
goog.events.hasListener = function(obj, opt_type, opt_capture) {
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(obj)) {
    return obj.hasListener(opt_type, opt_capture);
  }
  var objUid = goog.getUid(obj);
  var listeners = goog.events.sources_[objUid];
  if (listeners) {
    var hasType = goog.isDef(opt_type);
    var hasCapture = goog.isDef(opt_capture);
    if (hasType && hasCapture) {
      var map = goog.events.listenerTree_[opt_type];
      return!!map && (!!map[opt_capture] && objUid in map[opt_capture]);
    } else {
      if (!(hasType || hasCapture)) {
        return true;
      } else {
        return goog.array.some(listeners, function(listener) {
          return hasType && listener.type == opt_type || hasCapture && listener.capture == opt_capture;
        });
      }
    }
  }
  return false;
};
goog.events.expose = function(e) {
  var str = [];
  for (var key in e) {
    if (e[key] && e[key].id) {
      str.push(key + " \x3d " + e[key] + " (" + e[key].id + ")");
    } else {
      str.push(key + " \x3d " + e[key]);
    }
  }
  return str.join("\n");
};
goog.events.getOnString_ = function(type) {
  if (type in goog.events.onStringMap_) {
    return goog.events.onStringMap_[type];
  }
  return goog.events.onStringMap_[type] = goog.events.onString_ + type;
};
goog.events.fireListeners = function(obj, type, capture, eventObject) {
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(obj)) {
    return obj.fireListeners(type, capture, eventObject);
  }
  var map = goog.events.listenerTree_;
  if (type in map) {
    map = map[type];
    if (capture in map) {
      return goog.events.fireListeners_(map[capture], obj, type, capture, eventObject);
    }
  }
  return true;
};
goog.events.fireListeners_ = function(map, obj, type, capture, eventObject) {
  var retval = 1;
  var objUid = goog.getUid(obj);
  if (map[objUid]) {
    var remaining = --map.remaining_;
    var listenerArray = map[objUid];
    if (!listenerArray.locked_) {
      listenerArray.locked_ = 1;
    } else {
      listenerArray.locked_++;
    }
    try {
      var length = listenerArray.length;
      for (var i = 0;i < length;i++) {
        var listener = listenerArray[i];
        if (listener && !listener.removed) {
          retval &= goog.events.fireListener(listener, eventObject) !== false;
        }
      }
    } finally {
      map.remaining_ = Math.max(remaining, map.remaining_);
      listenerArray.locked_--;
      goog.events.cleanUp_(type, capture, objUid, listenerArray);
    }
  }
  return Boolean(retval);
};
goog.events.fireListener = function(listener, eventObject) {
  if (listener.callOnce) {
    goog.events.unlistenByKey(listener.key);
  }
  return listener.handleEvent(eventObject);
};
goog.events.getTotalListenerCount = function() {
  return goog.object.getCount(goog.events.listeners_);
};
goog.events.dispatchEvent = function(src, e) {
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
    return src.dispatchEvent(e);
  }
  var type = e.type || e;
  var map = goog.events.listenerTree_;
  if (!(type in map)) {
    return true;
  }
  if (goog.isString(e)) {
    e = new goog.events.Event(e, src);
  } else {
    if (!(e instanceof goog.events.Event)) {
      var oldEvent = e;
      e = new goog.events.Event((type), src);
      goog.object.extend(e, oldEvent);
    } else {
      e.target = e.target || src;
    }
  }
  var rv = 1, ancestors;
  map = map[type];
  var hasCapture = true in map;
  var targetsMap;
  if (hasCapture) {
    ancestors = [];
    for (var parent = src;parent;parent = parent.getParentEventTarget()) {
      ancestors.push(parent);
    }
    targetsMap = map[true];
    targetsMap.remaining_ = targetsMap.count_;
    for (var i = ancestors.length - 1;!e.propagationStopped_ && (i >= 0 && targetsMap.remaining_);i--) {
      e.currentTarget = ancestors[i];
      rv &= goog.events.fireListeners_(targetsMap, ancestors[i], e.type, true, e) && e.returnValue_ != false;
    }
  }
  var hasBubble = false in map;
  if (hasBubble) {
    targetsMap = map[false];
    targetsMap.remaining_ = targetsMap.count_;
    if (hasCapture) {
      for (var i = 0;!e.propagationStopped_ && (i < ancestors.length && targetsMap.remaining_);i++) {
        e.currentTarget = ancestors[i];
        rv &= goog.events.fireListeners_(targetsMap, ancestors[i], e.type, false, e) && e.returnValue_ != false;
      }
    } else {
      for (var current = src;!e.propagationStopped_ && (current && targetsMap.remaining_);current = current.getParentEventTarget()) {
        e.currentTarget = current;
        rv &= goog.events.fireListeners_(targetsMap, current, e.type, false, e) && e.returnValue_ != false;
      }
    }
  }
  return Boolean(rv);
};
goog.events.protectBrowserEventEntryPoint = function(errorHandler) {
  goog.events.handleBrowserEvent_ = errorHandler.protectEntryPoint(goog.events.handleBrowserEvent_);
};
goog.events.handleBrowserEvent_ = function(listener, opt_evt) {
  if (listener.removed) {
    return true;
  }
  var type = listener.type;
  var map = goog.events.listenerTree_;
  if (!(type in map)) {
    return true;
  }
  map = map[type];
  var retval, targetsMap;
  if (!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    var ieEvent = opt_evt || (goog.getObjectByName("window.event"));
    var hasCapture = true in map;
    var hasBubble = false in map;
    if (hasCapture) {
      if (goog.events.isMarkedIeEvent_(ieEvent)) {
        return true;
      }
      goog.events.markIeEvent_(ieEvent);
    }
    var evt = new goog.events.BrowserEvent;
    evt.init(ieEvent, (this));
    retval = true;
    try {
      if (hasCapture) {
        var ancestors = [];
        for (var parent = evt.currentTarget;parent;parent = parent.parentNode) {
          ancestors.push(parent);
        }
        targetsMap = map[true];
        targetsMap.remaining_ = targetsMap.count_;
        for (var i = ancestors.length - 1;!evt.propagationStopped_ && (i >= 0 && targetsMap.remaining_);i--) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(targetsMap, ancestors[i], type, true, evt);
        }
        if (hasBubble) {
          targetsMap = map[false];
          targetsMap.remaining_ = targetsMap.count_;
          for (var i = 0;!evt.propagationStopped_ && (i < ancestors.length && targetsMap.remaining_);i++) {
            evt.currentTarget = ancestors[i];
            retval &= goog.events.fireListeners_(targetsMap, ancestors[i], type, false, evt);
          }
        }
      } else {
        retval = goog.events.fireListener(listener, evt);
      }
    } finally {
      if (ancestors) {
        ancestors.length = 0;
      }
    }
    return retval;
  }
  var be = new goog.events.BrowserEvent(opt_evt, (this));
  retval = goog.events.fireListener(listener, be);
  return retval;
};
goog.events.markIeEvent_ = function(e) {
  var useReturnValue = false;
  if (e.keyCode == 0) {
    try {
      e.keyCode = -1;
      return;
    } catch (ex) {
      useReturnValue = true;
    }
  }
  if (useReturnValue || (e.returnValue) == undefined) {
    e.returnValue = true;
  }
};
goog.events.isMarkedIeEvent_ = function(e) {
  return e.keyCode < 0 || e.returnValue != undefined;
};
goog.events.uniqueIdCounter_ = 0;
goog.events.getUniqueId = function(identifier) {
  return identifier + "_" + goog.events.uniqueIdCounter_++;
};
goog.events.LISTENER_WRAPPER_PROP_ = "__closure_events_fn_" + (Math.random() * 1E9 >>> 0);
goog.events.wrapListener_ = function(listener) {
  if (goog.isFunction(listener)) {
    return listener;
  }
  return listener[goog.events.LISTENER_WRAPPER_PROP_] || (listener[goog.events.LISTENER_WRAPPER_PROP_] = function(e) {
    return listener.handleEvent(e);
  });
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.events.handleBrowserEvent_ = transformer(goog.events.handleBrowserEvent_);
});
goog.provide("goog.events.EventTarget");
goog.require("goog.Disposable");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.Listenable");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.events.EventTarget = function() {
  goog.Disposable.call(this);
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
    this.eventTargetListeners_ = {};
    this.reallyDisposed_ = false;
    this.actualEventTarget_ = this;
  }
};
goog.inherits(goog.events.EventTarget, goog.Disposable);
if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
  goog.events.Listenable.addImplementation(goog.events.EventTarget);
}
goog.events.EventTarget.MAX_ANCESTORS_ = 1E3;
goog.events.EventTarget.prototype.customEvent_ = true;
goog.events.EventTarget.prototype.parentEventTarget_ = null;
goog.events.EventTarget.prototype.getParentEventTarget = function() {
  return this.parentEventTarget_;
};
goog.events.EventTarget.prototype.setParentEventTarget = function(parent) {
  this.parentEventTarget_ = parent;
};
goog.events.EventTarget.prototype.addEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.listen(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.removeEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.unlisten(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.dispatchEvent = function(e) {
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
    if (this.reallyDisposed_) {
      return true;
    }
    var ancestorsTree, ancestor = this.getParentEventTarget();
    if (ancestor) {
      ancestorsTree = [];
      var ancestorCount = 1;
      for (;ancestor;ancestor = ancestor.getParentEventTarget()) {
        ancestorsTree.push(ancestor);
        goog.asserts.assert(++ancestorCount < goog.events.EventTarget.MAX_ANCESTORS_, "infinite loop");
      }
    }
    return goog.events.EventTarget.dispatchEventInternal_(this.actualEventTarget_, e, ancestorsTree);
  } else {
    return goog.events.dispatchEvent(this, e);
  }
};
goog.events.EventTarget.prototype.disposeInternal = function() {
  goog.events.EventTarget.superClass_.disposeInternal.call(this);
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
    this.removeAllListeners();
    this.reallyDisposed_ = true;
  } else {
    goog.events.removeAll(this);
  }
  this.parentEventTarget_ = null;
};
if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
  goog.events.EventTarget.prototype.listen = function(type, listener, opt_useCapture, opt_listenerScope) {
    return this.listenInternal_(type, listener, false, opt_useCapture, opt_listenerScope);
  };
  goog.events.EventTarget.prototype.listenOnce = function(type, listener, opt_useCapture, opt_listenerScope) {
    return this.listenInternal_(type, listener, true, opt_useCapture, opt_listenerScope);
  };
  goog.events.EventTarget.prototype.listenInternal_ = function(type, listener, callOnce, opt_useCapture, opt_listenerScope) {
    goog.asserts.assert(!this.reallyDisposed_, "Can not listen on disposed object.");
    var listenerArray = this.eventTargetListeners_[type] || (this.eventTargetListeners_[type] = []);
    var listenerObj;
    var index = goog.events.EventTarget.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
    if (index > -1) {
      listenerObj = listenerArray[index];
      if (!callOnce) {
        listenerObj.callOnce = false;
      }
      return listenerObj;
    }
    listenerObj = new goog.events.Listener;
    listenerObj.init(listener, null, this, type, !!opt_useCapture, opt_listenerScope);
    listenerObj.callOnce = callOnce;
    listenerArray.push(listenerObj);
    return listenerObj;
  };
  goog.events.EventTarget.prototype.unlisten = function(type, listener, opt_useCapture, opt_listenerScope) {
    if (!(type in this.eventTargetListeners_)) {
      return false;
    }
    var listenerArray = this.eventTargetListeners_[type];
    var index = goog.events.EventTarget.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
    if (index > -1) {
      var listenerObj = listenerArray[index];
      goog.events.cleanUp(listenerObj);
      listenerObj.removed = true;
      return goog.array.removeAt(listenerArray, index);
    }
    return false;
  };
  goog.events.EventTarget.prototype.unlistenByKey = function(key) {
    var type = key.type;
    if (!(type in this.eventTargetListeners_)) {
      return false;
    }
    var removed = goog.array.remove(this.eventTargetListeners_[type], key);
    if (removed) {
      goog.events.cleanUp(key);
      key.removed = true;
    }
    return removed;
  };
  goog.events.EventTarget.prototype.removeAllListeners = function(opt_type, opt_capture) {
    var count = 0;
    for (var type in this.eventTargetListeners_) {
      if (!opt_type || type == opt_type) {
        var listenerArray = this.eventTargetListeners_[type];
        for (var i = 0;i < listenerArray.length;i++) {
          ++count;
          goog.events.cleanUp(listenerArray[i]);
          listenerArray[i].removed = true;
        }
        listenerArray.length = 0;
      }
    }
    return count;
  };
  goog.events.EventTarget.prototype.fireListeners = function(type, capture, eventObject) {
    goog.asserts.assert(!this.reallyDisposed_, "Can not fire listeners after dispose() completed.");
    if (!(type in this.eventTargetListeners_)) {
      return true;
    }
    var rv = true;
    var listenerArray = goog.array.clone(this.eventTargetListeners_[type]);
    for (var i = 0;i < listenerArray.length;++i) {
      var listener = listenerArray[i];
      if (listener && (!listener.removed && listener.capture == capture)) {
        if (listener.callOnce) {
          this.unlistenByKey(listener);
        }
        rv = listener.handleEvent(eventObject) !== false && rv;
      }
    }
    return rv && eventObject.returnValue_ != false;
  };
  goog.events.EventTarget.prototype.getListeners = function(type, capture) {
    var listenerArray = this.eventTargetListeners_[type];
    var rv = [];
    if (listenerArray) {
      for (var i = 0;i < listenerArray.length;++i) {
        var listenerObj = listenerArray[i];
        if (listenerObj.capture == capture) {
          rv.push(listenerObj);
        }
      }
    }
    return rv;
  };
  goog.events.EventTarget.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
    var listenerArray = this.eventTargetListeners_[type];
    var i = -1;
    if (listenerArray) {
      i = goog.events.EventTarget.findListenerIndex_(listenerArray, listener, capture, opt_listenerScope);
    }
    return i > -1 ? listenerArray[i] : null;
  };
  goog.events.EventTarget.prototype.hasListener = function(opt_type, opt_capture) {
    var hasType = goog.isDef(opt_type);
    var hasCapture = goog.isDef(opt_capture);
    return goog.object.some(this.eventTargetListeners_, function(listenersArray, type) {
      for (var i = 0;i < listenersArray.length;++i) {
        if ((!hasType || listenersArray[i].type == opt_type) && (!hasCapture || listenersArray[i].capture == opt_capture)) {
          return true;
        }
      }
      return false;
    });
  };
  goog.events.EventTarget.prototype.setTargetForTesting = function(target) {
    this.actualEventTarget_ = target;
  };
  goog.events.EventTarget.dispatchEventInternal_ = function(target, e, opt_ancestorsTree) {
    var type = e.type || (e);
    if (goog.isString(e)) {
      e = new goog.events.Event(e, target);
    } else {
      if (!(e instanceof goog.events.Event)) {
        var oldEvent = e;
        e = new goog.events.Event(type, target);
        goog.object.extend(e, oldEvent);
      } else {
        e.target = e.target || target;
      }
    }
    var rv = true, currentTarget;
    if (opt_ancestorsTree) {
      for (var i = opt_ancestorsTree.length - 1;!e.propagationStopped_ && i >= 0;i--) {
        currentTarget = e.currentTarget = opt_ancestorsTree[i];
        rv = currentTarget.fireListeners(type, true, e) && rv;
      }
    }
    if (!e.propagationStopped_) {
      currentTarget = e.currentTarget = target;
      rv = currentTarget.fireListeners(type, true, e) && rv;
      if (!e.propagationStopped_) {
        rv = currentTarget.fireListeners(type, false, e) && rv;
      }
    }
    if (opt_ancestorsTree) {
      for (i = 0;!e.propagationStopped_ && i < opt_ancestorsTree.length;i++) {
        currentTarget = e.currentTarget = opt_ancestorsTree[i];
        rv = currentTarget.fireListeners(type, false, e) && rv;
      }
    }
    return rv;
  };
  goog.events.EventTarget.findListenerIndex_ = function(listenerArray, listener, opt_useCapture, opt_listenerScope) {
    for (var i = 0;i < listenerArray.length;++i) {
      var listenerObj = listenerArray[i];
      if (listenerObj.listener == listener && (listenerObj.capture == !!opt_useCapture && listenerObj.handler == opt_listenerScope)) {
        return i;
      }
    }
    return-1;
  };
}
;goog.provide("goog.Timer");
goog.require("goog.events.EventTarget");
goog.Timer = function(opt_interval, opt_timerObject) {
  goog.events.EventTarget.call(this);
  this.interval_ = opt_interval || 1;
  this.timerObject_ = opt_timerObject || goog.Timer.defaultTimerObject;
  this.boundTick_ = goog.bind(this.tick_, this);
  this.last_ = goog.now();
};
goog.inherits(goog.Timer, goog.events.EventTarget);
goog.Timer.MAX_TIMEOUT_ = 2147483647;
goog.Timer.prototype.enabled = false;
goog.Timer.defaultTimerObject = goog.global;
goog.Timer.intervalScale = 0.8;
goog.Timer.prototype.timer_ = null;
goog.Timer.prototype.getInterval = function() {
  return this.interval_;
};
goog.Timer.prototype.setInterval = function(interval) {
  this.interval_ = interval;
  if (this.timer_ && this.enabled) {
    this.stop();
    this.start();
  } else {
    if (this.timer_) {
      this.stop();
    }
  }
};
goog.Timer.prototype.tick_ = function() {
  if (this.enabled) {
    var elapsed = goog.now() - this.last_;
    if (elapsed > 0 && elapsed < this.interval_ * goog.Timer.intervalScale) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_ - elapsed);
      return;
    }
    this.dispatchTick();
    if (this.enabled) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
      this.last_ = goog.now();
    }
  }
};
goog.Timer.prototype.dispatchTick = function() {
  this.dispatchEvent(goog.Timer.TICK);
};
goog.Timer.prototype.start = function() {
  this.enabled = true;
  if (!this.timer_) {
    this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
    this.last_ = goog.now();
  }
};
goog.Timer.prototype.stop = function() {
  this.enabled = false;
  if (this.timer_) {
    this.timerObject_.clearTimeout(this.timer_);
    this.timer_ = null;
  }
};
goog.Timer.prototype.disposeInternal = function() {
  goog.Timer.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.timerObject_;
};
goog.Timer.TICK = "tick";
goog.Timer.callOnce = function(listener, opt_delay, opt_handler) {
  if (goog.isFunction(listener)) {
    if (opt_handler) {
      listener = goog.bind(listener, opt_handler);
    }
  } else {
    if (listener && typeof listener.handleEvent == "function") {
      listener = goog.bind(listener.handleEvent, listener);
    } else {
      throw Error("Invalid listener argument");
    }
  }
  if (opt_delay > goog.Timer.MAX_TIMEOUT_) {
    return-1;
  } else {
    return goog.Timer.defaultTimerObject.setTimeout(listener, opt_delay || 0);
  }
};
goog.Timer.clear = function(timerId) {
  goog.Timer.defaultTimerObject.clearTimeout(timerId);
};
goog.provide("goog.structs.Collection");
goog.structs.Collection = function() {
};
goog.structs.Collection.prototype.add;
goog.structs.Collection.prototype.remove;
goog.structs.Collection.prototype.contains;
goog.structs.Collection.prototype.getCount;
goog.provide("goog.structs.Set");
goog.require("goog.structs");
goog.require("goog.structs.Collection");
goog.require("goog.structs.Map");
goog.structs.Set = function(opt_values) {
  this.map_ = new goog.structs.Map;
  if (opt_values) {
    this.addAll(opt_values);
  }
};
goog.structs.Set.getKey_ = function(val) {
  var type = typeof val;
  if (type == "object" && val || type == "function") {
    return "o" + goog.getUid((val));
  } else {
    return type.substr(0, 1) + val;
  }
};
goog.structs.Set.prototype.getCount = function() {
  return this.map_.getCount();
};
goog.structs.Set.prototype.add = function(element) {
  this.map_.set(goog.structs.Set.getKey_(element), element);
};
goog.structs.Set.prototype.addAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.add(values[i]);
  }
};
goog.structs.Set.prototype.removeAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.remove(values[i]);
  }
};
goog.structs.Set.prototype.remove = function(element) {
  return this.map_.remove(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.clear = function() {
  this.map_.clear();
};
goog.structs.Set.prototype.isEmpty = function() {
  return this.map_.isEmpty();
};
goog.structs.Set.prototype.contains = function(element) {
  return this.map_.containsKey(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.containsAll = function(col) {
  return goog.structs.every(col, this.contains, this);
};
goog.structs.Set.prototype.intersection = function(col) {
  var result = new goog.structs.Set;
  var values = goog.structs.getValues(col);
  for (var i = 0;i < values.length;i++) {
    var value = values[i];
    if (this.contains(value)) {
      result.add(value);
    }
  }
  return result;
};
goog.structs.Set.prototype.difference = function(col) {
  var result = this.clone();
  result.removeAll(col);
  return result;
};
goog.structs.Set.prototype.getValues = function() {
  return this.map_.getValues();
};
goog.structs.Set.prototype.clone = function() {
  return new goog.structs.Set(this);
};
goog.structs.Set.prototype.equals = function(col) {
  return this.getCount() == goog.structs.getCount(col) && this.isSubsetOf(col);
};
goog.structs.Set.prototype.isSubsetOf = function(col) {
  var colCount = goog.structs.getCount(col);
  if (this.getCount() > colCount) {
    return false;
  }
  if (!(col instanceof goog.structs.Set) && colCount > 5) {
    col = new goog.structs.Set(col);
  }
  return goog.structs.every(this, function(value) {
    return goog.structs.contains(col, value);
  });
};
goog.structs.Set.prototype.__iterator__ = function(opt_keys) {
  return this.map_.__iterator__(false);
};
goog.provide("goog.debug");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs.Set");
goog.require("goog.userAgent");
goog.debug.catchErrors = function(logFunc, opt_cancel, opt_target) {
  var target = opt_target || goog.global;
  var oldErrorHandler = target.onerror;
  var retVal = !!opt_cancel;
  if (goog.userAgent.WEBKIT && !goog.userAgent.isVersion("535.3")) {
    retVal = !retVal;
  }
  target.onerror = function(message, url, line) {
    if (oldErrorHandler) {
      oldErrorHandler(message, url, line);
    }
    logFunc({message:message, fileName:url, line:line});
    return retVal;
  };
};
goog.debug.expose = function(obj, opt_showFn) {
  if (typeof obj == "undefined") {
    return "undefined";
  }
  if (obj == null) {
    return "NULL";
  }
  var str = [];
  for (var x in obj) {
    if (!opt_showFn && goog.isFunction(obj[x])) {
      continue;
    }
    var s = x + " \x3d ";
    try {
      s += obj[x];
    } catch (e) {
      s += "*** " + e + " ***";
    }
    str.push(s);
  }
  return str.join("\n");
};
goog.debug.deepExpose = function(obj, opt_showFn) {
  var previous = new goog.structs.Set;
  var str = [];
  var helper = function(obj, space) {
    var nestspace = space + "  ";
    var indentMultiline = function(str) {
      return str.replace(/\n/g, "\n" + space);
    };
    try {
      if (!goog.isDef(obj)) {
        str.push("undefined");
      } else {
        if (goog.isNull(obj)) {
          str.push("NULL");
        } else {
          if (goog.isString(obj)) {
            str.push('"' + indentMultiline(obj) + '"');
          } else {
            if (goog.isFunction(obj)) {
              str.push(indentMultiline(String(obj)));
            } else {
              if (goog.isObject(obj)) {
                if (previous.contains(obj)) {
                  str.push("*** reference loop detected ***");
                } else {
                  previous.add(obj);
                  str.push("{");
                  for (var x in obj) {
                    if (!opt_showFn && goog.isFunction(obj[x])) {
                      continue;
                    }
                    str.push("\n");
                    str.push(nestspace);
                    str.push(x + " \x3d ");
                    helper(obj[x], nestspace);
                  }
                  str.push("\n" + space + "}");
                }
              } else {
                str.push(obj);
              }
            }
          }
        }
      }
    } catch (e) {
      str.push("*** " + e + " ***");
    }
  };
  helper(obj, "");
  return str.join("");
};
goog.debug.exposeArray = function(arr) {
  var str = [];
  for (var i = 0;i < arr.length;i++) {
    if (goog.isArray(arr[i])) {
      str.push(goog.debug.exposeArray(arr[i]));
    } else {
      str.push(arr[i]);
    }
  }
  return "[ " + str.join(", ") + " ]";
};
goog.debug.exposeException = function(err, opt_fn) {
  try {
    var e = goog.debug.normalizeErrorObject(err);
    var error = "Message: " + goog.string.htmlEscape(e.message) + '\nUrl: \x3ca href\x3d"view-source:' + e.fileName + '" target\x3d"_new"\x3e' + e.fileName + "\x3c/a\x3e\nLine: " + e.lineNumber + "\n\nBrowser stack:\n" + goog.string.htmlEscape(e.stack + "-\x3e ") + "[end]\n\nJS stack traversal:\n" + goog.string.htmlEscape(goog.debug.getStacktrace(opt_fn) + "-\x3e ");
    return error;
  } catch (e2) {
    return "Exception trying to expose exception! You win, we lose. " + e2;
  }
};
goog.debug.normalizeErrorObject = function(err) {
  var href = goog.getObjectByName("window.location.href");
  if (goog.isString(err)) {
    return{"message":err, "name":"Unknown error", "lineNumber":"Not available", "fileName":href, "stack":"Not available"};
  }
  var lineNumber, fileName;
  var threwError = false;
  try {
    lineNumber = err.lineNumber || (err.line || "Not available");
  } catch (e) {
    lineNumber = "Not available";
    threwError = true;
  }
  try {
    fileName = err.fileName || (err.filename || (err.sourceURL || (goog.global["$googDebugFname"] || href)));
  } catch (e) {
    fileName = "Not available";
    threwError = true;
  }
  if (threwError || (!err.lineNumber || (!err.fileName || !err.stack))) {
    return{"message":err.message, "name":err.name, "lineNumber":lineNumber, "fileName":fileName, "stack":err.stack || "Not available"};
  }
  return err;
};
goog.debug.enhanceError = function(err, opt_message) {
  var error = typeof err == "string" ? Error(err) : err;
  if (!error.stack) {
    error.stack = goog.debug.getStacktrace(arguments.callee.caller);
  }
  if (opt_message) {
    var x = 0;
    while (error["message" + x]) {
      ++x;
    }
    error["message" + x] = String(opt_message);
  }
  return error;
};
goog.debug.getStacktraceSimple = function(opt_depth) {
  var sb = [];
  var fn = arguments.callee.caller;
  var depth = 0;
  while (fn && (!opt_depth || depth < opt_depth)) {
    sb.push(goog.debug.getFunctionName(fn));
    sb.push("()\n");
    try {
      fn = fn.caller;
    } catch (e) {
      sb.push("[exception trying to get caller]\n");
      break;
    }
    depth++;
    if (depth >= goog.debug.MAX_STACK_DEPTH) {
      sb.push("[...long stack...]");
      break;
    }
  }
  if (opt_depth && depth >= opt_depth) {
    sb.push("[...reached max depth limit...]");
  } else {
    sb.push("[end]");
  }
  return sb.join("");
};
goog.debug.MAX_STACK_DEPTH = 50;
goog.debug.getStacktrace = function(opt_fn) {
  return goog.debug.getStacktraceHelper_(opt_fn || arguments.callee.caller, []);
};
goog.debug.getStacktraceHelper_ = function(fn, visited) {
  var sb = [];
  if (goog.array.contains(visited, fn)) {
    sb.push("[...circular reference...]");
  } else {
    if (fn && visited.length < goog.debug.MAX_STACK_DEPTH) {
      sb.push(goog.debug.getFunctionName(fn) + "(");
      var args = fn.arguments;
      for (var i = 0;i < args.length;i++) {
        if (i > 0) {
          sb.push(", ");
        }
        var argDesc;
        var arg = args[i];
        switch(typeof arg) {
          case "object":
            argDesc = arg ? "object" : "null";
            break;
          case "string":
            argDesc = arg;
            break;
          case "number":
            argDesc = String(arg);
            break;
          case "boolean":
            argDesc = arg ? "true" : "false";
            break;
          case "function":
            argDesc = goog.debug.getFunctionName(arg);
            argDesc = argDesc ? argDesc : "[fn]";
            break;
          case "undefined":
          ;
          default:
            argDesc = typeof arg;
            break;
        }
        if (argDesc.length > 40) {
          argDesc = argDesc.substr(0, 40) + "...";
        }
        sb.push(argDesc);
      }
      visited.push(fn);
      sb.push(")\n");
      try {
        sb.push(goog.debug.getStacktraceHelper_(fn.caller, visited));
      } catch (e) {
        sb.push("[exception trying to get caller]\n");
      }
    } else {
      if (fn) {
        sb.push("[...long stack...]");
      } else {
        sb.push("[end]");
      }
    }
  }
  return sb.join("");
};
goog.debug.setFunctionResolver = function(resolver) {
  goog.debug.fnNameResolver_ = resolver;
};
goog.debug.getFunctionName = function(fn) {
  if (goog.debug.fnNameCache_[fn]) {
    return goog.debug.fnNameCache_[fn];
  }
  if (goog.debug.fnNameResolver_) {
    var name = goog.debug.fnNameResolver_(fn);
    if (name) {
      goog.debug.fnNameCache_[fn] = name;
      return name;
    }
  }
  var functionSource = String(fn);
  if (!goog.debug.fnNameCache_[functionSource]) {
    var matches = /function ([^\(]+)/.exec(functionSource);
    if (matches) {
      var method = matches[1];
      goog.debug.fnNameCache_[functionSource] = method;
    } else {
      goog.debug.fnNameCache_[functionSource] = "[Anonymous]";
    }
  }
  return goog.debug.fnNameCache_[functionSource];
};
goog.debug.makeWhitespaceVisible = function(string) {
  return string.replace(/ /g, "[_]").replace(/\f/g, "[f]").replace(/\n/g, "[n]\n").replace(/\r/g, "[r]").replace(/\t/g, "[t]");
};
goog.debug.fnNameCache_ = {};
goog.debug.fnNameResolver_;
goog.provide("goog.debug.LogRecord");
goog.debug.LogRecord = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  this.reset(level, msg, loggerName, opt_time, opt_sequenceNumber);
};
goog.debug.LogRecord.prototype.time_;
goog.debug.LogRecord.prototype.level_;
goog.debug.LogRecord.prototype.msg_;
goog.debug.LogRecord.prototype.loggerName_;
goog.debug.LogRecord.prototype.sequenceNumber_ = 0;
goog.debug.LogRecord.prototype.exception_ = null;
goog.debug.LogRecord.prototype.exceptionText_ = null;
goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS = true;
goog.debug.LogRecord.nextSequenceNumber_ = 0;
goog.debug.LogRecord.prototype.reset = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  if (goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS) {
    this.sequenceNumber_ = typeof opt_sequenceNumber == "number" ? opt_sequenceNumber : goog.debug.LogRecord.nextSequenceNumber_++;
  }
  this.time_ = opt_time || goog.now();
  this.level_ = level;
  this.msg_ = msg;
  this.loggerName_ = loggerName;
  delete this.exception_;
  delete this.exceptionText_;
};
goog.debug.LogRecord.prototype.getLoggerName = function() {
  return this.loggerName_;
};
goog.debug.LogRecord.prototype.getException = function() {
  return this.exception_;
};
goog.debug.LogRecord.prototype.setException = function(exception) {
  this.exception_ = exception;
};
goog.debug.LogRecord.prototype.getExceptionText = function() {
  return this.exceptionText_;
};
goog.debug.LogRecord.prototype.setExceptionText = function(text) {
  this.exceptionText_ = text;
};
goog.debug.LogRecord.prototype.setLoggerName = function(loggerName) {
  this.loggerName_ = loggerName;
};
goog.debug.LogRecord.prototype.getLevel = function() {
  return this.level_;
};
goog.debug.LogRecord.prototype.setLevel = function(level) {
  this.level_ = level;
};
goog.debug.LogRecord.prototype.getMessage = function() {
  return this.msg_;
};
goog.debug.LogRecord.prototype.setMessage = function(msg) {
  this.msg_ = msg;
};
goog.debug.LogRecord.prototype.getMillis = function() {
  return this.time_;
};
goog.debug.LogRecord.prototype.setMillis = function(time) {
  this.time_ = time;
};
goog.debug.LogRecord.prototype.getSequenceNumber = function() {
  return this.sequenceNumber_;
};
goog.provide("goog.debug.LogBuffer");
goog.require("goog.asserts");
goog.require("goog.debug.LogRecord");
goog.debug.LogBuffer = function() {
  goog.asserts.assert(goog.debug.LogBuffer.isBufferingEnabled(), "Cannot use goog.debug.LogBuffer without defining " + "goog.debug.LogBuffer.CAPACITY.");
  this.clear();
};
goog.debug.LogBuffer.getInstance = function() {
  if (!goog.debug.LogBuffer.instance_) {
    goog.debug.LogBuffer.instance_ = new goog.debug.LogBuffer;
  }
  return goog.debug.LogBuffer.instance_;
};
goog.debug.LogBuffer.CAPACITY = 0;
goog.debug.LogBuffer.prototype.buffer_;
goog.debug.LogBuffer.prototype.curIndex_;
goog.debug.LogBuffer.prototype.isFull_;
goog.debug.LogBuffer.prototype.addRecord = function(level, msg, loggerName) {
  var curIndex = (this.curIndex_ + 1) % goog.debug.LogBuffer.CAPACITY;
  this.curIndex_ = curIndex;
  if (this.isFull_) {
    var ret = this.buffer_[curIndex];
    ret.reset(level, msg, loggerName);
    return ret;
  }
  this.isFull_ = curIndex == goog.debug.LogBuffer.CAPACITY - 1;
  return this.buffer_[curIndex] = new goog.debug.LogRecord(level, msg, loggerName);
};
goog.debug.LogBuffer.isBufferingEnabled = function() {
  return goog.debug.LogBuffer.CAPACITY > 0;
};
goog.debug.LogBuffer.prototype.clear = function() {
  this.buffer_ = new Array(goog.debug.LogBuffer.CAPACITY);
  this.curIndex_ = -1;
  this.isFull_ = false;
};
goog.debug.LogBuffer.prototype.forEachRecord = function(func) {
  var buffer = this.buffer_;
  if (!buffer[0]) {
    return;
  }
  var curIndex = this.curIndex_;
  var i = this.isFull_ ? curIndex : -1;
  do {
    i = (i + 1) % goog.debug.LogBuffer.CAPACITY;
    func((buffer[i]));
  } while (i != curIndex);
};
goog.provide("goog.debug.LogManager");
goog.provide("goog.debug.Logger");
goog.provide("goog.debug.Logger.Level");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug");
goog.require("goog.debug.LogBuffer");
goog.require("goog.debug.LogRecord");
goog.debug.Logger = function(name) {
  this.name_ = name;
};
goog.debug.Logger.prototype.parent_ = null;
goog.debug.Logger.prototype.level_ = null;
goog.debug.Logger.prototype.children_ = null;
goog.debug.Logger.prototype.handlers_ = null;
goog.debug.Logger.ENABLE_HIERARCHY = true;
if (!goog.debug.Logger.ENABLE_HIERARCHY) {
  goog.debug.Logger.rootHandlers_ = [];
  goog.debug.Logger.rootLevel_;
}
goog.debug.Logger.Level = function(name, value) {
  this.name = name;
  this.value = value;
};
goog.debug.Logger.Level.prototype.toString = function() {
  return this.name;
};
goog.debug.Logger.Level.OFF = new goog.debug.Logger.Level("OFF", Infinity);
goog.debug.Logger.Level.SHOUT = new goog.debug.Logger.Level("SHOUT", 1200);
goog.debug.Logger.Level.SEVERE = new goog.debug.Logger.Level("SEVERE", 1E3);
goog.debug.Logger.Level.WARNING = new goog.debug.Logger.Level("WARNING", 900);
goog.debug.Logger.Level.INFO = new goog.debug.Logger.Level("INFO", 800);
goog.debug.Logger.Level.CONFIG = new goog.debug.Logger.Level("CONFIG", 700);
goog.debug.Logger.Level.FINE = new goog.debug.Logger.Level("FINE", 500);
goog.debug.Logger.Level.FINER = new goog.debug.Logger.Level("FINER", 400);
goog.debug.Logger.Level.FINEST = new goog.debug.Logger.Level("FINEST", 300);
goog.debug.Logger.Level.ALL = new goog.debug.Logger.Level("ALL", 0);
goog.debug.Logger.Level.PREDEFINED_LEVELS = [goog.debug.Logger.Level.OFF, goog.debug.Logger.Level.SHOUT, goog.debug.Logger.Level.SEVERE, goog.debug.Logger.Level.WARNING, goog.debug.Logger.Level.INFO, goog.debug.Logger.Level.CONFIG, goog.debug.Logger.Level.FINE, goog.debug.Logger.Level.FINER, goog.debug.Logger.Level.FINEST, goog.debug.Logger.Level.ALL];
goog.debug.Logger.Level.predefinedLevelsCache_ = null;
goog.debug.Logger.Level.createPredefinedLevelsCache_ = function() {
  goog.debug.Logger.Level.predefinedLevelsCache_ = {};
  for (var i = 0, level;level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];i++) {
    goog.debug.Logger.Level.predefinedLevelsCache_[level.value] = level;
    goog.debug.Logger.Level.predefinedLevelsCache_[level.name] = level;
  }
};
goog.debug.Logger.Level.getPredefinedLevel = function(name) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  return goog.debug.Logger.Level.predefinedLevelsCache_[name] || null;
};
goog.debug.Logger.Level.getPredefinedLevelByValue = function(value) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  if (value in goog.debug.Logger.Level.predefinedLevelsCache_) {
    return goog.debug.Logger.Level.predefinedLevelsCache_[value];
  }
  for (var i = 0;i < goog.debug.Logger.Level.PREDEFINED_LEVELS.length;++i) {
    var level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];
    if (level.value <= value) {
      return level;
    }
  }
  return null;
};
goog.debug.Logger.getLogger = function(name) {
  return goog.debug.LogManager.getLogger(name);
};
goog.debug.Logger.logToProfilers = function(msg) {
  if (goog.global["console"]) {
    if (goog.global["console"]["timeStamp"]) {
      goog.global["console"]["timeStamp"](msg);
    } else {
      if (goog.global["console"]["markTimeline"]) {
        goog.global["console"]["markTimeline"](msg);
      }
    }
  }
  if (goog.global["msWriteProfilerMark"]) {
    goog.global["msWriteProfilerMark"](msg);
  }
};
goog.debug.Logger.prototype.getName = function() {
  return this.name_;
};
goog.debug.Logger.prototype.addHandler = function(handler) {
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    if (!this.handlers_) {
      this.handlers_ = [];
    }
    this.handlers_.push(handler);
  } else {
    goog.asserts.assert(!this.name_, "Cannot call addHandler on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
    goog.debug.Logger.rootHandlers_.push(handler);
  }
};
goog.debug.Logger.prototype.removeHandler = function(handler) {
  var handlers = goog.debug.Logger.ENABLE_HIERARCHY ? this.handlers_ : goog.debug.Logger.rootHandlers_;
  return!!handlers && goog.array.remove(handlers, handler);
};
goog.debug.Logger.prototype.getParent = function() {
  return this.parent_;
};
goog.debug.Logger.prototype.getChildren = function() {
  if (!this.children_) {
    this.children_ = {};
  }
  return this.children_;
};
goog.debug.Logger.prototype.setLevel = function(level) {
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    this.level_ = level;
  } else {
    goog.asserts.assert(!this.name_, "Cannot call setLevel() on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
    goog.debug.Logger.rootLevel_ = level;
  }
};
goog.debug.Logger.prototype.getLevel = function() {
  return this.level_;
};
goog.debug.Logger.prototype.getEffectiveLevel = function() {
  if (!goog.debug.Logger.ENABLE_HIERARCHY) {
    return goog.debug.Logger.rootLevel_;
  }
  if (this.level_) {
    return this.level_;
  }
  if (this.parent_) {
    return this.parent_.getEffectiveLevel();
  }
  goog.asserts.fail("Root logger has no level set.");
  return null;
};
goog.debug.Logger.prototype.isLoggable = function(level) {
  return level.value >= this.getEffectiveLevel().value;
};
goog.debug.Logger.prototype.log = function(level, msg, opt_exception) {
  if (this.isLoggable(level)) {
    this.doLogRecord_(this.getLogRecord(level, msg, opt_exception));
  }
};
goog.debug.Logger.prototype.getLogRecord = function(level, msg, opt_exception) {
  if (goog.debug.LogBuffer.isBufferingEnabled()) {
    var logRecord = goog.debug.LogBuffer.getInstance().addRecord(level, msg, this.name_)
  } else {
    logRecord = new goog.debug.LogRecord(level, String(msg), this.name_);
  }
  if (opt_exception) {
    logRecord.setException(opt_exception);
    logRecord.setExceptionText(goog.debug.exposeException(opt_exception, arguments.callee.caller));
  }
  return logRecord;
};
goog.debug.Logger.prototype.shout = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.SHOUT, msg, opt_exception);
};
goog.debug.Logger.prototype.severe = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.SEVERE, msg, opt_exception);
};
goog.debug.Logger.prototype.warning = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.WARNING, msg, opt_exception);
};
goog.debug.Logger.prototype.info = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.INFO, msg, opt_exception);
};
goog.debug.Logger.prototype.config = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.CONFIG, msg, opt_exception);
};
goog.debug.Logger.prototype.fine = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.FINE, msg, opt_exception);
};
goog.debug.Logger.prototype.finer = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.FINER, msg, opt_exception);
};
goog.debug.Logger.prototype.finest = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.FINEST, msg, opt_exception);
};
goog.debug.Logger.prototype.logRecord = function(logRecord) {
  if (this.isLoggable(logRecord.getLevel())) {
    this.doLogRecord_(logRecord);
  }
};
goog.debug.Logger.prototype.doLogRecord_ = function(logRecord) {
  goog.debug.Logger.logToProfilers("log:" + logRecord.getMessage());
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var target = this;
    while (target) {
      target.callPublish_(logRecord);
      target = target.getParent();
    }
  } else {
    for (var i = 0, handler;handler = goog.debug.Logger.rootHandlers_[i++];) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.callPublish_ = function(logRecord) {
  if (this.handlers_) {
    for (var i = 0, handler;handler = this.handlers_[i];i++) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.setParent_ = function(parent) {
  this.parent_ = parent;
};
goog.debug.Logger.prototype.addChild_ = function(name, logger) {
  this.getChildren()[name] = logger;
};
goog.debug.LogManager = {};
goog.debug.LogManager.loggers_ = {};
goog.debug.LogManager.rootLogger_ = null;
goog.debug.LogManager.initialize = function() {
  if (!goog.debug.LogManager.rootLogger_) {
    goog.debug.LogManager.rootLogger_ = new goog.debug.Logger("");
    goog.debug.LogManager.loggers_[""] = goog.debug.LogManager.rootLogger_;
    goog.debug.LogManager.rootLogger_.setLevel(goog.debug.Logger.Level.CONFIG);
  }
};
goog.debug.LogManager.getLoggers = function() {
  return goog.debug.LogManager.loggers_;
};
goog.debug.LogManager.getRoot = function() {
  goog.debug.LogManager.initialize();
  return(goog.debug.LogManager.rootLogger_);
};
goog.debug.LogManager.getLogger = function(name) {
  goog.debug.LogManager.initialize();
  var ret = goog.debug.LogManager.loggers_[name];
  return ret || goog.debug.LogManager.createLogger_(name);
};
goog.debug.LogManager.createFunctionForCatchErrors = function(opt_logger) {
  return function(info) {
    var logger = opt_logger || goog.debug.LogManager.getRoot();
    logger.severe("Error: " + info.message + " (" + info.fileName + " @ Line: " + info.line + ")");
  };
};
goog.debug.LogManager.createLogger_ = function(name) {
  var logger = new goog.debug.Logger(name);
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var lastDotIndex = name.lastIndexOf(".");
    var parentName = name.substr(0, lastDotIndex);
    var leafName = name.substr(lastDotIndex + 1);
    var parentLogger = goog.debug.LogManager.getLogger(parentName);
    parentLogger.addChild_(leafName, logger);
    logger.setParent_(parentLogger);
  }
  goog.debug.LogManager.loggers_[name] = logger;
  return logger;
};
goog.provide("goog.json");
goog.provide("goog.json.Serializer");
goog.json.isValid_ = function(s) {
  if (/^\s*$/.test(s)) {
    return false;
  }
  var backslashesRe = /\\["\\\/bfnrtu]/g;
  var simpleValuesRe = /"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
  var openBracketsRe = /(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g;
  var remainderRe = /^[\],:{}\s\u2028\u2029]*$/;
  return remainderRe.test(s.replace(backslashesRe, "@").replace(simpleValuesRe, "]").replace(openBracketsRe, ""));
};
goog.json.parse = function(s) {
  var o = String(s);
  if (goog.json.isValid_(o)) {
    try {
      return(eval("(" + o + ")"));
    } catch (ex) {
    }
  }
  throw Error("Invalid JSON string: " + o);
};
goog.json.unsafeParse = function(s) {
  return(eval("(" + s + ")"));
};
goog.json.Replacer;
goog.json.Reviver;
goog.json.serialize = function(object, opt_replacer) {
  return(new goog.json.Serializer(opt_replacer)).serialize(object);
};
goog.json.Serializer = function(opt_replacer) {
  this.replacer_ = opt_replacer;
};
goog.json.Serializer.prototype.serialize = function(object) {
  var sb = [];
  this.serialize_(object, sb);
  return sb.join("");
};
goog.json.Serializer.prototype.serialize_ = function(object, sb) {
  switch(typeof object) {
    case "string":
      this.serializeString_((object), sb);
      break;
    case "number":
      this.serializeNumber_((object), sb);
      break;
    case "boolean":
      sb.push(object);
      break;
    case "undefined":
      sb.push("null");
      break;
    case "object":
      if (object == null) {
        sb.push("null");
        break;
      }
      if (goog.isArray(object)) {
        this.serializeArray((object), sb);
        break;
      }
      this.serializeObject_((object), sb);
      break;
    case "function":
      break;
    default:
      throw Error("Unknown type: " + typeof object);;
  }
};
goog.json.Serializer.charToJsonCharCache_ = {'"':'\\"', "\\":"\\\\", "/":"\\/", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\u000b"};
goog.json.Serializer.charsToReplace_ = /\uffff/.test("\uffff") ? /[\\\"\x00-\x1f\x7f-\uffff]/g : /[\\\"\x00-\x1f\x7f-\xff]/g;
goog.json.Serializer.prototype.serializeString_ = function(s, sb) {
  sb.push('"', s.replace(goog.json.Serializer.charsToReplace_, function(c) {
    if (c in goog.json.Serializer.charToJsonCharCache_) {
      return goog.json.Serializer.charToJsonCharCache_[c];
    }
    var cc = c.charCodeAt(0);
    var rv = "\\u";
    if (cc < 16) {
      rv += "000";
    } else {
      if (cc < 256) {
        rv += "00";
      } else {
        if (cc < 4096) {
          rv += "0";
        }
      }
    }
    return goog.json.Serializer.charToJsonCharCache_[c] = rv + cc.toString(16);
  }), '"');
};
goog.json.Serializer.prototype.serializeNumber_ = function(n, sb) {
  sb.push(isFinite(n) && !isNaN(n) ? n : "null");
};
goog.json.Serializer.prototype.serializeArray = function(arr, sb) {
  var l = arr.length;
  sb.push("[");
  var sep = "";
  for (var i = 0;i < l;i++) {
    sb.push(sep);
    var value = arr[i];
    this.serialize_(this.replacer_ ? this.replacer_.call(arr, String(i), value) : value, sb);
    sep = ",";
  }
  sb.push("]");
};
goog.json.Serializer.prototype.serializeObject_ = function(obj, sb) {
  sb.push("{");
  var sep = "";
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var value = obj[key];
      if (typeof value != "function") {
        sb.push(sep);
        this.serializeString_(key, sb);
        sb.push(":");
        this.serialize_(this.replacer_ ? this.replacer_.call(obj, key, value) : value, sb);
        sep = ",";
      }
    }
  }
  sb.push("}");
};
goog.provide("goog.net.ErrorCode");
goog.net.ErrorCode = {NO_ERROR:0, ACCESS_DENIED:1, FILE_NOT_FOUND:2, FF_SILENT_ERROR:3, CUSTOM_ERROR:4, EXCEPTION:5, HTTP_ERROR:6, ABORT:7, TIMEOUT:8, OFFLINE:9};
goog.net.ErrorCode.getDebugMessage = function(errorCode) {
  switch(errorCode) {
    case goog.net.ErrorCode.NO_ERROR:
      return "No Error";
    case goog.net.ErrorCode.ACCESS_DENIED:
      return "Access denied to content document";
    case goog.net.ErrorCode.FILE_NOT_FOUND:
      return "File not found";
    case goog.net.ErrorCode.FF_SILENT_ERROR:
      return "Firefox silently errored";
    case goog.net.ErrorCode.CUSTOM_ERROR:
      return "Application custom error";
    case goog.net.ErrorCode.EXCEPTION:
      return "An exception occurred";
    case goog.net.ErrorCode.HTTP_ERROR:
      return "Http response at 400 or 500 level";
    case goog.net.ErrorCode.ABORT:
      return "Request was aborted";
    case goog.net.ErrorCode.TIMEOUT:
      return "Request timed out";
    case goog.net.ErrorCode.OFFLINE:
      return "The resource is not available offline";
    default:
      return "Unrecognized error code";
  }
};
goog.provide("goog.net.EventType");
goog.net.EventType = {COMPLETE:"complete", SUCCESS:"success", ERROR:"error", ABORT:"abort", READY:"ready", READY_STATE_CHANGE:"readystatechange", TIMEOUT:"timeout", INCREMENTAL_DATA:"incrementaldata", PROGRESS:"progress"};
goog.provide("goog.net.HttpStatus");
goog.net.HttpStatus = {CONTINUE:100, SWITCHING_PROTOCOLS:101, OK:200, CREATED:201, ACCEPTED:202, NON_AUTHORITATIVE_INFORMATION:203, NO_CONTENT:204, RESET_CONTENT:205, PARTIAL_CONTENT:206, MULTIPLE_CHOICES:300, MOVED_PERMANENTLY:301, FOUND:302, SEE_OTHER:303, NOT_MODIFIED:304, USE_PROXY:305, TEMPORARY_REDIRECT:307, BAD_REQUEST:400, UNAUTHORIZED:401, PAYMENT_REQUIRED:402, FORBIDDEN:403, NOT_FOUND:404, METHOD_NOT_ALLOWED:405, NOT_ACCEPTABLE:406, PROXY_AUTHENTICATION_REQUIRED:407, REQUEST_TIMEOUT:408, 
CONFLICT:409, GONE:410, LENGTH_REQUIRED:411, PRECONDITION_FAILED:412, REQUEST_ENTITY_TOO_LARGE:413, REQUEST_URI_TOO_LONG:414, UNSUPPORTED_MEDIA_TYPE:415, REQUEST_RANGE_NOT_SATISFIABLE:416, EXPECTATION_FAILED:417, INTERNAL_SERVER_ERROR:500, NOT_IMPLEMENTED:501, BAD_GATEWAY:502, SERVICE_UNAVAILABLE:503, GATEWAY_TIMEOUT:504, HTTP_VERSION_NOT_SUPPORTED:505, QUIRK_IE_NO_CONTENT:1223};
goog.net.HttpStatus.isSuccess = function(status) {
  switch(status) {
    case goog.net.HttpStatus.OK:
    ;
    case goog.net.HttpStatus.CREATED:
    ;
    case goog.net.HttpStatus.ACCEPTED:
    ;
    case goog.net.HttpStatus.NO_CONTENT:
    ;
    case goog.net.HttpStatus.PARTIAL_CONTENT:
    ;
    case goog.net.HttpStatus.NOT_MODIFIED:
    ;
    case goog.net.HttpStatus.QUIRK_IE_NO_CONTENT:
      return true;
    default:
      return false;
  }
};
goog.provide("goog.net.XmlHttpFactory");
goog.net.XmlHttpFactory = function() {
};
goog.net.XmlHttpFactory.prototype.cachedOptions_ = null;
goog.net.XmlHttpFactory.prototype.createInstance = goog.abstractMethod;
goog.net.XmlHttpFactory.prototype.getOptions = function() {
  return this.cachedOptions_ || (this.cachedOptions_ = this.internalGetOptions());
};
goog.net.XmlHttpFactory.prototype.internalGetOptions = goog.abstractMethod;
goog.provide("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XmlHttpFactory");
goog.net.WrapperXmlHttpFactory = function(xhrFactory, optionsFactory) {
  goog.net.XmlHttpFactory.call(this);
  this.xhrFactory_ = xhrFactory;
  this.optionsFactory_ = optionsFactory;
};
goog.inherits(goog.net.WrapperXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.WrapperXmlHttpFactory.prototype.createInstance = function() {
  return this.xhrFactory_();
};
goog.net.WrapperXmlHttpFactory.prototype.getOptions = function() {
  return this.optionsFactory_();
};
goog.provide("goog.net.DefaultXmlHttpFactory");
goog.provide("goog.net.XmlHttp");
goog.provide("goog.net.XmlHttp.OptionType");
goog.provide("goog.net.XmlHttp.ReadyState");
goog.require("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XmlHttpFactory");
goog.net.XmlHttp = function() {
  return goog.net.XmlHttp.factory_.createInstance();
};
goog.net.XmlHttp.ASSUME_NATIVE_XHR = false;
goog.net.XmlHttp.getOptions = function() {
  return goog.net.XmlHttp.factory_.getOptions();
};
goog.net.XmlHttp.OptionType = {USE_NULL_FUNCTION:0, LOCAL_REQUEST_ERROR:1};
goog.net.XmlHttp.ReadyState = {UNINITIALIZED:0, LOADING:1, LOADED:2, INTERACTIVE:3, COMPLETE:4};
goog.net.XmlHttp.factory_;
goog.net.XmlHttp.setFactory = function(factory, optionsFactory) {
  goog.net.XmlHttp.setGlobalFactory(new goog.net.WrapperXmlHttpFactory((factory), (optionsFactory)));
};
goog.net.XmlHttp.setGlobalFactory = function(factory) {
  goog.net.XmlHttp.factory_ = factory;
};
goog.net.DefaultXmlHttpFactory = function() {
  goog.net.XmlHttpFactory.call(this);
};
goog.inherits(goog.net.DefaultXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.DefaultXmlHttpFactory.prototype.createInstance = function() {
  var progId = this.getProgId_();
  if (progId) {
    return new ActiveXObject(progId);
  } else {
    return new XMLHttpRequest;
  }
};
goog.net.DefaultXmlHttpFactory.prototype.internalGetOptions = function() {
  var progId = this.getProgId_();
  var options = {};
  if (progId) {
    options[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] = true;
    options[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] = true;
  }
  return options;
};
goog.net.DefaultXmlHttpFactory.prototype.ieProgId_;
goog.net.DefaultXmlHttpFactory.prototype.getProgId_ = function() {
  if (goog.net.XmlHttp.ASSUME_NATIVE_XHR) {
    return "";
  }
  if (!this.ieProgId_ && (typeof XMLHttpRequest == "undefined" && typeof ActiveXObject != "undefined")) {
    var ACTIVE_X_IDENTS = ["MSXML2.XMLHTTP.6.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"];
    for (var i = 0;i < ACTIVE_X_IDENTS.length;i++) {
      var candidate = ACTIVE_X_IDENTS[i];
      try {
        new ActiveXObject(candidate);
        this.ieProgId_ = candidate;
        return candidate;
      } catch (e) {
      }
    }
    throw Error("Could not create ActiveXObject. ActiveX might be disabled," + " or MSXML might not be installed");
  }
  return(this.ieProgId_);
};
goog.net.XmlHttp.setGlobalFactory(new goog.net.DefaultXmlHttpFactory);
goog.provide("goog.net.XhrIo");
goog.provide("goog.net.XhrIo.ResponseType");
goog.require("goog.Timer");
goog.require("goog.array");
goog.require("goog.debug.Logger");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events");
goog.require("goog.events.EventTarget");
goog.require("goog.json");
goog.require("goog.net.ErrorCode");
goog.require("goog.net.EventType");
goog.require("goog.net.HttpStatus");
goog.require("goog.net.XmlHttp");
goog.require("goog.object");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.net.XhrIo = function(opt_xmlHttpFactory) {
  goog.events.EventTarget.call(this);
  this.headers = new goog.structs.Map;
  this.xmlHttpFactory_ = opt_xmlHttpFactory || null;
};
goog.inherits(goog.net.XhrIo, goog.events.EventTarget);
goog.net.XhrIo.ResponseType = {DEFAULT:"", TEXT:"text", DOCUMENT:"document", BLOB:"blob", ARRAY_BUFFER:"arraybuffer"};
goog.net.XhrIo.prototype.logger_ = goog.debug.Logger.getLogger("goog.net.XhrIo");
goog.net.XhrIo.CONTENT_TYPE_HEADER = "Content-Type";
goog.net.XhrIo.HTTP_SCHEME_PATTERN = /^https?$/i;
goog.net.XhrIo.FORM_CONTENT_TYPE = "application/x-www-form-urlencoded;charset\x3dutf-8";
goog.net.XhrIo.sendInstances_ = [];
goog.net.XhrIo.send = function(url, opt_callback, opt_method, opt_content, opt_headers, opt_timeoutInterval, opt_withCredentials) {
  var x = new goog.net.XhrIo;
  goog.net.XhrIo.sendInstances_.push(x);
  if (opt_callback) {
    goog.events.listen(x, goog.net.EventType.COMPLETE, opt_callback);
  }
  goog.events.listen(x, goog.net.EventType.READY, goog.partial(goog.net.XhrIo.cleanupSend_, x));
  if (opt_timeoutInterval) {
    x.setTimeoutInterval(opt_timeoutInterval);
  }
  if (opt_withCredentials) {
    x.setWithCredentials(opt_withCredentials);
  }
  x.send(url, opt_method, opt_content, opt_headers);
};
goog.net.XhrIo.cleanup = function() {
  var instances = goog.net.XhrIo.sendInstances_;
  while (instances.length) {
    instances.pop().dispose();
  }
};
goog.net.XhrIo.protectEntryPoints = function(errorHandler) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = errorHandler.protectEntryPoint(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
};
goog.net.XhrIo.cleanupSend_ = function(XhrIo) {
  XhrIo.dispose();
  goog.array.remove(goog.net.XhrIo.sendInstances_, XhrIo);
};
goog.net.XhrIo.prototype.active_ = false;
goog.net.XhrIo.prototype.xhr_ = null;
goog.net.XhrIo.prototype.xhrOptions_ = null;
goog.net.XhrIo.prototype.lastUri_ = "";
goog.net.XhrIo.prototype.lastMethod_ = "";
goog.net.XhrIo.prototype.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
goog.net.XhrIo.prototype.lastError_ = "";
goog.net.XhrIo.prototype.errorDispatched_ = false;
goog.net.XhrIo.prototype.inSend_ = false;
goog.net.XhrIo.prototype.inOpen_ = false;
goog.net.XhrIo.prototype.inAbort_ = false;
goog.net.XhrIo.prototype.timeoutInterval_ = 0;
goog.net.XhrIo.prototype.timeoutId_ = null;
goog.net.XhrIo.prototype.responseType_ = goog.net.XhrIo.ResponseType.DEFAULT;
goog.net.XhrIo.prototype.withCredentials_ = false;
goog.net.XhrIo.prototype.getTimeoutInterval = function() {
  return this.timeoutInterval_;
};
goog.net.XhrIo.prototype.setTimeoutInterval = function(ms) {
  this.timeoutInterval_ = Math.max(0, ms);
};
goog.net.XhrIo.prototype.setResponseType = function(type) {
  this.responseType_ = type;
};
goog.net.XhrIo.prototype.getResponseType = function() {
  return this.responseType_;
};
goog.net.XhrIo.prototype.setWithCredentials = function(withCredentials) {
  this.withCredentials_ = withCredentials;
};
goog.net.XhrIo.prototype.getWithCredentials = function() {
  return this.withCredentials_;
};
goog.net.XhrIo.prototype.send = function(url, opt_method, opt_content, opt_headers) {
  if (this.xhr_) {
    throw Error("[goog.net.XhrIo] Object is active with another request\x3d" + this.lastUri_ + "; newUri\x3d" + url);
  }
  var method = opt_method ? opt_method.toUpperCase() : "GET";
  this.lastUri_ = url;
  this.lastError_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastMethod_ = method;
  this.errorDispatched_ = false;
  this.active_ = true;
  this.xhr_ = this.createXhr();
  this.xhrOptions_ = this.xmlHttpFactory_ ? this.xmlHttpFactory_.getOptions() : goog.net.XmlHttp.getOptions();
  this.xhr_.onreadystatechange = goog.bind(this.onReadyStateChange_, this);
  try {
    this.logger_.fine(this.formatMsg_("Opening Xhr"));
    this.inOpen_ = true;
    this.xhr_.open(method, url, true);
    this.inOpen_ = false;
  } catch (err) {
    this.logger_.fine(this.formatMsg_("Error opening Xhr: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
    return;
  }
  var content = opt_content || "";
  var headers = this.headers.clone();
  if (opt_headers) {
    goog.structs.forEach(opt_headers, function(value, key) {
      headers.set(key, value);
    });
  }
  var contentIsFormData = goog.global["FormData"] && content instanceof goog.global["FormData"];
  if (method == "POST" && (!headers.containsKey(goog.net.XhrIo.CONTENT_TYPE_HEADER) && !contentIsFormData)) {
    headers.set(goog.net.XhrIo.CONTENT_TYPE_HEADER, goog.net.XhrIo.FORM_CONTENT_TYPE);
  }
  goog.structs.forEach(headers, function(value, key) {
    this.xhr_.setRequestHeader(key, value);
  }, this);
  if (this.responseType_) {
    this.xhr_.responseType = this.responseType_;
  }
  if (goog.object.containsKey(this.xhr_, "withCredentials")) {
    this.xhr_.withCredentials = this.withCredentials_;
  }
  try {
    if (this.timeoutId_) {
      goog.Timer.defaultTimerObject.clearTimeout(this.timeoutId_);
      this.timeoutId_ = null;
    }
    if (this.timeoutInterval_ > 0) {
      this.logger_.fine(this.formatMsg_("Will abort after " + this.timeoutInterval_ + "ms if incomplete"));
      this.timeoutId_ = goog.Timer.defaultTimerObject.setTimeout(goog.bind(this.timeout_, this), this.timeoutInterval_);
    }
    this.logger_.fine(this.formatMsg_("Sending request"));
    this.inSend_ = true;
    this.xhr_.send(content);
    this.inSend_ = false;
  } catch (err) {
    this.logger_.fine(this.formatMsg_("Send error: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
  }
};
goog.net.XhrIo.prototype.createXhr = function() {
  return this.xmlHttpFactory_ ? this.xmlHttpFactory_.createInstance() : goog.net.XmlHttp();
};
goog.net.XhrIo.prototype.timeout_ = function() {
  if (typeof goog == "undefined") {
  } else {
    if (this.xhr_) {
      this.lastError_ = "Timed out after " + this.timeoutInterval_ + "ms, aborting";
      this.lastErrorCode_ = goog.net.ErrorCode.TIMEOUT;
      this.logger_.fine(this.formatMsg_(this.lastError_));
      this.dispatchEvent(goog.net.EventType.TIMEOUT);
      this.abort(goog.net.ErrorCode.TIMEOUT);
    }
  }
};
goog.net.XhrIo.prototype.error_ = function(errorCode, err) {
  this.active_ = false;
  if (this.xhr_) {
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
  }
  this.lastError_ = err;
  this.lastErrorCode_ = errorCode;
  this.dispatchErrors_();
  this.cleanUpXhr_();
};
goog.net.XhrIo.prototype.dispatchErrors_ = function() {
  if (!this.errorDispatched_) {
    this.errorDispatched_ = true;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ERROR);
  }
};
goog.net.XhrIo.prototype.abort = function(opt_failureCode) {
  if (this.xhr_ && this.active_) {
    this.logger_.fine(this.formatMsg_("Aborting"));
    this.active_ = false;
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
    this.lastErrorCode_ = opt_failureCode || goog.net.ErrorCode.ABORT;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ABORT);
    this.cleanUpXhr_();
  }
};
goog.net.XhrIo.prototype.disposeInternal = function() {
  if (this.xhr_) {
    if (this.active_) {
      this.active_ = false;
      this.inAbort_ = true;
      this.xhr_.abort();
      this.inAbort_ = false;
    }
    this.cleanUpXhr_(true);
  }
  goog.net.XhrIo.superClass_.disposeInternal.call(this);
};
goog.net.XhrIo.prototype.onReadyStateChange_ = function() {
  if (!this.inOpen_ && (!this.inSend_ && !this.inAbort_)) {
    this.onReadyStateChangeEntryPoint_();
  } else {
    this.onReadyStateChangeHelper_();
  }
};
goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = function() {
  this.onReadyStateChangeHelper_();
};
goog.net.XhrIo.prototype.onReadyStateChangeHelper_ = function() {
  if (!this.active_) {
    return;
  }
  if (typeof goog == "undefined") {
  } else {
    if (this.xhrOptions_[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] && (this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE && this.getStatus() == 2)) {
      this.logger_.fine(this.formatMsg_("Local request error detected and ignored"));
    } else {
      if (this.inSend_ && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE) {
        goog.Timer.defaultTimerObject.setTimeout(goog.bind(this.onReadyStateChange_, this), 0);
        return;
      }
      this.dispatchEvent(goog.net.EventType.READY_STATE_CHANGE);
      if (this.isComplete()) {
        this.logger_.fine(this.formatMsg_("Request complete"));
        this.active_ = false;
        try {
          if (this.isSuccess()) {
            this.dispatchEvent(goog.net.EventType.COMPLETE);
            this.dispatchEvent(goog.net.EventType.SUCCESS);
          } else {
            this.lastErrorCode_ = goog.net.ErrorCode.HTTP_ERROR;
            this.lastError_ = this.getStatusText() + " [" + this.getStatus() + "]";
            this.dispatchErrors_();
          }
        } finally {
          this.cleanUpXhr_();
        }
      }
    }
  }
};
goog.net.XhrIo.prototype.cleanUpXhr_ = function(opt_fromDispose) {
  if (this.xhr_) {
    var xhr = this.xhr_;
    var clearedOnReadyStateChange = this.xhrOptions_[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] ? goog.nullFunction : null;
    this.xhr_ = null;
    this.xhrOptions_ = null;
    if (this.timeoutId_) {
      goog.Timer.defaultTimerObject.clearTimeout(this.timeoutId_);
      this.timeoutId_ = null;
    }
    if (!opt_fromDispose) {
      this.dispatchEvent(goog.net.EventType.READY);
    }
    try {
      xhr.onreadystatechange = clearedOnReadyStateChange;
    } catch (e) {
      this.logger_.severe("Problem encountered resetting onreadystatechange: " + e.message);
    }
  }
};
goog.net.XhrIo.prototype.isActive = function() {
  return!!this.xhr_;
};
goog.net.XhrIo.prototype.isComplete = function() {
  return this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE;
};
goog.net.XhrIo.prototype.isSuccess = function() {
  var status = this.getStatus();
  return goog.net.HttpStatus.isSuccess(status) || status === 0 && !this.isLastUriEffectiveSchemeHttp_();
};
goog.net.XhrIo.prototype.isLastUriEffectiveSchemeHttp_ = function() {
  var scheme = goog.uri.utils.getEffectiveScheme(String(this.lastUri_));
  return goog.net.XhrIo.HTTP_SCHEME_PATTERN.test(scheme);
};
goog.net.XhrIo.prototype.getReadyState = function() {
  return this.xhr_ ? (this.xhr_.readyState) : goog.net.XmlHttp.ReadyState.UNINITIALIZED;
};
goog.net.XhrIo.prototype.getStatus = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.status : -1;
  } catch (e) {
    this.logger_.warning("Can not get status: " + e.message);
    return-1;
  }
};
goog.net.XhrIo.prototype.getStatusText = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.statusText : "";
  } catch (e) {
    this.logger_.fine("Can not get status: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getLastUri = function() {
  return String(this.lastUri_);
};
goog.net.XhrIo.prototype.getResponseText = function() {
  try {
    return this.xhr_ ? this.xhr_.responseText : "";
  } catch (e) {
    this.logger_.fine("Can not get responseText: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getResponseBody = function() {
  try {
    if (this.xhr_ && "responseBody" in this.xhr_) {
      return this.xhr_["responseBody"];
    }
  } catch (e) {
    this.logger_.fine("Can not get responseBody: " + e.message);
  }
  return null;
};
goog.net.XhrIo.prototype.getResponseXml = function() {
  try {
    return this.xhr_ ? this.xhr_.responseXML : null;
  } catch (e) {
    this.logger_.fine("Can not get responseXML: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseJson = function(opt_xssiPrefix) {
  if (!this.xhr_) {
    return undefined;
  }
  var responseText = this.xhr_.responseText;
  if (opt_xssiPrefix && responseText.indexOf(opt_xssiPrefix) == 0) {
    responseText = responseText.substring(opt_xssiPrefix.length);
  }
  return goog.json.parse(responseText);
};
goog.net.XhrIo.prototype.getResponse = function() {
  try {
    if (!this.xhr_) {
      return null;
    }
    if ("response" in this.xhr_) {
      return this.xhr_.response;
    }
    switch(this.responseType_) {
      case goog.net.XhrIo.ResponseType.DEFAULT:
      ;
      case goog.net.XhrIo.ResponseType.TEXT:
        return this.xhr_.responseText;
      case goog.net.XhrIo.ResponseType.ARRAY_BUFFER:
        if ("mozResponseArrayBuffer" in this.xhr_) {
          return this.xhr_.mozResponseArrayBuffer;
        }
      ;
    }
    this.logger_.severe("Response type " + this.responseType_ + " is not " + "supported on this browser");
    return null;
  } catch (e) {
    this.logger_.fine("Can not get response: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseHeader = function(key) {
  return this.xhr_ && this.isComplete() ? this.xhr_.getResponseHeader(key) : undefined;
};
goog.net.XhrIo.prototype.getAllResponseHeaders = function() {
  return this.xhr_ && this.isComplete() ? this.xhr_.getAllResponseHeaders() : "";
};
goog.net.XhrIo.prototype.getLastErrorCode = function() {
  return this.lastErrorCode_;
};
goog.net.XhrIo.prototype.getLastError = function() {
  return goog.isString(this.lastError_) ? this.lastError_ : String(this.lastError_);
};
goog.net.XhrIo.prototype.formatMsg_ = function(msg) {
  return msg + " [" + this.lastMethod_ + " " + this.lastUri_ + " " + this.getStatus() + "]";
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = transformer(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
});
goog.provide("goog.structs.Queue");
goog.require("goog.array");
goog.structs.Queue = function() {
  this.elements_ = [];
};
goog.structs.Queue.prototype.head_ = 0;
goog.structs.Queue.prototype.tail_ = 0;
goog.structs.Queue.prototype.enqueue = function(element) {
  this.elements_[this.tail_++] = element;
};
goog.structs.Queue.prototype.dequeue = function() {
  if (this.head_ == this.tail_) {
    return undefined;
  }
  var result = this.elements_[this.head_];
  delete this.elements_[this.head_];
  this.head_++;
  return result;
};
goog.structs.Queue.prototype.peek = function() {
  if (this.head_ == this.tail_) {
    return undefined;
  }
  return this.elements_[this.head_];
};
goog.structs.Queue.prototype.getCount = function() {
  return this.tail_ - this.head_;
};
goog.structs.Queue.prototype.isEmpty = function() {
  return this.tail_ - this.head_ == 0;
};
goog.structs.Queue.prototype.clear = function() {
  this.elements_.length = 0;
  this.head_ = 0;
  this.tail_ = 0;
};
goog.structs.Queue.prototype.contains = function(obj) {
  return goog.array.contains(this.elements_, obj);
};
goog.structs.Queue.prototype.remove = function(obj) {
  var index = goog.array.indexOf(this.elements_, obj);
  if (index < 0) {
    return false;
  }
  if (index == this.head_) {
    this.dequeue();
  } else {
    goog.array.removeAt(this.elements_, index);
    this.tail_--;
  }
  return true;
};
goog.structs.Queue.prototype.getValues = function() {
  return this.elements_.slice(this.head_, this.tail_);
};
goog.provide("goog.structs.Pool");
goog.require("goog.Disposable");
goog.require("goog.structs.Queue");
goog.require("goog.structs.Set");
goog.structs.Pool = function(opt_minCount, opt_maxCount) {
  goog.Disposable.call(this);
  this.minCount_ = opt_minCount || 0;
  this.maxCount_ = opt_maxCount || 10;
  if (this.minCount_ > this.maxCount_) {
    throw Error(goog.structs.Pool.ERROR_MIN_MAX_);
  }
  this.freeQueue_ = new goog.structs.Queue;
  this.inUseSet_ = new goog.structs.Set;
  this.delay = 0;
  this.lastAccess = null;
  this.adjustForMinMax();
  var magicProps = {canBeReused:0};
};
goog.inherits(goog.structs.Pool, goog.Disposable);
goog.structs.Pool.ERROR_MIN_MAX_ = "[goog.structs.Pool] Min can not be greater than max";
goog.structs.Pool.ERROR_DISPOSE_UNRELEASED_OBJS_ = "[goog.structs.Pool] Objects not released";
goog.structs.Pool.prototype.setMinimumCount = function(min) {
  if (min > this.maxCount_) {
    throw Error(goog.structs.Pool.ERROR_MIN_MAX_);
  }
  this.minCount_ = min;
  this.adjustForMinMax();
};
goog.structs.Pool.prototype.setMaximumCount = function(max) {
  if (max < this.minCount_) {
    throw Error(goog.structs.Pool.ERROR_MIN_MAX_);
  }
  this.maxCount_ = max;
  this.adjustForMinMax();
};
goog.structs.Pool.prototype.setDelay = function(delay) {
  this.delay = delay;
};
goog.structs.Pool.prototype.getObject = function() {
  var time = goog.now();
  if (goog.isDefAndNotNull(this.lastAccess) && time - this.lastAccess < this.delay) {
    return undefined;
  }
  var obj = this.removeFreeObject_();
  if (obj) {
    this.lastAccess = time;
    this.inUseSet_.add(obj);
  }
  return obj;
};
goog.structs.Pool.prototype.releaseObject = function(obj) {
  if (this.inUseSet_.remove(obj)) {
    this.addFreeObject(obj);
    return true;
  }
  return false;
};
goog.structs.Pool.prototype.removeFreeObject_ = function() {
  var obj;
  while (this.getFreeCount() > 0) {
    obj = (this.freeQueue_.dequeue());
    if (!this.objectCanBeReused(obj)) {
      this.adjustForMinMax();
    } else {
      break;
    }
  }
  if (!obj && this.getCount() < this.maxCount_) {
    obj = this.createObject();
  }
  return obj;
};
goog.structs.Pool.prototype.addFreeObject = function(obj) {
  this.inUseSet_.remove(obj);
  if (this.objectCanBeReused(obj) && this.getCount() < this.maxCount_) {
    this.freeQueue_.enqueue(obj);
  } else {
    this.disposeObject(obj);
  }
};
goog.structs.Pool.prototype.adjustForMinMax = function() {
  var freeQueue = this.freeQueue_;
  while (this.getCount() < this.minCount_) {
    freeQueue.enqueue(this.createObject());
  }
  while (this.getCount() > this.maxCount_ && this.getFreeCount() > 0) {
    this.disposeObject((freeQueue.dequeue()));
  }
};
goog.structs.Pool.prototype.createObject = function() {
  return{};
};
goog.structs.Pool.prototype.disposeObject = function(obj) {
  if (typeof obj.dispose == "function") {
    obj.dispose();
  } else {
    for (var i in obj) {
      obj[i] = null;
    }
  }
};
goog.structs.Pool.prototype.objectCanBeReused = function(obj) {
  if (typeof obj.canBeReused == "function") {
    return obj.canBeReused();
  }
  return true;
};
goog.structs.Pool.prototype.contains = function(obj) {
  return this.freeQueue_.contains(obj) || this.inUseSet_.contains(obj);
};
goog.structs.Pool.prototype.getCount = function() {
  return this.freeQueue_.getCount() + this.inUseSet_.getCount();
};
goog.structs.Pool.prototype.getInUseCount = function() {
  return this.inUseSet_.getCount();
};
goog.structs.Pool.prototype.getFreeCount = function() {
  return this.freeQueue_.getCount();
};
goog.structs.Pool.prototype.isEmpty = function() {
  return this.freeQueue_.isEmpty() && this.inUseSet_.isEmpty();
};
goog.structs.Pool.prototype.disposeInternal = function() {
  goog.structs.Pool.superClass_.disposeInternal.call(this);
  if (this.getInUseCount() > 0) {
    throw Error(goog.structs.Pool.ERROR_DISPOSE_UNRELEASED_OBJS_);
  }
  delete this.inUseSet_;
  var freeQueue = this.freeQueue_;
  while (!freeQueue.isEmpty()) {
    this.disposeObject((freeQueue.dequeue()));
  }
  delete this.freeQueue_;
};
goog.provide("goog.structs.Node");
goog.structs.Node = function(key, value) {
  this.key_ = key;
  this.value_ = value;
};
goog.structs.Node.prototype.getKey = function() {
  return this.key_;
};
goog.structs.Node.prototype.getValue = function() {
  return this.value_;
};
goog.structs.Node.prototype.clone = function() {
  return new goog.structs.Node(this.key_, this.value_);
};
goog.provide("goog.structs.Heap");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.structs.Node");
goog.structs.Heap = function(opt_heap) {
  this.nodes_ = [];
  if (opt_heap) {
    this.insertAll(opt_heap);
  }
};
goog.structs.Heap.prototype.insert = function(key, value) {
  var node = new goog.structs.Node(key, value);
  var nodes = this.nodes_;
  nodes.push(node);
  this.moveUp_(nodes.length - 1);
};
goog.structs.Heap.prototype.insertAll = function(heap) {
  var keys, values;
  if (heap instanceof goog.structs.Heap) {
    keys = heap.getKeys();
    values = heap.getValues();
    if (heap.getCount() <= 0) {
      var nodes = this.nodes_;
      for (var i = 0;i < keys.length;i++) {
        nodes.push(new goog.structs.Node(keys[i], values[i]));
      }
      return;
    }
  } else {
    keys = goog.object.getKeys(heap);
    values = goog.object.getValues(heap);
  }
  for (var i = 0;i < keys.length;i++) {
    this.insert(keys[i], values[i]);
  }
};
goog.structs.Heap.prototype.remove = function() {
  var nodes = this.nodes_;
  var count = nodes.length;
  var rootNode = nodes[0];
  if (count <= 0) {
    return undefined;
  } else {
    if (count == 1) {
      goog.array.clear(nodes);
    } else {
      nodes[0] = nodes.pop();
      this.moveDown_(0);
    }
  }
  return rootNode.getValue();
};
goog.structs.Heap.prototype.peek = function() {
  var nodes = this.nodes_;
  if (nodes.length == 0) {
    return undefined;
  }
  return nodes[0].getValue();
};
goog.structs.Heap.prototype.peekKey = function() {
  return this.nodes_[0] && this.nodes_[0].getKey();
};
goog.structs.Heap.prototype.moveDown_ = function(index) {
  var nodes = this.nodes_;
  var count = nodes.length;
  var node = nodes[index];
  while (index < count >> 1) {
    var leftChildIndex = this.getLeftChildIndex_(index);
    var rightChildIndex = this.getRightChildIndex_(index);
    var smallerChildIndex = rightChildIndex < count && nodes[rightChildIndex].getKey() < nodes[leftChildIndex].getKey() ? rightChildIndex : leftChildIndex;
    if (nodes[smallerChildIndex].getKey() > node.getKey()) {
      break;
    }
    nodes[index] = nodes[smallerChildIndex];
    index = smallerChildIndex;
  }
  nodes[index] = node;
};
goog.structs.Heap.prototype.moveUp_ = function(index) {
  var nodes = this.nodes_;
  var node = nodes[index];
  while (index > 0) {
    var parentIndex = this.getParentIndex_(index);
    if (nodes[parentIndex].getKey() > node.getKey()) {
      nodes[index] = nodes[parentIndex];
      index = parentIndex;
    } else {
      break;
    }
  }
  nodes[index] = node;
};
goog.structs.Heap.prototype.getLeftChildIndex_ = function(index) {
  return index * 2 + 1;
};
goog.structs.Heap.prototype.getRightChildIndex_ = function(index) {
  return index * 2 + 2;
};
goog.structs.Heap.prototype.getParentIndex_ = function(index) {
  return index - 1 >> 1;
};
goog.structs.Heap.prototype.getValues = function() {
  var nodes = this.nodes_;
  var rv = [];
  var l = nodes.length;
  for (var i = 0;i < l;i++) {
    rv.push(nodes[i].getValue());
  }
  return rv;
};
goog.structs.Heap.prototype.getKeys = function() {
  var nodes = this.nodes_;
  var rv = [];
  var l = nodes.length;
  for (var i = 0;i < l;i++) {
    rv.push(nodes[i].getKey());
  }
  return rv;
};
goog.structs.Heap.prototype.containsValue = function(val) {
  return goog.array.some(this.nodes_, function(node) {
    return node.getValue() == val;
  });
};
goog.structs.Heap.prototype.containsKey = function(key) {
  return goog.array.some(this.nodes_, function(node) {
    return node.getKey() == key;
  });
};
goog.structs.Heap.prototype.clone = function() {
  return new goog.structs.Heap(this);
};
goog.structs.Heap.prototype.getCount = function() {
  return this.nodes_.length;
};
goog.structs.Heap.prototype.isEmpty = function() {
  return goog.array.isEmpty(this.nodes_);
};
goog.structs.Heap.prototype.clear = function() {
  goog.array.clear(this.nodes_);
};
goog.provide("goog.structs.PriorityQueue");
goog.require("goog.structs");
goog.require("goog.structs.Heap");
goog.structs.PriorityQueue = function() {
  goog.structs.Heap.call(this);
};
goog.inherits(goog.structs.PriorityQueue, goog.structs.Heap);
goog.structs.PriorityQueue.prototype.enqueue = function(priority, value) {
  this.insert(priority, value);
};
goog.structs.PriorityQueue.prototype.dequeue = function() {
  return this.remove();
};
goog.provide("goog.structs.PriorityPool");
goog.require("goog.structs.Pool");
goog.require("goog.structs.PriorityQueue");
goog.structs.PriorityPool = function(opt_minCount, opt_maxCount) {
  this.requestQueue_ = new goog.structs.PriorityQueue;
  goog.structs.Pool.call(this, opt_minCount, opt_maxCount);
};
goog.inherits(goog.structs.PriorityPool, goog.structs.Pool);
goog.structs.PriorityPool.prototype.delayTimeout_;
goog.structs.PriorityPool.DEFAULT_PRIORITY_ = 100;
goog.structs.PriorityPool.prototype.setDelay = function(delay) {
  goog.base(this, "setDelay", delay);
  if (!goog.isDefAndNotNull(this.lastAccess)) {
    return;
  }
  goog.global.clearTimeout(this.delayTimeout_);
  this.delayTimeout_ = goog.global.setTimeout(goog.bind(this.handleQueueRequests_, this), this.delay + this.lastAccess - goog.now());
  this.handleQueueRequests_();
};
goog.structs.PriorityPool.prototype.getObject = function(opt_callback, opt_priority) {
  if (!opt_callback) {
    var result = goog.base(this, "getObject");
    if (result && this.delay) {
      this.delayTimeout_ = goog.global.setTimeout(goog.bind(this.handleQueueRequests_, this), this.delay);
    }
    return result;
  }
  var priority = goog.isDef(opt_priority) ? opt_priority : goog.structs.PriorityPool.DEFAULT_PRIORITY_;
  this.requestQueue_.enqueue(priority, opt_callback);
  this.handleQueueRequests_();
  return undefined;
};
goog.structs.PriorityPool.prototype.handleQueueRequests_ = function() {
  var requestQueue = this.requestQueue_;
  while (requestQueue.getCount() > 0) {
    var obj = this.getObject();
    if (!obj) {
      return;
    } else {
      var requestCallback = requestQueue.dequeue();
      requestCallback.apply(this, [obj]);
    }
  }
};
goog.structs.PriorityPool.prototype.addFreeObject = function(obj) {
  goog.structs.PriorityPool.superClass_.addFreeObject.call(this, obj);
  this.handleQueueRequests_();
};
goog.structs.PriorityPool.prototype.adjustForMinMax = function() {
  goog.structs.PriorityPool.superClass_.adjustForMinMax.call(this);
  this.handleQueueRequests_();
};
goog.structs.PriorityPool.prototype.disposeInternal = function() {
  goog.structs.PriorityPool.superClass_.disposeInternal.call(this);
  goog.global.clearTimeout(this.delayTimeout_);
  this.requestQueue_.clear();
  this.requestQueue_ = null;
};
goog.provide("goog.net.XhrIoPool");
goog.require("goog.net.XhrIo");
goog.require("goog.structs");
goog.require("goog.structs.PriorityPool");
goog.net.XhrIoPool = function(opt_headers, opt_minCount, opt_maxCount) {
  goog.structs.PriorityPool.call(this, opt_minCount, opt_maxCount);
  this.headers_ = opt_headers;
};
goog.inherits(goog.net.XhrIoPool, goog.structs.PriorityPool);
goog.net.XhrIoPool.prototype.createObject = function() {
  var xhrIo = new goog.net.XhrIo;
  var headers = this.headers_;
  if (headers) {
    goog.structs.forEach(headers, function(value, key) {
      xhrIo.headers.set(key, value);
    });
  }
  return xhrIo;
};
goog.net.XhrIoPool.prototype.objectCanBeReused = function(obj) {
  var xhr = (obj);
  return!xhr.isDisposed() && !xhr.isActive();
};
goog.provide("goog.string.format");
goog.require("goog.string");
goog.string.format = function(formatString, var_args) {
  var args = Array.prototype.slice.call(arguments);
  var template = args.shift();
  if (typeof template == "undefined") {
    throw Error("[goog.string.format] Template required");
  }
  var formatRe = /%([0\-\ \+]*)(\d+)?(\.(\d+))?([%sfdiu])/g;
  function replacerDemuxer(match, flags, width, dotp, precision, type, offset, wholeString) {
    if (type == "%") {
      return "%";
    }
    var value = args.shift();
    if (typeof value == "undefined") {
      throw Error("[goog.string.format] Not enough arguments");
    }
    arguments[0] = value;
    return goog.string.format.demuxes_[type].apply(null, arguments);
  }
  return template.replace(formatRe, replacerDemuxer);
};
goog.string.format.demuxes_ = {};
goog.string.format.demuxes_["s"] = function(value, flags, width, dotp, precision, type, offset, wholeString) {
  var replacement = value;
  if (isNaN(width) || (width == "" || replacement.length >= width)) {
    return replacement;
  }
  if (flags.indexOf("-", 0) > -1) {
    replacement = replacement + goog.string.repeat(" ", width - replacement.length);
  } else {
    replacement = goog.string.repeat(" ", width - replacement.length) + replacement;
  }
  return replacement;
};
goog.string.format.demuxes_["f"] = function(value, flags, width, dotp, precision, type, offset, wholeString) {
  var replacement = value.toString();
  if (!(isNaN(precision) || precision == "")) {
    replacement = value.toFixed(precision);
  }
  var sign;
  if (value < 0) {
    sign = "-";
  } else {
    if (flags.indexOf("+") >= 0) {
      sign = "+";
    } else {
      if (flags.indexOf(" ") >= 0) {
        sign = " ";
      } else {
        sign = "";
      }
    }
  }
  if (value >= 0) {
    replacement = sign + replacement;
  }
  if (isNaN(width) || replacement.length >= width) {
    return replacement;
  }
  replacement = isNaN(precision) ? Math.abs(value).toString() : Math.abs(value).toFixed(precision);
  var padCount = width - replacement.length - sign.length;
  if (flags.indexOf("-", 0) >= 0) {
    replacement = sign + replacement + goog.string.repeat(" ", padCount);
  } else {
    var paddingChar = flags.indexOf("0", 0) >= 0 ? "0" : " ";
    replacement = sign + goog.string.repeat(paddingChar, padCount) + replacement;
  }
  return replacement;
};
goog.string.format.demuxes_["d"] = function(value, flags, width, dotp, precision, type, offset, wholeString) {
  return goog.string.format.demuxes_["f"](parseInt(value, 10), flags, width, dotp, 0, type, offset, wholeString);
};
goog.string.format.demuxes_["i"] = goog.string.format.demuxes_["d"];
goog.string.format.demuxes_["u"] = goog.string.format.demuxes_["d"];
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
clojure.string.seq_reverse = function seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.reverse = function reverse(s) {
  return s.split("").reverse().join("");
};
clojure.string.replace = function replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (cljs.core.truth_(match.hasOwnProperty("source"))) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw[cljs.core.str("Invalid match arg: "), cljs.core.str(match)].join("");
      } else {
        return null;
      }
    }
  }
};
clojure.string.replace_first = function replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function() {
  var join = null;
  var join__1 = function(coll) {
    return cljs.core.apply.call(null, cljs.core.str, coll);
  };
  var join__2 = function(separator, coll) {
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, separator, coll));
  };
  join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return join__1.call(this, separator);
      case 2:
        return join__2.call(this, separator, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$1 = join__1;
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  return join;
}();
clojure.string.upper_case = function upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return[cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)))].join("");
  }
};
clojure.string.pop_last_while_empty = function pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__22398 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__22398;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__22402 = cljs.core._EQ_;
    var expr__22403 = limit;
    if (cljs.core.truth_(pred__22402.call(null, 1, expr__22403))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__22402.call(null, 2, expr__22403))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function() {
  var split = null;
  var split__2 = function(s, re) {
    return split.call(null, s, re, 0);
  };
  var split__3 = function(s, re, limit) {
    return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, [cljs.core.str(re)].join(""), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, [cljs.core.str(s)].join("").split(re)) : function() {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while (true) {
        if (cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1);
        } else {
          var temp__4090__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if (cljs.core.truth_(temp__4090__auto__)) {
            var m = temp__4090__auto__;
            var index = s__$1.indexOf(m);
            var G__22405 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__22406 = limit__$1 - 1;
            var G__22407 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__22405;
            limit__$1 = G__22406;
            parts = G__22407;
            continue;
          } else {
            return cljs.core.conj.call(null, parts, s__$1);
          }
        }
        break;
      }
    }());
  };
  split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, s, re);
      case 3:
        return split__3.call(this, s, re, limit);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$3 = split__3;
  return split;
}();
clojure.string.split_lines = function split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__22408 = index - 1;
        index = G__22408;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function escape__$1(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4090__auto___22409 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4090__auto___22409)) {
        var replacement_22410 = temp__4090__auto___22409;
        buffer.append([cljs.core.str(replacement_22410)].join(""));
      } else {
        buffer.append(ch);
      }
      var G__22411 = index + 1;
      index = G__22411;
      continue;
    }
    break;
  }
};
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string");
cljs.reader.PushbackReader = function() {
  var obj22039 = {};
  return obj22039;
}();
cljs.reader.read_char = function read_char(reader) {
  if (function() {
    var and__15530__auto__ = reader;
    if (and__15530__auto__) {
      return reader.cljs$reader$PushbackReader$read_char$arity$1;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__16169__auto__ = reader == null ? null : reader;
    return function() {
      var or__15542__auto__ = cljs.reader.read_char[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.reader.read_char["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
        }
      }
    }().call(null, reader);
  }
};
cljs.reader.unread = function unread(reader, ch) {
  if (function() {
    var and__15530__auto__ = reader;
    if (and__15530__auto__) {
      return reader.cljs$reader$PushbackReader$unread$arity$2;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__16169__auto__ = reader == null ? null : reader;
    return function() {
      var or__15542__auto__ = cljs.reader.unread[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.reader.unread["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
        }
      }
    }().call(null, reader, ch);
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.__GT_StringPushbackReader = function __GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function whitespace_QMARK_(ch) {
  var or__15542__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__15542__auto__)) {
    return or__15542__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function() {
  var reader_error__delegate = function(rdr, msg) {
    throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
  };
  var reader_error = function(rdr, var_args) {
    var msg = null;
    if (arguments.length > 1) {
      msg = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return reader_error__delegate.call(this, rdr, msg);
  };
  reader_error.cljs$lang$maxFixedArity = 1;
  reader_error.cljs$lang$applyTo = function(arglist__22040) {
    var rdr = cljs.core.first(arglist__22040);
    var msg = cljs.core.rest(arglist__22040);
    return reader_error__delegate(rdr, msg);
  };
  reader_error.cljs$core$IFn$_invoke$arity$variadic = reader_error__delegate;
  return reader_error;
}();
cljs.reader.macro_terminating_QMARK_ = function macro_terminating_QMARK_(ch) {
  var and__15530__auto__ = !(ch === "#");
  if (and__15530__auto__) {
    var and__15530__auto____$1 = !(ch === "'");
    if (and__15530__auto____$1) {
      var and__15530__auto____$2 = !(ch === ":");
      if (and__15530__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__15530__auto____$2;
      }
    } else {
      return and__15530__auto____$1;
    }
  } else {
    return and__15530__auto__;
  }
};
cljs.reader.read_token = function read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || (cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch))) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__22041 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__22042 = cljs.reader.read_char.call(null, rdr);
      sb = G__22041;
      ch = G__22042;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || (ch === "\r" || ch == null)) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+)|0[0-9]+)(N)?");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "([-+]?[0-9]+)/([0-9]+)");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "[:]?([^0-9/].*/)?([^0-9/][^/]*)");
cljs.reader.re_find_STAR_ = function re_find_STAR_(re, s) {
  var matches = re.exec(s);
  if (matches == null) {
    return null;
  } else {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  }
};
cljs.reader.match_int = function match_int(s) {
  var groups = cljs.reader.re_find_STAR_.call(null, cljs.reader.int_pattern, s);
  var group3 = groups[2];
  if (!(group3 == null || group3.length < 1)) {
    return 0;
  } else {
    var negate = "-" === groups[1] ? -1 : 1;
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[7]) ? [groups[7], parseInt(groups[7])] : new cljs.core.Keyword(null, "default", "default", 2558708147) ? [null, null] : null;
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      return negate * parseInt(n, radix);
    }
  }
};
cljs.reader.match_ratio = function match_ratio(s) {
  var groups = cljs.reader.re_find_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator) / parseInt(denominator);
};
cljs.reader.match_float = function match_float(s) {
  return parseFloat(s);
};
cljs.reader.re_matches_STAR_ = function re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_number = function match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return'"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                  return null;
                } else {
                  return null;
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function read_2_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function read_4_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "[0-9A-Fa-f]{2}");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "[0-9A-Fa-f]{4}");
cljs.reader.validate_unicode_escape = function validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read_past = function read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__22043 = cljs.reader.read_char.call(null, rdr);
      ch = G__22043;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      var temp__4090__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var macrofn = temp__4090__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__22044 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__22044;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__22045 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__22045;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4090__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4090__auto__)) {
      var obj = temp__4090__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmached delimiter ", ch);
};
cljs.reader.read_list = function read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true));
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true);
};
cljs.reader.read_map = function read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l);
};
cljs.reader.read_number = function read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__15542__auto__ = ch == null;
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__15542__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__15542__auto__)) {
        return or__15542__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__22046 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__22047 = cljs.reader.read_char.call(null, reader);
      buffer = G__22046;
      ch = G__22047;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__22048 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__22049 = cljs.reader.read_char.call(null, reader);
        buffer = G__22048;
        ch = G__22049;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
            var G__22050 = function() {
              buffer.append(ch);
              return buffer;
            }();
            var G__22051 = cljs.reader.read_char.call(null, reader);
            buffer = G__22050;
            ch = G__22051;
            continue;
          } else {
            return null;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.reader.read_symbol = function read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(goog.string.contains(token, "/"))) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_keyword = function read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || (name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1))) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", 1014018828), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", 1014018828), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return new cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return f;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.reader.wrapping_reader = function wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.reader.read.call(null, rdr, true, null, true)), sym);
  };
};
cljs.reader.throwing_reader = function throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (function() {
    var G__22053 = o;
    if (G__22053) {
      var bit__16192__auto__ = G__22053.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__16192__auto__ || G__22053.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__22053.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__22053);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__22053);
    }
  }()) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", -1532577739, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", -1545057749, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_char;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                    return null;
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return null;
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.reader.read = function read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__22054 = reader;
        var G__22055 = eof_is_error;
        var G__22056 = sentinel;
        var G__22057 = is_recursive;
        reader = G__22054;
        eof_is_error = G__22055;
        sentinel = G__22056;
        is_recursive = G__22057;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__22058 = cljs.reader.read_comment.call(null, reader, ch);
          var G__22059 = eof_is_error;
          var G__22060 = sentinel;
          var G__22061 = is_recursive;
          reader = G__22058;
          eof_is_error = G__22059;
          sentinel = G__22060;
          is_recursive = G__22061;
          continue;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var f = cljs.reader.macros.call(null, ch);
            var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : new cljs.core.Keyword(null, "else", "else", 1017020587) ? cljs.reader.read_symbol.call(null, reader, ch) : null;
            if (res === reader) {
              var G__22062 = reader;
              var G__22063 = eof_is_error;
              var G__22064 = sentinel;
              var G__22065 = is_recursive;
              reader = G__22062;
              eof_is_error = G__22063;
              sentinel = G__22064;
              is_recursive = G__22065;
              continue;
            } else {
              return res;
            }
          } else {
            return null;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function read_string(s) {
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, true, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var b = new goog.string.StringBuffer(s);
        while (true) {
          if (b.getLength() < width) {
            var G__22066 = b.append("0");
            b = G__22066;
            continue;
          } else {
            return b.toString();
          }
          break;
        }
      } else {
        return null;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function indivisible_QMARK_(num, div) {
  return!cljs.reader.divisible_QMARK_.call(null, num, div);
};
cljs.reader.leap_year_QMARK_ = function leap_year_QMARK_(year) {
  return cljs.reader.divisible_QMARK_.call(null, year, 4) && (cljs.reader.indivisible_QMARK_.call(null, year, 100) || cljs.reader.divisible_QMARK_.call(null, year, 400));
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(month, leap_year_QMARK_) {
    return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
  };
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function parse_int(s) {
  var n = parseInt(s);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, [cljs.core.str(msg), cljs.core.str(" Failed:  "), cljs.core.str(low), cljs.core.str("\x3c\x3d"), cljs.core.str(n), cljs.core.str("\x3c\x3d"), cljs.core.str(high)].join(""));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function parse_and_validate_timestamp(s) {
  var vec__22068 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__22068, 0, null);
  var years = cljs.core.nth.call(null, vec__22068, 1, null);
  var months = cljs.core.nth.call(null, vec__22068, 2, null);
  var days = cljs.core.nth.call(null, vec__22068, 3, null);
  var hours = cljs.core.nth.call(null, vec__22068, 4, null);
  var minutes = cljs.core.nth.call(null, vec__22068, 5, null);
  var seconds = cljs.core.nth.call(null, vec__22068, 6, null);
  var fraction = cljs.core.nth.call(null, vec__22068, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__22068, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__22068, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__22068, 10, null);
  var v = vec__22068;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(s)].join(""));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__15542__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__15542__auto__)) {
        return or__15542__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__15542__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__15542__auto__)) {
        return or__15542__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__15542__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__15542__auto__)) {
        return or__15542__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__15542__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__15542__auto__)) {
        return or__15542__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__15542__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__15542__auto__)) {
        return or__15542__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__15542__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__15542__auto__)) {
        return or__15542__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__15542__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__15542__auto__)) {
        return or__15542__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__15542__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__15542__auto__)) {
        return or__15542__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function parse_timestamp(ts) {
  var temp__4090__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var vec__22070 = temp__4090__auto__;
    var years = cljs.core.nth.call(null, vec__22070, 0, null);
    var months = cljs.core.nth.call(null, vec__22070, 1, null);
    var days = cljs.core.nth.call(null, vec__22070, 2, null);
    var hours = cljs.core.nth.call(null, vec__22070, 3, null);
    var minutes = cljs.core.nth.call(null, vec__22070, 4, null);
    var seconds = cljs.core.nth.call(null, vec__22070, 5, null);
    var ms = cljs.core.nth.call(null, vec__22070, 6, null);
    var offset = cljs.core.nth.call(null, vec__22070, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3);
  } else {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(ts)].join(""));
  }
};
cljs.reader.read_date = function read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__22083_22095 = cljs.core.seq.call(null, form);
    var chunk__22084_22096 = null;
    var count__22085_22097 = 0;
    var i__22086_22098 = 0;
    while (true) {
      if (i__22086_22098 < count__22085_22097) {
        var x_22099 = cljs.core._nth.call(null, chunk__22084_22096, i__22086_22098);
        arr.push(x_22099);
        var G__22100 = seq__22083_22095;
        var G__22101 = chunk__22084_22096;
        var G__22102 = count__22085_22097;
        var G__22103 = i__22086_22098 + 1;
        seq__22083_22095 = G__22100;
        chunk__22084_22096 = G__22101;
        count__22085_22097 = G__22102;
        i__22086_22098 = G__22103;
        continue;
      } else {
        var temp__4092__auto___22104 = cljs.core.seq.call(null, seq__22083_22095);
        if (temp__4092__auto___22104) {
          var seq__22083_22105__$1 = temp__4092__auto___22104;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22083_22105__$1)) {
            var c__16290__auto___22106 = cljs.core.chunk_first.call(null, seq__22083_22105__$1);
            var G__22107 = cljs.core.chunk_rest.call(null, seq__22083_22105__$1);
            var G__22108 = c__16290__auto___22106;
            var G__22109 = cljs.core.count.call(null, c__16290__auto___22106);
            var G__22110 = 0;
            seq__22083_22095 = G__22107;
            chunk__22084_22096 = G__22108;
            count__22085_22097 = G__22109;
            i__22086_22098 = G__22110;
            continue;
          } else {
            var x_22111 = cljs.core.first.call(null, seq__22083_22105__$1);
            arr.push(x_22111);
            var G__22112 = cljs.core.next.call(null, seq__22083_22105__$1);
            var G__22113 = null;
            var G__22114 = 0;
            var G__22115 = 0;
            seq__22083_22095 = G__22112;
            chunk__22084_22096 = G__22113;
            count__22085_22097 = G__22114;
            i__22086_22098 = G__22115;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = function() {
        var obj22088 = {};
        return obj22088;
      }();
      var seq__22089_22116 = cljs.core.seq.call(null, form);
      var chunk__22090_22117 = null;
      var count__22091_22118 = 0;
      var i__22092_22119 = 0;
      while (true) {
        if (i__22092_22119 < count__22091_22118) {
          var vec__22093_22120 = cljs.core._nth.call(null, chunk__22090_22117, i__22092_22119);
          var k_22121 = cljs.core.nth.call(null, vec__22093_22120, 0, null);
          var v_22122 = cljs.core.nth.call(null, vec__22093_22120, 1, null);
          obj[cljs.core.name.call(null, k_22121)] = v_22122;
          var G__22123 = seq__22089_22116;
          var G__22124 = chunk__22090_22117;
          var G__22125 = count__22091_22118;
          var G__22126 = i__22092_22119 + 1;
          seq__22089_22116 = G__22123;
          chunk__22090_22117 = G__22124;
          count__22091_22118 = G__22125;
          i__22092_22119 = G__22126;
          continue;
        } else {
          var temp__4092__auto___22127 = cljs.core.seq.call(null, seq__22089_22116);
          if (temp__4092__auto___22127) {
            var seq__22089_22128__$1 = temp__4092__auto___22127;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__22089_22128__$1)) {
              var c__16290__auto___22129 = cljs.core.chunk_first.call(null, seq__22089_22128__$1);
              var G__22130 = cljs.core.chunk_rest.call(null, seq__22089_22128__$1);
              var G__22131 = c__16290__auto___22129;
              var G__22132 = cljs.core.count.call(null, c__16290__auto___22129);
              var G__22133 = 0;
              seq__22089_22116 = G__22130;
              chunk__22090_22117 = G__22131;
              count__22091_22118 = G__22132;
              i__22092_22119 = G__22133;
              continue;
            } else {
              var vec__22094_22134 = cljs.core.first.call(null, seq__22089_22128__$1);
              var k_22135 = cljs.core.nth.call(null, vec__22094_22134, 0, null);
              var v_22136 = cljs.core.nth.call(null, vec__22094_22134, 1, null);
              obj[cljs.core.name.call(null, k_22135)] = v_22136;
              var G__22137 = cljs.core.next.call(null, seq__22089_22128__$1);
              var G__22138 = null;
              var G__22139 = 0;
              var G__22140 = 0;
              seq__22089_22116 = G__22137;
              chunk__22090_22117 = G__22138;
              count__22091_22118 = G__22139;
              i__22092_22119 = G__22140;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.reader.reader_error.call(null, null, [cljs.core.str("JS literal expects a vector or map containing "), cljs.core.str("only string or unqualified keyword keys")].join(""));
      } else {
        return null;
      }
    }
  }
};
cljs.reader.read_uuid = function read_uuid(uuid) {
  if (typeof uuid === "string") {
    return new cljs.core.UUID(uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), [cljs.core.str(tag)].join(""));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", [cljs.core.str(tag)].join(""), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
      } else {
        return null;
      }
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function register_tag_parser_BANG_(tag, f) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function deregister_tag_parser_BANG_(tag) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(_) {
    return f;
  });
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(_) {
    return null;
  });
  return old_parser;
};
goog.provide("taoensso.encore");
goog.require("cljs.core");
goog.require("goog.structs");
goog.require("goog.Uri.QueryData");
goog.require("goog.string");
goog.require("goog.net.XhrIoPool");
goog.require("goog.events");
goog.require("cljs.reader");
goog.require("goog.net.EventType");
goog.require("goog.string.format");
goog.require("goog.structs");
goog.require("goog.net.ErrorCode");
goog.require("goog.Uri.QueryData");
goog.require("goog.string.StringBuffer");
goog.require("clojure.string");
goog.require("clojure.string");
goog.require("cljs.reader");
goog.require("goog.string");
goog.require("goog.net.XhrIo");
goog.require("goog.net.XhrIoPool");
goog.require("goog.net.XhrIo");
goog.require("goog.events");
taoensso.encore.name_with_attrs = function name_with_attrs(name, macro_args) {
  var vec__22143 = typeof cljs.core.first.call(null, macro_args) === "string" ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, macro_args), cljs.core.next.call(null, macro_args)], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, macro_args], null);
  var docstring = cljs.core.nth.call(null, vec__22143, 0, null);
  var macro_args__$1 = cljs.core.nth.call(null, vec__22143, 1, null);
  var vec__22144 = cljs.core.map_QMARK_.call(null, cljs.core.first.call(null, macro_args__$1)) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, macro_args__$1), cljs.core.next.call(null, macro_args__$1)], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentArrayMap.EMPTY, macro_args__$1], null);
  var attr = cljs.core.nth.call(null, vec__22144, 0, null);
  var macro_args__$2 = cljs.core.nth.call(null, vec__22144, 1, null);
  var attr__$1 = cljs.core.truth_(docstring) ? cljs.core.assoc.call(null, attr, new cljs.core.Keyword(null, "doc", "doc", 1014003882), docstring) : attr;
  var attr__$2 = cljs.core.truth_(cljs.core.meta.call(null, name)) ? cljs.core.conj.call(null, cljs.core.meta.call(null, name), attr__$1) : attr__$1;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta.call(null, name, attr__$2), macro_args__$2], null);
};
taoensso.encore.nnil_QMARK_ = cljs.core.complement.call(null, cljs.core.nil_QMARK_);
taoensso.encore.nblank_QMARK_ = cljs.core.complement.call(null, clojure.string.blank_QMARK_);
taoensso.encore.nblank_str_QMARK_ = function nblank_str_QMARK_(x) {
  var and__15530__auto__ = typeof x === "string";
  if (and__15530__auto__) {
    return taoensso.encore.nblank_QMARK_.call(null, x);
  } else {
    return and__15530__auto__;
  }
};
taoensso.encore.nvec_QMARK_ = function nvec_QMARK_(n, x) {
  return cljs.core.vector_QMARK_.call(null, x) && cljs.core._EQ_.call(null, cljs.core.count.call(null, x), n);
};
taoensso.encore.first_nth = function() {
  var first_nth = null;
  var first_nth__1 = function(coll) {
    return cljs.core.nth.call(null, coll, 0);
  };
  var first_nth__2 = function(coll, not_found) {
    return cljs.core.nth.call(null, coll, 0, not_found);
  };
  first_nth = function(coll, not_found) {
    switch(arguments.length) {
      case 1:
        return first_nth__1.call(this, coll);
      case 2:
        return first_nth__2.call(this, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  first_nth.cljs$core$IFn$_invoke$arity$1 = first_nth__1;
  first_nth.cljs$core$IFn$_invoke$arity$2 = first_nth__2;
  return first_nth;
}();
taoensso.encore.format = function() {
  var format__delegate = function(fmt, args) {
    return cljs.core.apply.call(null, goog.string.format, fmt, args);
  };
  var format = function(fmt, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return format__delegate.call(this, fmt, args);
  };
  format.cljs$lang$maxFixedArity = 1;
  format.cljs$lang$applyTo = function(arglist__22145) {
    var fmt = cljs.core.first(arglist__22145);
    var args = cljs.core.rest(arglist__22145);
    return format__delegate(fmt, args);
  };
  format.cljs$core$IFn$_invoke$arity$variadic = format__delegate;
  return format;
}();
taoensso.encore.parse_bool = function parse_bool(x) {
  if (cljs.core.truth_(x)) {
    if (x === true || x === false) {
      return x;
    } else {
      if (cljs.core._EQ_.call(null, x, "false") || (cljs.core._EQ_.call(null, x, "FALSE") || (cljs.core._EQ_.call(null, x, "0") || cljs.core._EQ_.call(null, x, 0)))) {
        return false;
      } else {
        if (cljs.core._EQ_.call(null, x, "true") || (cljs.core._EQ_.call(null, x, "TRUE") || (cljs.core._EQ_.call(null, x, "1") || cljs.core._EQ_.call(null, x, 1)))) {
          return true;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return null;
          } else {
            return null;
          }
        }
      }
    }
  } else {
    return null;
  }
};
taoensso.encore.as_bool = function as_bool(x) {
  if (cljs.core.truth_(x)) {
    var p = taoensso.encore.parse_bool.call(null, x);
    if (!(p == null)) {
      return p;
    } else {
      throw cljs.core.ex_info.call(null, taoensso.encore.format.call(null, "as-bool failed: %s", x), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1017479852), cljs.core.type.call(null, x)], null));
    }
  } else {
    return null;
  }
};
taoensso.encore.parse_int = function parse_int(x) {
  if (cljs.core.truth_(x)) {
    if (typeof x === "number") {
      return cljs.core.long$.call(null, x);
    } else {
      if (typeof x === "string") {
        var x__$1 = parseInt(x);
        if (cljs.core.truth_(isNaN(x__$1))) {
          return null;
        } else {
          return x__$1;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return null;
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
taoensso.encore.as_int = function as_int(x) {
  if (cljs.core.truth_(x)) {
    var or__15542__auto__ = taoensso.encore.parse_int.call(null, x);
    if (cljs.core.truth_(or__15542__auto__)) {
      return or__15542__auto__;
    } else {
      throw cljs.core.ex_info.call(null, taoensso.encore.format.call(null, "as-int failed: %s", x), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1017479852), cljs.core.type.call(null, x)], null));
    }
  } else {
    return null;
  }
};
taoensso.encore.parse_float = function parse_float(x) {
  if (cljs.core.truth_(x)) {
    if (typeof x === "number") {
      return x;
    } else {
      if (typeof x === "string") {
        var x__$1 = parseFloat(x);
        if (cljs.core.truth_(isNan(x__$1))) {
          return null;
        } else {
          return x__$1;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return null;
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
taoensso.encore.as_float = function as_float(x) {
  var or__15542__auto__ = taoensso.encore.parse_float.call(null, x);
  if (cljs.core.truth_(or__15542__auto__)) {
    return or__15542__auto__;
  } else {
    throw cljs.core.ex_info.call(null, taoensso.encore.format.call(null, "as-float failed: %s", x), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1017479852), cljs.core.type.call(null, x)], null));
  }
};
taoensso.encore.stringy_QMARK_ = function stringy_QMARK_(x) {
  return x instanceof cljs.core.Keyword || typeof x === "string";
};
taoensso.encore.fq_name = function fq_name(x) {
  if (typeof x === "string") {
    return x;
  } else {
    var n = cljs.core.name.call(null, x);
    var temp__4090__auto__ = cljs.core.namespace.call(null, x);
    if (cljs.core.truth_(temp__4090__auto__)) {
      var ns = temp__4090__auto__;
      return[cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(n)].join("");
    } else {
      return n;
    }
  }
};
taoensso.encore.explode_keyword = function explode_keyword(k) {
  return clojure.string.split.call(null, taoensso.encore.fq_name.call(null, k), /[\.\/]/);
};
taoensso.encore.merge_keywords = function() {
  var merge_keywords__delegate = function(ks, p__22146) {
    var vec__22148 = p__22146;
    var as_ns_QMARK_ = cljs.core.nth.call(null, vec__22148, 0, null);
    var parts = cljs.core.reduce.call(null, cljs.core.into, cljs.core.PersistentVector.EMPTY, cljs.core.mapv.call(null, taoensso.encore.explode_keyword, cljs.core.filterv.call(null, cljs.core.identity, ks)));
    if (cljs.core.empty_QMARK_.call(null, parts)) {
      return null;
    } else {
      if (cljs.core.truth_(as_ns_QMARK_)) {
        return cljs.core.keyword.call(null, clojure.string.join.call(null, ".", parts));
      } else {
        var ppop = cljs.core.pop.call(null, parts);
        return cljs.core.keyword.call(null, cljs.core.empty_QMARK_.call(null, ppop) ? null : clojure.string.join.call(null, ".", ppop), cljs.core.peek.call(null, parts));
      }
    }
  };
  var merge_keywords = function(ks, var_args) {
    var p__22146 = null;
    if (arguments.length > 1) {
      p__22146 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return merge_keywords__delegate.call(this, ks, p__22146);
  };
  merge_keywords.cljs$lang$maxFixedArity = 1;
  merge_keywords.cljs$lang$applyTo = function(arglist__22149) {
    var ks = cljs.core.first(arglist__22149);
    var p__22146 = cljs.core.rest(arglist__22149);
    return merge_keywords__delegate(ks, p__22146);
  };
  merge_keywords.cljs$core$IFn$_invoke$arity$variadic = merge_keywords__delegate;
  return merge_keywords;
}();
taoensso.encore.error_QMARK_ = function error_QMARK_(x) {
  var or__15542__auto__ = cljs.core.ex_data.call(null, x);
  if (cljs.core.truth_(or__15542__auto__)) {
    return or__15542__auto__;
  } else {
    return x instanceof Error;
  }
};
taoensso.encore.pos_int_QMARK_ = function pos_int_QMARK_(x) {
  return cljs.core.integer_QMARK_.call(null, x) && x > 0;
};
taoensso.encore.nneg_int_QMARK_ = function nneg_int_QMARK_(x) {
  return cljs.core.integer_QMARK_.call(null, x) && !(x < 0);
};
taoensso.encore.pow = function pow(n, exp) {
  return Math.pow.call(null, n, exp);
};
taoensso.encore.round = function() {
  var round__delegate = function(n, p__22150) {
    var vec__22153 = p__22150;
    var type = cljs.core.nth.call(null, vec__22153, 0, null);
    var nplaces = cljs.core.nth.call(null, vec__22153, 1, null);
    var modifier = cljs.core.truth_(nplaces) ? Math.pow.call(null, 10, nplaces) : null;
    var n_STAR_ = cljs.core.not.call(null, modifier) ? n : n * modifier;
    var rounded = function() {
      var G__22154 = function() {
        var or__15542__auto__ = type;
        if (cljs.core.truth_(or__15542__auto__)) {
          return or__15542__auto__;
        } else {
          return new cljs.core.Keyword(null, "round", "round", 1122608384);
        }
      }();
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "trunc", "trunc", 1124544798), G__22154)) {
        return cljs.core.long$.call(null, n_STAR_);
      } else {
        if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "ceil", "ceil", 1016953975), G__22154)) {
          return cljs.core.long$.call(null, Math.ceil.call(null, n_STAR_));
        } else {
          if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "floor", "floor", 1111431038), G__22154)) {
            return cljs.core.long$.call(null, Math.floor.call(null, n_STAR_));
          } else {
            if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "round", "round", 1122608384), G__22154)) {
              return Math.round.call(null, n_STAR_);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                throw cljs.core.ex_info.call(null, "Unknown round type", new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1017479852), type], null));
              } else {
                return null;
              }
            }
          }
        }
      }
    }();
    if (cljs.core.not.call(null, modifier)) {
      return rounded;
    } else {
      return rounded / modifier;
    }
  };
  var round = function(n, var_args) {
    var p__22150 = null;
    if (arguments.length > 1) {
      p__22150 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return round__delegate.call(this, n, p__22150);
  };
  round.cljs$lang$maxFixedArity = 1;
  round.cljs$lang$applyTo = function(arglist__22155) {
    var n = cljs.core.first(arglist__22155);
    var p__22150 = cljs.core.rest(arglist__22155);
    return round__delegate(n, p__22150);
  };
  round.cljs$core$IFn$_invoke$arity$variadic = round__delegate;
  return round;
}();
taoensso.encore.round_STAR_ = taoensso.encore.round;
taoensso.encore.round2 = function round2(n) {
  return Math.round.call(null, n * 1E3) / 1E3;
};
taoensso.encore.uuid_str = function uuid_str() {
  var fs = function(n) {
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.repeatedly.call(null, n, function() {
      return cljs.core.rand_int.call(null, 16).toString(16);
    }));
  };
  var g = function(fs) {
    return function() {
      return(8 | 3 & cljs.core.rand_int.call(null, 15)).toString(16);
    };
  }(fs);
  var sb = (new goog.string.StringBuffer).append(fs.call(null, 8), "-", fs.call(null, 4), "-4", fs.call(null, 3), "-", g.call(null), fs.call(null, 3), "-", fs.call(null, 12));
  return sb.toString();
};
taoensso.encore.exp_backoff = function() {
  var exp_backoff__delegate = function(nattempt, p__22156) {
    var vec__22159 = p__22156;
    var map__22160 = cljs.core.nth.call(null, vec__22159, 0, null);
    var map__22160__$1 = cljs.core.seq_QMARK_.call(null, map__22160) ? cljs.core.apply.call(null, cljs.core.hash_map, map__22160) : map__22160;
    var factor = cljs.core.get.call(null, map__22160__$1, new cljs.core.Keyword(null, "factor", "factor", 4026723521), 1E3);
    var min_SINGLEQUOTE_ = cljs.core.get.call(null, map__22160__$1, new cljs.core.Keyword(null, "min", "min", 1014012356));
    var max_SINGLEQUOTE_ = cljs.core.get.call(null, map__22160__$1, new cljs.core.Keyword(null, "max", "max", 1014012118));
    var binary_exp = Math.pow.call(null, 2, nattempt - 1);
    var time = (binary_exp + cljs.core.rand.call(null, binary_exp)) * 0.5 * factor;
    return cljs.core.long$.call(null, function() {
      var time__$1 = cljs.core.truth_(min_SINGLEQUOTE_) ? function() {
        var x__15849__auto__ = min_SINGLEQUOTE_;
        var y__15850__auto__ = time;
        return x__15849__auto__ > y__15850__auto__ ? x__15849__auto__ : y__15850__auto__;
      }() : time;
      var time__$2 = cljs.core.truth_(max_SINGLEQUOTE_) ? function() {
        var x__15856__auto__ = max_SINGLEQUOTE_;
        var y__15857__auto__ = time__$1;
        return x__15856__auto__ < y__15857__auto__ ? x__15856__auto__ : y__15857__auto__;
      }() : time__$1;
      return time__$2;
    }());
  };
  var exp_backoff = function(nattempt, var_args) {
    var p__22156 = null;
    if (arguments.length > 1) {
      p__22156 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return exp_backoff__delegate.call(this, nattempt, p__22156);
  };
  exp_backoff.cljs$lang$maxFixedArity = 1;
  exp_backoff.cljs$lang$applyTo = function(arglist__22161) {
    var nattempt = cljs.core.first(arglist__22161);
    var p__22156 = cljs.core.rest(arglist__22161);
    return exp_backoff__delegate(nattempt, p__22156);
  };
  exp_backoff.cljs$core$IFn$_invoke$arity$variadic = exp_backoff__delegate;
  return exp_backoff;
}();
taoensso.encore.now_udt = function now_udt() {
  return(new Date).valueOf();
};
taoensso.encore.now_udt_mock_fn = function() {
  var now_udt_mock_fn__delegate = function(p__22162) {
    var vec__22164 = p__22162;
    var mock_udts = cljs.core.nth.call(null, vec__22164, 0, null);
    var mock_udts__$1 = function() {
      var or__15542__auto__ = mock_udts;
      if (cljs.core.truth_(or__15542__auto__)) {
        return or__15542__auto__;
      } else {
        return cljs.core.range.call(null);
      }
    }();
    var idx = cljs.core.atom.call(null, -1);
    return function() {
      return cljs.core.nth.call(null, mock_udts__$1, cljs.core.swap_BANG_.call(null, idx, cljs.core.inc));
    };
  };
  var now_udt_mock_fn = function(var_args) {
    var p__22162 = null;
    if (arguments.length > 0) {
      p__22162 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return now_udt_mock_fn__delegate.call(this, p__22162);
  };
  now_udt_mock_fn.cljs$lang$maxFixedArity = 0;
  now_udt_mock_fn.cljs$lang$applyTo = function(arglist__22165) {
    var p__22162 = cljs.core.seq(arglist__22165);
    return now_udt_mock_fn__delegate(p__22162);
  };
  now_udt_mock_fn.cljs$core$IFn$_invoke$arity$variadic = now_udt_mock_fn__delegate;
  return now_udt_mock_fn;
}();
taoensso.encore.secs__GT_ms = function secs__GT_ms(secs) {
  return secs * 1E3;
};
taoensso.encore.ms__GT_secs = function ms__GT_secs(ms) {
  return cljs.core.quot.call(null, ms, 1E3);
};
taoensso.encore.ms = function() {
  var ms__delegate = function(p__22166) {
    var map__22168 = p__22166;
    var map__22168__$1 = cljs.core.seq_QMARK_.call(null, map__22168) ? cljs.core.apply.call(null, cljs.core.hash_map, map__22168) : map__22168;
    var opts = map__22168__$1;
    var ms__$1 = cljs.core.get.call(null, map__22168__$1, new cljs.core.Keyword(null, "ms", "ms", 1013907736));
    var msecs = cljs.core.get.call(null, map__22168__$1, new cljs.core.Keyword(null, "msecs", "msecs", 1118094241));
    var secs = cljs.core.get.call(null, map__22168__$1, new cljs.core.Keyword(null, "secs", "secs", 1017430452));
    var mins = cljs.core.get.call(null, map__22168__$1, new cljs.core.Keyword(null, "mins", "mins", 1017255891));
    var hours = cljs.core.get.call(null, map__22168__$1, new cljs.core.Keyword(null, "hours", "hours", 1113373313));
    var days = cljs.core.get.call(null, map__22168__$1, new cljs.core.Keyword(null, "days", "days", 1016980425));
    var weeks = cljs.core.get.call(null, map__22168__$1, new cljs.core.Keyword(null, "weeks", "weeks", 1126912625));
    var months = cljs.core.get.call(null, map__22168__$1, new cljs.core.Keyword(null, "months", "months", 4240384357));
    var years = cljs.core.get.call(null, map__22168__$1, new cljs.core.Keyword(null, "years", "years", 1128756040));
    if (cljs.core.every_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 9, [new cljs.core.Keyword(null, "weeks", "weeks", 1126912625), null, new cljs.core.Keyword(null, "secs", "secs", 1017430452), null, new cljs.core.Keyword(null, "msecs", "msecs", 1118094241), null, new cljs.core.Keyword(null, "mins", "mins", 1017255891), null, new cljs.core.Keyword(null, "hours", "hours", 1113373313), null, new cljs.core.Keyword(null, "years", "years", 1128756040), 
    null, new cljs.core.Keyword(null, "days", "days", 1016980425), null, new cljs.core.Keyword(null, "ms", "ms", 1013907736), null, new cljs.core.Keyword(null, "months", "months", 4240384357), null], null), null), cljs.core.keys.call(null, opts))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "every?", "every?", 1363110461, null), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 9, [new cljs.core.Keyword(null, "weeks", "weeks", 1126912625), null, new cljs.core.Keyword(null, "secs", "secs", 1017430452), null, new cljs.core.Keyword(null, "msecs", "msecs", 1118094241), null, new cljs.core.Keyword(null, "mins", "mins", 1017255891), 
      null, new cljs.core.Keyword(null, "hours", "hours", 1113373313), null, new cljs.core.Keyword(null, "years", "years", 1128756040), null, new cljs.core.Keyword(null, "days", "days", 1016980425), null, new cljs.core.Keyword(null, "ms", "ms", 1013907736), null, new cljs.core.Keyword(null, "months", "months", 4240384357), null], null), null), cljs.core.list(new cljs.core.Symbol(null, "keys", "keys", -1637242963, null), new cljs.core.Symbol(null, "opts", "opts", -1637113383, null)))))].join(""));
    }
    return taoensso.encore.round.call(null, (cljs.core.truth_(years) ? years * 1E3 * 60 * 60 * 24 * 365 : 0) + (cljs.core.truth_(months) ? months * 1E3 * 60 * 60 * 24 * 29.53 : 0) + (cljs.core.truth_(weeks) ? weeks * 1E3 * 60 * 60 * 24 * 7 : 0) + (cljs.core.truth_(days) ? days * 1E3 * 60 * 60 * 24 : 0) + (cljs.core.truth_(hours) ? hours * 1E3 * 60 * 60 : 0) + (cljs.core.truth_(mins) ? mins * 1E3 * 60 : 0) + (cljs.core.truth_(secs) ? secs * 1E3 : 0) + (cljs.core.truth_(msecs) ? msecs : 0) + (cljs.core.truth_(ms__$1) ? 
    ms__$1 : 0));
  };
  var ms = function(var_args) {
    var p__22166 = null;
    if (arguments.length > 0) {
      p__22166 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return ms__delegate.call(this, p__22166);
  };
  ms.cljs$lang$maxFixedArity = 0;
  ms.cljs$lang$applyTo = function(arglist__22169) {
    var p__22166 = cljs.core.seq(arglist__22169);
    return ms__delegate(p__22166);
  };
  ms.cljs$core$IFn$_invoke$arity$variadic = ms__delegate;
  return ms;
}();
taoensso.encore.secs = cljs.core.comp.call(null, taoensso.encore.ms__GT_secs, taoensso.encore.ms);
taoensso.encore.Swapped = function(new_val, return_val, __meta, __extmap) {
  this.new_val = new_val;
  this.return_val = return_val;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 2) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
taoensso.encore.Swapped.prototype.cljs$core$IHash$_hash$arity$1 = function(this__16123__auto__) {
  var self__ = this;
  var this__16123__auto____$1 = this;
  var h__15953__auto__ = self__.__hash;
  if (!(h__15953__auto__ == null)) {
    return h__15953__auto__;
  } else {
    var h__15953__auto____$1 = cljs.core.hash_imap.call(null, this__16123__auto____$1);
    self__.__hash = h__15953__auto____$1;
    return h__15953__auto____$1;
  }
};
taoensso.encore.Swapped.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__16128__auto__, k__16129__auto__) {
  var self__ = this;
  var this__16128__auto____$1 = this;
  return cljs.core._lookup.call(null, this__16128__auto____$1, k__16129__auto__, null);
};
taoensso.encore.Swapped.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__16130__auto__, k22171, else__16131__auto__) {
  var self__ = this;
  var this__16130__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k22171, new cljs.core.Keyword(null, "new-val", "new-val", 2857961702))) {
    return self__.new_val;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k22171, new cljs.core.Keyword(null, "return-val", "return-val", 2349945974))) {
      return self__.return_val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.get.call(null, self__.__extmap, k22171, else__16131__auto__);
      } else {
        return null;
      }
    }
  }
};
taoensso.encore.Swapped.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__16135__auto__, k__16136__auto__, G__22170) {
  var self__ = this;
  var this__16135__auto____$1 = this;
  var pred__22173 = cljs.core.keyword_identical_QMARK_;
  var expr__22174 = k__16136__auto__;
  if (cljs.core.truth_(pred__22173.call(null, new cljs.core.Keyword(null, "new-val", "new-val", 2857961702), expr__22174))) {
    return new taoensso.encore.Swapped(G__22170, self__.return_val, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__22173.call(null, new cljs.core.Keyword(null, "return-val", "return-val", 2349945974), expr__22174))) {
      return new taoensso.encore.Swapped(self__.new_val, G__22170, self__.__meta, self__.__extmap, null);
    } else {
      return new taoensso.encore.Swapped(self__.new_val, self__.return_val, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__16136__auto__, G__22170), null);
    }
  }
};
taoensso.encore.Swapped.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__16142__auto__, writer__16143__auto__, opts__16144__auto__) {
  var self__ = this;
  var this__16142__auto____$1 = this;
  var pr_pair__16145__auto__ = function(keyval__16146__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__16143__auto__, cljs.core.pr_writer, "", " ", "", opts__16144__auto__, keyval__16146__auto__);
  };
  return cljs.core.pr_sequential_writer.call(null, writer__16143__auto__, pr_pair__16145__auto__, "#taoensso.encore.Swapped{", ", ", "}", opts__16144__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "new-val", "new-val", 2857961702), self__.new_val], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "return-val", "return-val", 2349945974), self__.return_val], null)], null), self__.__extmap));
};
taoensso.encore.Swapped.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__16133__auto__, entry__16134__auto__) {
  var self__ = this;
  var this__16133__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__16134__auto__)) {
    return cljs.core._assoc.call(null, this__16133__auto____$1, cljs.core._nth.call(null, entry__16134__auto__, 0), cljs.core._nth.call(null, entry__16134__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__16133__auto____$1, entry__16134__auto__);
  }
};
taoensso.encore.Swapped.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__16140__auto__) {
  var self__ = this;
  var this__16140__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "new-val", "new-val", 2857961702), self__.new_val], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "return-val", "return-val", 2349945974), self__.return_val], null)], null), 
  self__.__extmap));
};
taoensso.encore.Swapped.prototype.cljs$core$ICounted$_count$arity$1 = function(this__16132__auto__) {
  var self__ = this;
  var this__16132__auto____$1 = this;
  return 2 + cljs.core.count.call(null, self__.__extmap);
};
taoensso.encore.Swapped.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__16124__auto__, other__16125__auto__) {
  var self__ = this;
  var this__16124__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__15530__auto__ = other__16125__auto__;
    if (cljs.core.truth_(and__15530__auto__)) {
      return this__16124__auto____$1.constructor === other__16125__auto__.constructor && cljs.core.equiv_map.call(null, this__16124__auto____$1, other__16125__auto__);
    } else {
      return and__15530__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
taoensso.encore.Swapped.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__16127__auto__, G__22170) {
  var self__ = this;
  var this__16127__auto____$1 = this;
  return new taoensso.encore.Swapped(self__.new_val, self__.return_val, G__22170, self__.__extmap, self__.__hash);
};
taoensso.encore.Swapped.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__16122__auto__) {
  var self__ = this;
  var this__16122__auto____$1 = this;
  return new taoensso.encore.Swapped(self__.new_val, self__.return_val, self__.__meta, self__.__extmap, self__.__hash);
};
taoensso.encore.Swapped.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__16126__auto__) {
  var self__ = this;
  var this__16126__auto____$1 = this;
  return self__.__meta;
};
taoensso.encore.Swapped.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__16137__auto__, k__16138__auto__) {
  var self__ = this;
  var this__16137__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "return-val", "return-val", 2349945974), null, new cljs.core.Keyword(null, "new-val", "new-val", 2857961702), null], null), null), k__16138__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__16137__auto____$1), self__.__meta), k__16138__auto__);
  } else {
    return new taoensso.encore.Swapped(self__.new_val, self__.return_val, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__16138__auto__)), null);
  }
};
taoensso.encore.Swapped.cljs$lang$type = true;
taoensso.encore.Swapped.cljs$lang$ctorPrSeq = function(this__16162__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "taoensso.encore/Swapped");
};
taoensso.encore.Swapped.cljs$lang$ctorPrWriter = function(this__16162__auto__, writer__16163__auto__) {
  return cljs.core._write.call(null, writer__16163__auto__, "taoensso.encore/Swapped");
};
taoensso.encore.__GT_Swapped = function __GT_Swapped(new_val, return_val) {
  return new taoensso.encore.Swapped(new_val, return_val);
};
taoensso.encore.map__GT_Swapped = function map__GT_Swapped(G__22172) {
  return new taoensso.encore.Swapped((new cljs.core.Keyword(null, "new-val", "new-val", 2857961702)).cljs$core$IFn$_invoke$arity$1(G__22172), (new cljs.core.Keyword(null, "return-val", "return-val", 2349945974)).cljs$core$IFn$_invoke$arity$1(G__22172), null, cljs.core.dissoc.call(null, G__22172, new cljs.core.Keyword(null, "new-val", "new-val", 2857961702), new cljs.core.Keyword(null, "return-val", "return-val", 2349945974)));
};
taoensso.encore.swapped = function swapped(new_val, return_val) {
  return taoensso.encore.__GT_Swapped.call(null, new_val, return_val);
};
taoensso.encore.as_swapped = function as_swapped(x) {
  if (x instanceof taoensso.encore.Swapped) {
    return x;
  } else {
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "new-val", "new-val", 2857961702), x, new cljs.core.Keyword(null, "return-val", "return-val", 2349945974), x], null);
  }
};
taoensso.encore.swap_in_BANG_ = function() {
  var swap_in_BANG___delegate = function(atom_, ks, f, args) {
    var ks__$1 = ks == null || cljs.core.empty_QMARK_.call(null, ks) ? null : ks;
    while (true) {
      var old_val = cljs.core.deref.call(null, atom_);
      var map__22178 = cljs.core.not.call(null, ks__$1) ? taoensso.encore.as_swapped.call(null, cljs.core.apply.call(null, f, old_val, args)) : function() {
        var old_val_in = cljs.core.get_in.call(null, old_val, ks__$1);
        var map__22179 = taoensso.encore.as_swapped.call(null, cljs.core.apply.call(null, f, old_val_in, args));
        var map__22179__$1 = cljs.core.seq_QMARK_.call(null, map__22179) ? cljs.core.apply.call(null, cljs.core.hash_map, map__22179) : map__22179;
        var new_val_in = cljs.core.get.call(null, map__22179__$1, new cljs.core.Keyword(null, "new-val", "new-val", 2857961702));
        var return_val = cljs.core.get.call(null, map__22179__$1, new cljs.core.Keyword(null, "return-val", "return-val", 2349945974));
        return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "new-val", "new-val", 2857961702), cljs.core.assoc_in.call(null, old_val, ks__$1, new_val_in), new cljs.core.Keyword(null, "return-val", "return-val", 2349945974), return_val], null);
      }();
      var map__22178__$1 = cljs.core.seq_QMARK_.call(null, map__22178) ? cljs.core.apply.call(null, cljs.core.hash_map, map__22178) : map__22178;
      var return_val = cljs.core.get.call(null, map__22178__$1, new cljs.core.Keyword(null, "return-val", "return-val", 2349945974));
      var new_val = cljs.core.get.call(null, map__22178__$1, new cljs.core.Keyword(null, "new-val", "new-val", 2857961702));
      if (!cljs.core.compare_and_set_BANG_.call(null, atom_, old_val, new_val)) {
        continue;
      } else {
        return return_val;
      }
      break;
    }
  };
  var swap_in_BANG_ = function(atom_, ks, f, var_args) {
    var args = null;
    if (arguments.length > 3) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return swap_in_BANG___delegate.call(this, atom_, ks, f, args);
  };
  swap_in_BANG_.cljs$lang$maxFixedArity = 3;
  swap_in_BANG_.cljs$lang$applyTo = function(arglist__22180) {
    var atom_ = cljs.core.first(arglist__22180);
    arglist__22180 = cljs.core.next(arglist__22180);
    var ks = cljs.core.first(arglist__22180);
    arglist__22180 = cljs.core.next(arglist__22180);
    var f = cljs.core.first(arglist__22180);
    var args = cljs.core.rest(arglist__22180);
    return swap_in_BANG___delegate(atom_, ks, f, args);
  };
  swap_in_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_in_BANG___delegate;
  return swap_in_BANG_;
}();
taoensso.encore.reset_in_BANG_ = function reset_in_BANG_(atom_, korks, newval) {
  return taoensso.encore.swap_in_BANG_.call(null, atom_, korks, cljs.core.constantly.call(null, newval));
};
taoensso.encore.dissoc_in = function() {
  var dissoc_in__delegate = function(m, ks, dissoc_ks) {
    return cljs.core.apply.call(null, cljs.core.update_in, m, ks, cljs.core.dissoc, dissoc_ks);
  };
  var dissoc_in = function(m, ks, var_args) {
    var dissoc_ks = null;
    if (arguments.length > 2) {
      dissoc_ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return dissoc_in__delegate.call(this, m, ks, dissoc_ks);
  };
  dissoc_in.cljs$lang$maxFixedArity = 2;
  dissoc_in.cljs$lang$applyTo = function(arglist__22181) {
    var m = cljs.core.first(arglist__22181);
    arglist__22181 = cljs.core.next(arglist__22181);
    var ks = cljs.core.first(arglist__22181);
    var dissoc_ks = cljs.core.rest(arglist__22181);
    return dissoc_in__delegate(m, ks, dissoc_ks);
  };
  dissoc_in.cljs$core$IFn$_invoke$arity$variadic = dissoc_in__delegate;
  return dissoc_in;
}();
taoensso.encore.contains_in_QMARK_ = function contains_in_QMARK_(coll, ks) {
  return cljs.core.contains_QMARK_.call(null, cljs.core.get_in.call(null, coll, cljs.core.butlast.call(null, ks)), cljs.core.last.call(null, ks));
};
taoensso.encore.assoc_some = function() {
  var assoc_some__delegate = function(m, kvs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, kvs))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1543640034, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -1545680184, null), new cljs.core.Symbol(null, "kvs", "kvs", -1640424927, null)))))].join(""));
    }
    return cljs.core.into.call(null, function() {
      var or__15542__auto__ = m;
      if (cljs.core.truth_(or__15542__auto__)) {
        return or__15542__auto__;
      } else {
        return cljs.core.PersistentArrayMap.EMPTY;
      }
    }(), function() {
      var iter__16259__auto__ = function iter__22190(s__22191) {
        return new cljs.core.LazySeq(null, function() {
          var s__22191__$1 = s__22191;
          while (true) {
            var temp__4092__auto__ = cljs.core.seq.call(null, s__22191__$1);
            if (temp__4092__auto__) {
              var s__22191__$2 = temp__4092__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, s__22191__$2)) {
                var c__16257__auto__ = cljs.core.chunk_first.call(null, s__22191__$2);
                var size__16258__auto__ = cljs.core.count.call(null, c__16257__auto__);
                var b__22193 = cljs.core.chunk_buffer.call(null, size__16258__auto__);
                if (function() {
                  var i__22192 = 0;
                  while (true) {
                    if (i__22192 < size__16258__auto__) {
                      var vec__22196 = cljs.core._nth.call(null, c__16257__auto__, i__22192);
                      var k = cljs.core.nth.call(null, vec__22196, 0, null);
                      var v = cljs.core.nth.call(null, vec__22196, 1, null);
                      if (!(v == null)) {
                        cljs.core.chunk_append.call(null, b__22193, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null));
                        var G__22198 = i__22192 + 1;
                        i__22192 = G__22198;
                        continue;
                      } else {
                        var G__22199 = i__22192 + 1;
                        i__22192 = G__22199;
                        continue;
                      }
                    } else {
                      return true;
                    }
                    break;
                  }
                }()) {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__22193), iter__22190.call(null, cljs.core.chunk_rest.call(null, s__22191__$2)));
                } else {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__22193), null);
                }
              } else {
                var vec__22197 = cljs.core.first.call(null, s__22191__$2);
                var k = cljs.core.nth.call(null, vec__22197, 0, null);
                var v = cljs.core.nth.call(null, vec__22197, 1, null);
                if (!(v == null)) {
                  return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null), iter__22190.call(null, cljs.core.rest.call(null, s__22191__$2)));
                } else {
                  var G__22200 = cljs.core.rest.call(null, s__22191__$2);
                  s__22191__$1 = G__22200;
                  continue;
                }
              }
            } else {
              return null;
            }
            break;
          }
        }, null, null);
      };
      return iter__16259__auto__.call(null, cljs.core.partition.call(null, 2, kvs));
    }());
  };
  var assoc_some = function(m, var_args) {
    var kvs = null;
    if (arguments.length > 1) {
      kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return assoc_some__delegate.call(this, m, kvs);
  };
  assoc_some.cljs$lang$maxFixedArity = 1;
  assoc_some.cljs$lang$applyTo = function(arglist__22201) {
    var m = cljs.core.first(arglist__22201);
    var kvs = cljs.core.rest(arglist__22201);
    return assoc_some__delegate(m, kvs);
  };
  assoc_some.cljs$core$IFn$_invoke$arity$variadic = assoc_some__delegate;
  return assoc_some;
}();
taoensso.encore.assoc_when = function() {
  var assoc_when__delegate = function(m, kvs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, kvs))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1543640034, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -1545680184, null), new cljs.core.Symbol(null, "kvs", "kvs", -1640424927, null)))))].join(""));
    }
    return cljs.core.into.call(null, function() {
      var or__15542__auto__ = m;
      if (cljs.core.truth_(or__15542__auto__)) {
        return or__15542__auto__;
      } else {
        return cljs.core.PersistentArrayMap.EMPTY;
      }
    }(), function() {
      var iter__16259__auto__ = function iter__22210(s__22211) {
        return new cljs.core.LazySeq(null, function() {
          var s__22211__$1 = s__22211;
          while (true) {
            var temp__4092__auto__ = cljs.core.seq.call(null, s__22211__$1);
            if (temp__4092__auto__) {
              var s__22211__$2 = temp__4092__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, s__22211__$2)) {
                var c__16257__auto__ = cljs.core.chunk_first.call(null, s__22211__$2);
                var size__16258__auto__ = cljs.core.count.call(null, c__16257__auto__);
                var b__22213 = cljs.core.chunk_buffer.call(null, size__16258__auto__);
                if (function() {
                  var i__22212 = 0;
                  while (true) {
                    if (i__22212 < size__16258__auto__) {
                      var vec__22216 = cljs.core._nth.call(null, c__16257__auto__, i__22212);
                      var k = cljs.core.nth.call(null, vec__22216, 0, null);
                      var v = cljs.core.nth.call(null, vec__22216, 1, null);
                      if (cljs.core.truth_(v)) {
                        cljs.core.chunk_append.call(null, b__22213, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null));
                        var G__22218 = i__22212 + 1;
                        i__22212 = G__22218;
                        continue;
                      } else {
                        var G__22219 = i__22212 + 1;
                        i__22212 = G__22219;
                        continue;
                      }
                    } else {
                      return true;
                    }
                    break;
                  }
                }()) {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__22213), iter__22210.call(null, cljs.core.chunk_rest.call(null, s__22211__$2)));
                } else {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__22213), null);
                }
              } else {
                var vec__22217 = cljs.core.first.call(null, s__22211__$2);
                var k = cljs.core.nth.call(null, vec__22217, 0, null);
                var v = cljs.core.nth.call(null, vec__22217, 1, null);
                if (cljs.core.truth_(v)) {
                  return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null), iter__22210.call(null, cljs.core.rest.call(null, s__22211__$2)));
                } else {
                  var G__22220 = cljs.core.rest.call(null, s__22211__$2);
                  s__22211__$1 = G__22220;
                  continue;
                }
              }
            } else {
              return null;
            }
            break;
          }
        }, null, null);
      };
      return iter__16259__auto__.call(null, cljs.core.partition.call(null, 2, kvs));
    }());
  };
  var assoc_when = function(m, var_args) {
    var kvs = null;
    if (arguments.length > 1) {
      kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return assoc_when__delegate.call(this, m, kvs);
  };
  assoc_when.cljs$lang$maxFixedArity = 1;
  assoc_when.cljs$lang$applyTo = function(arglist__22221) {
    var m = cljs.core.first(arglist__22221);
    var kvs = cljs.core.rest(arglist__22221);
    return assoc_when__delegate(m, kvs);
  };
  assoc_when.cljs$core$IFn$_invoke$arity$variadic = assoc_when__delegate;
  return assoc_when;
}();
taoensso.encore.seq_kvs = cljs.core.partial.call(null, cljs.core.reduce, cljs.core.concat);
taoensso.encore.mapply = function() {
  var mapply__delegate = function(f, args) {
    return cljs.core.apply.call(null, f, cljs.core.apply.call(null, cljs.core.concat, cljs.core.butlast.call(null, args), cljs.core.last.call(null, args)));
  };
  var mapply = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return mapply__delegate.call(this, f, args);
  };
  mapply.cljs$lang$maxFixedArity = 1;
  mapply.cljs$lang$applyTo = function(arglist__22222) {
    var f = cljs.core.first(arglist__22222);
    var args = cljs.core.rest(arglist__22222);
    return mapply__delegate(f, args);
  };
  mapply.cljs$core$IFn$_invoke$arity$variadic = mapply__delegate;
  return mapply;
}();
taoensso.encore.map_kvs = function map_kvs(kf, vf, m) {
  if (cljs.core.truth_(m)) {
    var kf__$1 = !(kf === new cljs.core.Keyword(null, "keywordize", "keywordize", 1249131069)) ? kf : function(k, _) {
      return cljs.core.keyword.call(null, k);
    };
    var vf__$1 = !(vf === new cljs.core.Keyword(null, "keywordize", "keywordize", 1249131069)) ? vf : function(kf__$1) {
      return function(_, v) {
        return cljs.core.keyword.call(null, v);
      };
    }(kf__$1);
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce_kv.call(null, function(m__$1, k, v) {
      return cljs.core.assoc_BANG_.call(null, m__$1, cljs.core.truth_(kf__$1) ? kf__$1.call(null, k, v) : k, cljs.core.truth_(vf__$1) ? vf__$1.call(null, v, v) : v);
    }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), function() {
      var or__15542__auto__ = m;
      if (cljs.core.truth_(or__15542__auto__)) {
        return or__15542__auto__;
      } else {
        return cljs.core.PersistentArrayMap.EMPTY;
      }
    }()));
  } else {
    return null;
  }
};
taoensso.encore.map_keys = function map_keys(f, m) {
  return taoensso.encore.map_kvs.call(null, function(k, _) {
    return f.call(null, k);
  }, null, m);
};
taoensso.encore.map_vals = function map_vals(f, m) {
  return taoensso.encore.map_kvs.call(null, null, function(_, v) {
    return f.call(null, v);
  }, m);
};
taoensso.encore.filter_kvs = function filter_kvs(predk, predv, m) {
  if (cljs.core.truth_(m)) {
    return cljs.core.reduce_kv.call(null, function(m__$1, k, v) {
      if (cljs.core.truth_(function() {
        var and__15530__auto__ = predk.call(null, k);
        if (cljs.core.truth_(and__15530__auto__)) {
          return predv.call(null, v);
        } else {
          return and__15530__auto__;
        }
      }())) {
        return m__$1;
      } else {
        return cljs.core.dissoc.call(null, m__$1, k);
      }
    }, function() {
      var or__15542__auto__ = m;
      if (cljs.core.truth_(or__15542__auto__)) {
        return or__15542__auto__;
      } else {
        return cljs.core.PersistentArrayMap.EMPTY;
      }
    }(), function() {
      var or__15542__auto__ = m;
      if (cljs.core.truth_(or__15542__auto__)) {
        return or__15542__auto__;
      } else {
        return cljs.core.PersistentArrayMap.EMPTY;
      }
    }());
  } else {
    return null;
  }
};
taoensso.encore.filter_keys = function filter_keys(pred, m) {
  return taoensso.encore.filter_kvs.call(null, pred, cljs.core.constantly.call(null, true), m);
};
taoensso.encore.filter_vals = function filter_vals(pred, m) {
  return taoensso.encore.filter_kvs.call(null, cljs.core.constantly.call(null, true), pred, m);
};
taoensso.encore.remove_vals = function remove_vals(pred, m) {
  return cljs.core.reduce_kv.call(null, function(m__$1, k, v) {
    if (cljs.core.truth_(pred.call(null, v))) {
      return cljs.core.dissoc.call(null, m__$1, k);
    } else {
      return m__$1;
    }
  }, m, m);
};
taoensso.encore.keywordize_map = function keywordize_map(m) {
  if (cljs.core.truth_(m)) {
    return cljs.core.reduce_kv.call(null, function(m__$1, k, v) {
      return cljs.core.assoc.call(null, m__$1, cljs.core.keyword.call(null, k), v);
    }, cljs.core.PersistentArrayMap.EMPTY, m);
  } else {
    return null;
  }
};
taoensso.encore.as_map = function() {
  var as_map__delegate = function(coll, p__22223) {
    var vec__22229 = p__22223;
    var kf = cljs.core.nth.call(null, vec__22229, 0, null);
    var vf = cljs.core.nth.call(null, vec__22229, 1, null);
    if (cljs.core.coll_QMARK_.call(null, coll)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "coll?", "coll?", -1545688948, null), new cljs.core.Symbol(null, "coll", "coll", -1637472091, null))))].join(""));
    }
    if (kf == null || (cljs.core.fn_QMARK_.call(null, kf) || kf === new cljs.core.Keyword(null, "keywordize", "keywordize", 1249131069))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", -1640527972, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", -1637150201, null), new cljs.core.Symbol(null, "kf", "kf", -1640528108, null)), cljs.core.list(new cljs.core.Symbol(null, "fn?", "fn?", -1640430032, null), new cljs.core.Symbol(null, "kf", "kf", -1640528108, null)), cljs.core.list(new cljs.core.Symbol(null, "identical?", 
      "identical?", 1035906019, null), new cljs.core.Symbol(null, "kf", "kf", -1640528108, null), new cljs.core.Keyword(null, "keywordize", "keywordize", 1249131069)))))].join(""));
    }
    if (vf == null || cljs.core.fn_QMARK_.call(null, vf)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", -1640527972, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", -1637150201, null), new cljs.core.Symbol(null, "vf", "vf", -1640527767, null)), cljs.core.list(new cljs.core.Symbol(null, "fn?", "fn?", -1640430032, null), new cljs.core.Symbol(null, "vf", "vf", -1640527767, null)))))].join(""));
    }
    var _PERCENT_ = function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s_SINGLEQUOTE_ = temp__4092__auto__;
        var kf__$1 = !(kf === new cljs.core.Keyword(null, "keywordize", "keywordize", 1249131069)) ? kf : function(s_SINGLEQUOTE_, temp__4092__auto__) {
          return function(k, _) {
            return cljs.core.keyword.call(null, k);
          };
        }(s_SINGLEQUOTE_, temp__4092__auto__);
        var m = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
        var G__22231 = s_SINGLEQUOTE_;
        var vec__22232 = G__22231;
        var k = cljs.core.nth.call(null, vec__22232, 0, null);
        var v = cljs.core.nth.call(null, vec__22232, 1, null);
        var s = vec__22232;
        var m__$1 = m;
        var G__22231__$1 = G__22231;
        while (true) {
          var m__$2 = m__$1;
          var vec__22233 = G__22231__$1;
          var k__$1 = cljs.core.nth.call(null, vec__22233, 0, null);
          var v__$1 = cljs.core.nth.call(null, vec__22233, 1, null);
          var s__$1 = vec__22233;
          var k__$2 = cljs.core.not.call(null, kf__$1) ? k__$1 : kf__$1.call(null, k__$1, v__$1);
          var v__$2 = cljs.core.not.call(null, vf) ? v__$1 : vf.call(null, k__$2, v__$1);
          var new_m = cljs.core.assoc_BANG_.call(null, m__$2, k__$2, v__$2);
          var temp__4090__auto__ = cljs.core.nnext.call(null, s__$1);
          if (temp__4090__auto__) {
            var n = temp__4090__auto__;
            var G__22234 = new_m;
            var G__22235 = n;
            m__$1 = G__22234;
            G__22231__$1 = G__22235;
            continue;
          } else {
            return cljs.core.persistent_BANG_.call(null, new_m);
          }
          break;
        }
      } else {
        return null;
      }
    }();
    if (_PERCENT_ == null || cljs.core.map_QMARK_.call(null, _PERCENT_)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", -1640527972, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", -1637150201, null), new cljs.core.Symbol(null, "%", "%", -1640531490, null)), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1637187556, null), new cljs.core.Symbol(null, "%", "%", -1640531490, null)))))].join(""));
    }
    return _PERCENT_;
  };
  var as_map = function(coll, var_args) {
    var p__22223 = null;
    if (arguments.length > 1) {
      p__22223 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return as_map__delegate.call(this, coll, p__22223);
  };
  as_map.cljs$lang$maxFixedArity = 1;
  as_map.cljs$lang$applyTo = function(arglist__22236) {
    var coll = cljs.core.first(arglist__22236);
    var p__22223 = cljs.core.rest(arglist__22236);
    return as_map__delegate(coll, p__22223);
  };
  as_map.cljs$core$IFn$_invoke$arity$variadic = as_map__delegate;
  return as_map;
}();
taoensso.encore.into_all = function() {
  var into_all = null;
  var into_all__2 = function(to, from) {
    return cljs.core.into.call(null, to, from);
  };
  var into_all__3 = function() {
    var G__22237__delegate = function(to, from, more) {
      return cljs.core.reduce.call(null, cljs.core.into, cljs.core.into.call(null, to, from), more);
    };
    var G__22237 = function(to, from, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__22237__delegate.call(this, to, from, more);
    };
    G__22237.cljs$lang$maxFixedArity = 2;
    G__22237.cljs$lang$applyTo = function(arglist__22238) {
      var to = cljs.core.first(arglist__22238);
      arglist__22238 = cljs.core.next(arglist__22238);
      var from = cljs.core.first(arglist__22238);
      var more = cljs.core.rest(arglist__22238);
      return G__22237__delegate(to, from, more);
    };
    G__22237.cljs$core$IFn$_invoke$arity$variadic = G__22237__delegate;
    return G__22237;
  }();
  into_all = function(to, from, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return into_all__2.call(this, to, from);
      default:
        return into_all__3.cljs$core$IFn$_invoke$arity$variadic(to, from, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_all.cljs$lang$maxFixedArity = 2;
  into_all.cljs$lang$applyTo = into_all__3.cljs$lang$applyTo;
  into_all.cljs$core$IFn$_invoke$arity$2 = into_all__2;
  into_all.cljs$core$IFn$_invoke$arity$variadic = into_all__3.cljs$core$IFn$_invoke$arity$variadic;
  return into_all;
}();
taoensso.encore.interleave_all = function() {
  var interleave_all = null;
  var interleave_all__0 = function() {
    return cljs.core.List.EMPTY;
  };
  var interleave_all__1 = function(c1) {
    return new cljs.core.LazySeq(null, function() {
      return c1;
    }, null, null);
  };
  var interleave_all__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s1), cljs.core.cons.call(null, cljs.core.first.call(null, s2), interleave_all.call(null, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2))));
      } else {
        if (s1) {
          return s1;
        } else {
          if (s2) {
            return s2;
          } else {
            return null;
          }
        }
      }
    }, null, null);
  };
  var interleave_all__3 = function() {
    var G__22239__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.filter.call(null, cljs.core.identity, cljs.core.map.call(null, cljs.core.seq, cljs.core.conj.call(null, colls, c2, c1)));
        return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, ss), cljs.core.apply.call(null, interleave_all, cljs.core.map.call(null, cljs.core.rest, ss)));
      }, null, null);
    };
    var G__22239 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__22239__delegate.call(this, c1, c2, colls);
    };
    G__22239.cljs$lang$maxFixedArity = 2;
    G__22239.cljs$lang$applyTo = function(arglist__22240) {
      var c1 = cljs.core.first(arglist__22240);
      arglist__22240 = cljs.core.next(arglist__22240);
      var c2 = cljs.core.first(arglist__22240);
      var colls = cljs.core.rest(arglist__22240);
      return G__22239__delegate(c1, c2, colls);
    };
    G__22239.cljs$core$IFn$_invoke$arity$variadic = G__22239__delegate;
    return G__22239;
  }();
  interleave_all = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 0:
        return interleave_all__0.call(this);
      case 1:
        return interleave_all__1.call(this, c1);
      case 2:
        return interleave_all__2.call(this, c1, c2);
      default:
        return interleave_all__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave_all.cljs$lang$maxFixedArity = 2;
  interleave_all.cljs$lang$applyTo = interleave_all__3.cljs$lang$applyTo;
  interleave_all.cljs$core$IFn$_invoke$arity$0 = interleave_all__0;
  interleave_all.cljs$core$IFn$_invoke$arity$1 = interleave_all__1;
  interleave_all.cljs$core$IFn$_invoke$arity$2 = interleave_all__2;
  interleave_all.cljs$core$IFn$_invoke$arity$variadic = interleave_all__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave_all;
}();
taoensso.encore.distinctv = function() {
  var distinctv = null;
  var distinctv__1 = function(coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.nth.call(null, cljs.core.reduce.call(null, function(p__22245, in$) {
      var vec__22246 = p__22245;
      var v = cljs.core.nth.call(null, vec__22246, 0, null);
      var seen = cljs.core.nth.call(null, vec__22246, 1, null);
      if (!cljs.core.contains_QMARK_.call(null, seen, in$)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.conj_BANG_.call(null, v, in$), cljs.core.conj.call(null, seen, in$)], null);
      } else {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [v, seen], null);
      }
    }, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), cljs.core.PersistentHashSet.EMPTY], null), coll), 0));
  };
  var distinctv__2 = function(keyfn, coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.nth.call(null, cljs.core.reduce.call(null, function(p__22247, in$) {
      var vec__22248 = p__22247;
      var v = cljs.core.nth.call(null, vec__22248, 0, null);
      var seen = cljs.core.nth.call(null, vec__22248, 1, null);
      var in_STAR_ = keyfn.call(null, in$);
      if (!cljs.core.contains_QMARK_.call(null, seen, in_STAR_)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.conj_BANG_.call(null, v, in$), cljs.core.conj.call(null, seen, in_STAR_)], null);
      } else {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [v, seen], null);
      }
    }, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), cljs.core.PersistentHashSet.EMPTY], null), coll), 0));
  };
  distinctv = function(keyfn, coll) {
    switch(arguments.length) {
      case 1:
        return distinctv__1.call(this, keyfn);
      case 2:
        return distinctv__2.call(this, keyfn, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinctv.cljs$core$IFn$_invoke$arity$1 = distinctv__1;
  distinctv.cljs$core$IFn$_invoke$arity$2 = distinctv__2;
  return distinctv;
}();
taoensso.encore.distinct_by = function distinct_by(keyfn, coll) {
  var step = function step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__22255, seen__$1) {
        while (true) {
          var vec__22256 = p__22255;
          var v = cljs.core.nth.call(null, vec__22256, 0, null);
          var xs__$1 = vec__22256;
          var temp__4092__auto__ = cljs.core.seq.call(null, xs__$1);
          if (temp__4092__auto__) {
            var s = temp__4092__auto__;
            var v_STAR_ = keyfn.call(null, v);
            if (cljs.core.contains_QMARK_.call(null, seen__$1, v_STAR_)) {
              var G__22257 = cljs.core.rest.call(null, s);
              var G__22258 = seen__$1;
              p__22255 = G__22257;
              seen__$1 = G__22258;
              continue;
            } else {
              return cljs.core.cons.call(null, v, step.call(null, cljs.core.rest.call(null, s), cljs.core.conj.call(null, seen__$1, v_STAR_)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step.call(null, coll, cljs.core.PersistentHashSet.EMPTY);
};
taoensso.encore.rcompare = function rcompare(x, y) {
  return cljs.core.compare.call(null, y, x);
};
taoensso.encore.merge_deep_with = function() {
  var merge_deep_with__delegate = function(f, maps) {
    return cljs.core.apply.call(null, function() {
      var m__delegate = function(maps__$1) {
        if (cljs.core.every_QMARK_.call(null, cljs.core.map_QMARK_, maps__$1)) {
          return cljs.core.apply.call(null, cljs.core.merge_with, m, maps__$1);
        } else {
          return cljs.core.apply.call(null, f, maps__$1);
        }
      };
      var m = function(var_args) {
        var maps__$1 = null;
        if (arguments.length > 0) {
          maps__$1 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return m__delegate.call(this, maps__$1);
      };
      m.cljs$lang$maxFixedArity = 0;
      m.cljs$lang$applyTo = function(arglist__22259) {
        var maps__$1 = cljs.core.seq(arglist__22259);
        return m__delegate(maps__$1);
      };
      m.cljs$core$IFn$_invoke$arity$variadic = m__delegate;
      return m;
    }(), maps);
  };
  var merge_deep_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return merge_deep_with__delegate.call(this, f, maps);
  };
  merge_deep_with.cljs$lang$maxFixedArity = 1;
  merge_deep_with.cljs$lang$applyTo = function(arglist__22260) {
    var f = cljs.core.first(arglist__22260);
    var maps = cljs.core.rest(arglist__22260);
    return merge_deep_with__delegate(f, maps);
  };
  merge_deep_with.cljs$core$IFn$_invoke$arity$variadic = merge_deep_with__delegate;
  return merge_deep_with;
}();
taoensso.encore.merge_deep = cljs.core.partial.call(null, taoensso.encore.merge_deep_with, function(x, y) {
  return y;
});
taoensso.encore.greatest = function() {
  var greatest__delegate = function(coll, p__22263) {
    var vec__22265 = p__22263;
    var _QMARK_comparator = cljs.core.nth.call(null, vec__22265, 0, null);
    var comparator = function() {
      var or__15542__auto__ = _QMARK_comparator;
      if (cljs.core.truth_(or__15542__auto__)) {
        return or__15542__auto__;
      } else {
        return taoensso.encore.rcompare;
      }
    }();
    return cljs.core.reduce.call(null, function(p1__22261_SHARP_, p2__22262_SHARP_) {
      if (comparator.call(null, p1__22261_SHARP_, p2__22262_SHARP_) > 0) {
        return p2__22262_SHARP_;
      } else {
        return p1__22261_SHARP_;
      }
    }, coll);
  };
  var greatest = function(coll, var_args) {
    var p__22263 = null;
    if (arguments.length > 1) {
      p__22263 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return greatest__delegate.call(this, coll, p__22263);
  };
  greatest.cljs$lang$maxFixedArity = 1;
  greatest.cljs$lang$applyTo = function(arglist__22266) {
    var coll = cljs.core.first(arglist__22266);
    var p__22263 = cljs.core.rest(arglist__22266);
    return greatest__delegate(coll, p__22263);
  };
  greatest.cljs$core$IFn$_invoke$arity$variadic = greatest__delegate;
  return greatest;
}();
taoensso.encore.least = function() {
  var least__delegate = function(coll, p__22269) {
    var vec__22271 = p__22269;
    var _QMARK_comparator = cljs.core.nth.call(null, vec__22271, 0, null);
    var comparator = function() {
      var or__15542__auto__ = _QMARK_comparator;
      if (cljs.core.truth_(or__15542__auto__)) {
        return or__15542__auto__;
      } else {
        return taoensso.encore.rcompare;
      }
    }();
    return cljs.core.reduce.call(null, function(p1__22267_SHARP_, p2__22268_SHARP_) {
      if (comparator.call(null, p1__22267_SHARP_, p2__22268_SHARP_) < 0) {
        return p2__22268_SHARP_;
      } else {
        return p1__22267_SHARP_;
      }
    }, coll);
  };
  var least = function(coll, var_args) {
    var p__22269 = null;
    if (arguments.length > 1) {
      p__22269 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return least__delegate.call(this, coll, p__22269);
  };
  least.cljs$lang$maxFixedArity = 1;
  least.cljs$lang$applyTo = function(arglist__22272) {
    var coll = cljs.core.first(arglist__22272);
    var p__22269 = cljs.core.rest(arglist__22272);
    return least__delegate(coll, p__22269);
  };
  least.cljs$core$IFn$_invoke$arity$variadic = least__delegate;
  return least;
}();
taoensso.encore.repeatedly_into = function repeatedly_into(coll, n, f) {
  if (coll instanceof clojure.lang.IEditableCollection) {
    var v = cljs.core.transient$.call(null, coll);
    var idx = 0;
    while (true) {
      if (idx >= n) {
        return cljs.core.persistent_BANG_.call(null, v);
      } else {
        var G__22273 = cljs.core.conj_BANG_.call(null, v, f.call(null));
        var G__22274 = idx + 1;
        v = G__22273;
        idx = G__22274;
        continue;
      }
      break;
    }
  } else {
    var v = coll;
    var idx = 0;
    while (true) {
      if (idx >= n) {
        return v;
      } else {
        var G__22275 = cljs.core.conj.call(null, v, f.call(null));
        var G__22276 = idx + 1;
        v = G__22275;
        idx = G__22276;
        continue;
      }
      break;
    }
  }
};
taoensso.encore.substr = function() {
  var substr__delegate = function(s, start_idx, p__22277) {
    var vec__22279 = p__22277;
    var max_len = cljs.core.nth.call(null, vec__22279, 0, null);
    if (max_len == null || taoensso.encore.nneg_int_QMARK_.call(null, max_len)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", -1640527972, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", -1637150201, null), new cljs.core.Symbol(null, "max-len", "max-len", -797580315, null)), cljs.core.list(new cljs.core.Symbol(null, "nneg-int?", "nneg-int?", -2019261324, null), new cljs.core.Symbol(null, "max-len", "max-len", -797580315, null)))))].join(""));
    }
    var slen = cljs.core.count.call(null, s);
    var start_idx_STAR_ = start_idx >= 0 ? function() {
      var x__15856__auto__ = start_idx;
      var y__15857__auto__ = slen;
      return x__15856__auto__ < y__15857__auto__ ? x__15856__auto__ : y__15857__auto__;
    }() : function() {
      var x__15849__auto__ = 0;
      var y__15850__auto__ = slen + start_idx - 1;
      return x__15849__auto__ > y__15850__auto__ ? x__15849__auto__ : y__15850__auto__;
    }();
    var end_idx_STAR_ = cljs.core.not.call(null, max_len) ? slen : function() {
      var x__15856__auto__ = start_idx_STAR_ + max_len;
      var y__15857__auto__ = slen;
      return x__15856__auto__ < y__15857__auto__ ? x__15856__auto__ : y__15857__auto__;
    }();
    return s.substring(start_idx_STAR_, end_idx_STAR_);
  };
  var substr = function(s, start_idx, var_args) {
    var p__22277 = null;
    if (arguments.length > 2) {
      p__22277 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return substr__delegate.call(this, s, start_idx, p__22277);
  };
  substr.cljs$lang$maxFixedArity = 2;
  substr.cljs$lang$applyTo = function(arglist__22280) {
    var s = cljs.core.first(arglist__22280);
    arglist__22280 = cljs.core.next(arglist__22280);
    var start_idx = cljs.core.first(arglist__22280);
    var p__22277 = cljs.core.rest(arglist__22280);
    return substr__delegate(s, start_idx, p__22277);
  };
  substr.cljs$core$IFn$_invoke$arity$variadic = substr__delegate;
  return substr;
}();
taoensso.encore.str_contains_QMARK_ = function str_contains_QMARK_(s, substr) {
  return cljs.core.not_EQ_.call(null, -1, s.indexOf(substr));
};
taoensso.encore.str_starts_with_QMARK_ = function str_starts_with_QMARK_(s, substr) {
  return s.indexOf(substr) === 0;
};
taoensso.encore.str_ends_with_QMARK_ = function str_ends_with_QMARK_(s, substr) {
  var s_len = s.length;
  var substr_len = substr.length;
  if (s_len >= substr_len) {
    return cljs.core.not_EQ_.call(null, -1, s.indexOf(substr, s_len - substr_len));
  } else {
    return null;
  }
};
taoensso.encore.join_once = function() {
  var join_once__delegate = function(separator, coll) {
    return cljs.core.reduce.call(null, function(s1, s2) {
      var s1__$1 = [cljs.core.str(s1)].join("");
      var s2__$1 = [cljs.core.str(s2)].join("");
      if (cljs.core.truth_(taoensso.encore.str_ends_with_QMARK_.call(null, s1__$1, separator))) {
        if (taoensso.encore.str_starts_with_QMARK_.call(null, s2__$1, separator)) {
          return[cljs.core.str(s1__$1), cljs.core.str(s2__$1.substring(1))].join("");
        } else {
          return[cljs.core.str(s1__$1), cljs.core.str(s2__$1)].join("");
        }
      } else {
        if (taoensso.encore.str_starts_with_QMARK_.call(null, s2__$1, separator)) {
          return[cljs.core.str(s1__$1), cljs.core.str(s2__$1)].join("");
        } else {
          if (cljs.core._EQ_.call(null, s1__$1, "") || cljs.core._EQ_.call(null, s2__$1, "")) {
            return[cljs.core.str(s1__$1), cljs.core.str(s2__$1)].join("");
          } else {
            return[cljs.core.str(s1__$1), cljs.core.str(separator), cljs.core.str(s2__$1)].join("");
          }
        }
      }
    }, null, coll);
  };
  var join_once = function(separator, var_args) {
    var coll = null;
    if (arguments.length > 1) {
      coll = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return join_once__delegate.call(this, separator, coll);
  };
  join_once.cljs$lang$maxFixedArity = 1;
  join_once.cljs$lang$applyTo = function(arglist__22281) {
    var separator = cljs.core.first(arglist__22281);
    var coll = cljs.core.rest(arglist__22281);
    return join_once__delegate(separator, coll);
  };
  join_once.cljs$core$IFn$_invoke$arity$variadic = join_once__delegate;
  return join_once;
}();
taoensso.encore.path = function() {
  var path__delegate = function(parts) {
    return cljs.core.apply.call(null, taoensso.encore.join_once, "/", parts);
  };
  var path = function(var_args) {
    var parts = null;
    if (arguments.length > 0) {
      parts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return path__delegate.call(this, parts);
  };
  path.cljs$lang$maxFixedArity = 0;
  path.cljs$lang$applyTo = function(arglist__22282) {
    var parts = cljs.core.seq(arglist__22282);
    return path__delegate(parts);
  };
  path.cljs$core$IFn$_invoke$arity$variadic = path__delegate;
  return path;
}();
taoensso.encore.norm_word_breaks = function norm_word_breaks(s) {
  return clojure.string.replace.call(null, [cljs.core.str(s)].join(""), /\s+/, " ");
};
taoensso.encore.count_words = function count_words(s) {
  if (cljs.core.truth_(clojure.string.blank_QMARK_.call(null, s))) {
    return 0;
  } else {
    return cljs.core.count.call(null, clojure.string.split.call(null, s, /\s+/));
  }
};
taoensso.encore.count_words.call(null, "Hello this is a    test");
taoensso.encore.gc_rate = 1 / 16E3;
taoensso.encore.swap_val_BANG_ = function swap_val_BANG_(atom_, k, f) {
  while (true) {
    var old_m = cljs.core.deref.call(null, atom_);
    var new_v = f.call(null, cljs.core.get.call(null, old_m, k));
    var new_m = cljs.core.assoc.call(null, old_m, k, new_v);
    if (cljs.core.compare_and_set_BANG_.call(null, atom_, old_m, new_m)) {
      return new_v;
    } else {
      continue;
    }
    break;
  }
};
taoensso.encore.memoized = function() {
  var memoized__delegate = function(cache, f, args) {
    if (cljs.core.not.call(null, cache)) {
      return cljs.core.apply.call(null, f, args);
    } else {
      return cljs.core.deref.call(null, taoensso.encore.swap_val_BANG_.call(null, cache, args, function(p1__22283_SHARP_) {
        if (cljs.core.truth_(p1__22283_SHARP_)) {
          return p1__22283_SHARP_;
        } else {
          return new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function() {
            return cljs.core.apply.call(null, f, args);
          });
        }
      }));
    }
  };
  var memoized = function(cache, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return memoized__delegate.call(this, cache, f, args);
  };
  memoized.cljs$lang$maxFixedArity = 2;
  memoized.cljs$lang$applyTo = function(arglist__22284) {
    var cache = cljs.core.first(arglist__22284);
    arglist__22284 = cljs.core.next(arglist__22284);
    var f = cljs.core.first(arglist__22284);
    var args = cljs.core.rest(arglist__22284);
    return memoized__delegate(cache, f, args);
  };
  memoized.cljs$core$IFn$_invoke$arity$variadic = memoized__delegate;
  return memoized;
}();
taoensso.encore.memoize_STAR_ = function() {
  var memoize_STAR_ = null;
  var memoize_STAR___1 = function(f) {
    var cache = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    return function() {
      var G__22323__delegate = function(p__22305) {
        var vec__22306 = p__22305;
        var arg1 = cljs.core.nth.call(null, vec__22306, 0, null);
        var argn = cljs.core.nthnext.call(null, vec__22306, 1);
        var args = vec__22306;
        if (arg1 === new cljs.core.Keyword("mem", "del", "mem/del", 1020982117)) {
          if (cljs.core.first.call(null, argn) === new cljs.core.Keyword("mem", "all", "mem/all", 1020981651)) {
            cljs.core.reset_BANG_.call(null, cache, cljs.core.PersistentArrayMap.EMPTY);
          } else {
            cljs.core.swap_BANG_.call(null, cache, cljs.core.dissoc, argn);
          }
          return null;
        } else {
          var fresh_QMARK_ = arg1 === new cljs.core.Keyword("mem", "fresh", "mem/fresh", 1118645762);
          var args__$1 = fresh_QMARK_ ? argn : args;
          return cljs.core.deref.call(null, taoensso.encore.swap_val_BANG_.call(null, cache, args__$1, function(_QMARK_dv) {
            if (cljs.core.truth_(function() {
              var and__15530__auto__ = _QMARK_dv;
              if (cljs.core.truth_(and__15530__auto__)) {
                return!fresh_QMARK_;
              } else {
                return and__15530__auto__;
              }
            }())) {
              return _QMARK_dv;
            } else {
              return new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function() {
                return cljs.core.apply.call(null, f, args__$1);
              });
            }
          }));
        }
      };
      var G__22323 = function(var_args) {
        var p__22305 = null;
        if (arguments.length > 0) {
          p__22305 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__22323__delegate.call(this, p__22305);
      };
      G__22323.cljs$lang$maxFixedArity = 0;
      G__22323.cljs$lang$applyTo = function(arglist__22324) {
        var p__22305 = cljs.core.seq(arglist__22324);
        return G__22323__delegate(p__22305);
      };
      G__22323.cljs$core$IFn$_invoke$arity$variadic = G__22323__delegate;
      return G__22323;
    }();
  };
  var memoize_STAR___2 = function(ttl_ms, f) {
    var cache = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    return function() {
      var G__22325__delegate = function(p__22307) {
        var vec__22308 = p__22307;
        var arg1 = cljs.core.nth.call(null, vec__22308, 0, null);
        var argn = cljs.core.nthnext.call(null, vec__22308, 1);
        var args = vec__22308;
        if (arg1 === new cljs.core.Keyword("mem", "del", "mem/del", 1020982117)) {
          if (cljs.core.first.call(null, argn) === new cljs.core.Keyword("mem", "all", "mem/all", 1020981651)) {
            cljs.core.reset_BANG_.call(null, cache, cljs.core.PersistentArrayMap.EMPTY);
          } else {
            cljs.core.swap_BANG_.call(null, cache, cljs.core.dissoc, argn);
          }
          return null;
        } else {
          if (cljs.core.rand.call(null) <= taoensso.encore.gc_rate) {
            var instant_22326 = taoensso.encore.now_udt.call(null);
            cljs.core.swap_BANG_.call(null, cache, function(m) {
              return cljs.core.reduce_kv.call(null, function(m_STAR_, k, p__22309) {
                var vec__22310 = p__22309;
                var dv = cljs.core.nth.call(null, vec__22310, 0, null);
                var udt = cljs.core.nth.call(null, vec__22310, 1, null);
                var cv = vec__22310;
                if (instant_22326 - udt > ttl_ms) {
                  return m_STAR_;
                } else {
                  return cljs.core.assoc.call(null, m_STAR_, k, cv);
                }
              }, cljs.core.PersistentArrayMap.EMPTY, m);
            });
          } else {
          }
          var fresh_QMARK_ = arg1 === new cljs.core.Keyword("mem", "fresh", "mem/fresh", 1118645762);
          var args__$1 = fresh_QMARK_ ? argn : args;
          var instant = taoensso.encore.now_udt.call(null);
          return cljs.core.deref.call(null, taoensso.encore.first_nth.call(null, taoensso.encore.swap_val_BANG_.call(null, cache, args__$1, function(_QMARK_cv) {
            if (cljs.core.truth_(function() {
              var and__15530__auto__ = _QMARK_cv;
              if (cljs.core.truth_(and__15530__auto__)) {
                var and__15530__auto____$1 = !fresh_QMARK_;
                if (and__15530__auto____$1) {
                  var vec__22312 = _QMARK_cv;
                  var _dv = cljs.core.nth.call(null, vec__22312, 0, null);
                  var udt = cljs.core.nth.call(null, vec__22312, 1, null);
                  return instant - udt < ttl_ms;
                } else {
                  return and__15530__auto____$1;
                }
              } else {
                return and__15530__auto__;
              }
            }())) {
              return _QMARK_cv;
            } else {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function() {
                return cljs.core.apply.call(null, f, args__$1);
              }), instant], null);
            }
          })));
        }
      };
      var G__22325 = function(var_args) {
        var p__22307 = null;
        if (arguments.length > 0) {
          p__22307 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__22325__delegate.call(this, p__22307);
      };
      G__22325.cljs$lang$maxFixedArity = 0;
      G__22325.cljs$lang$applyTo = function(arglist__22327) {
        var p__22307 = cljs.core.seq(arglist__22327);
        return G__22325__delegate(p__22307);
      };
      G__22325.cljs$core$IFn$_invoke$arity$variadic = G__22325__delegate;
      return G__22325;
    }();
  };
  var memoize_STAR___3 = function(cache_size, ttl_ms, f) {
    var state = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tick", "tick", 1017464079), 0], null));
    return function() {
      var G__22328__delegate = function(p__22313) {
        var vec__22314 = p__22313;
        var arg1 = cljs.core.nth.call(null, vec__22314, 0, null);
        var argn = cljs.core.nthnext.call(null, vec__22314, 1);
        var args = vec__22314;
        if (arg1 === new cljs.core.Keyword("mem", "del", "mem/del", 1020982117)) {
          if (cljs.core.first.call(null, argn) === new cljs.core.Keyword("mem", "all", "mem/all", 1020981651)) {
            cljs.core.reset_BANG_.call(null, state, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tick", "tick", 1017464079), 0], null));
          } else {
            cljs.core.swap_BANG_.call(null, state, cljs.core.dissoc, argn);
          }
          return null;
        } else {
          if (cljs.core.rand.call(null) <= taoensso.encore.gc_rate) {
            var instant_22329 = taoensso.encore.now_udt.call(null);
            cljs.core.swap_BANG_.call(null, state, function(m) {
              var m_STAR_ = cljs.core.dissoc.call(null, m, new cljs.core.Keyword(null, "tick", "tick", 1017464079));
              var m_STAR___$1 = cljs.core.not.call(null, ttl_ms) ? m_STAR_ : cljs.core.reduce_kv.call(null, function(m_STAR_) {
                return function(m_STAR___$1, k, p__22315) {
                  var vec__22316 = p__22315;
                  var dv = cljs.core.nth.call(null, vec__22316, 0, null);
                  var udt = cljs.core.nth.call(null, vec__22316, 1, null);
                  var _ = cljs.core.nth.call(null, vec__22316, 2, null);
                  var ___$1 = cljs.core.nth.call(null, vec__22316, 3, null);
                  var cv = vec__22316;
                  if (instant_22329 - udt > ttl_ms) {
                    return m_STAR___$1;
                  } else {
                    return cljs.core.assoc.call(null, m_STAR___$1, k, cv);
                  }
                };
              }(m_STAR_), cljs.core.PersistentArrayMap.EMPTY, m_STAR_);
              var n_to_prune = cljs.core.count.call(null, m_STAR___$1) - cache_size;
              var m_STAR___$2 = !(n_to_prune > 0) ? m_STAR___$1 : cljs.core.apply.call(null, cljs.core.dissoc, m_STAR___$1, cljs.core.mapv.call(null, function(m_STAR_, m_STAR___$1, n_to_prune) {
                return function(p1__22286_SHARP_) {
                  return cljs.core.nth.call(null, p1__22286_SHARP_, 1);
                };
              }(m_STAR_, m_STAR___$1, n_to_prune), cljs.core.take.call(null, n_to_prune, cljs.core.sort_by.call(null, function(m_STAR_, m_STAR___$1, n_to_prune) {
                return function(p1__22285_SHARP_) {
                  return cljs.core.nth.call(null, p1__22285_SHARP_, 0);
                };
              }(m_STAR_, m_STAR___$1, n_to_prune), cljs.core.mapv.call(null, function(m_STAR_, m_STAR___$1, n_to_prune) {
                return function(k) {
                  var vec__22317 = m_STAR___$1.call(null, k);
                  var _ = cljs.core.nth.call(null, vec__22317, 0, null);
                  var ___$1 = cljs.core.nth.call(null, vec__22317, 1, null);
                  var tick_lru = cljs.core.nth.call(null, vec__22317, 2, null);
                  var tick_lfu = cljs.core.nth.call(null, vec__22317, 3, null);
                  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tick_lru + tick_lfu, k], null);
                };
              }(m_STAR_, m_STAR___$1, n_to_prune), cljs.core.keys.call(null, m_STAR___$1))))));
              return cljs.core.assoc.call(null, m_STAR___$2, new cljs.core.Keyword(null, "tick", "tick", 1017464079), (new cljs.core.Keyword(null, "tick", "tick", 1017464079)).cljs$core$IFn$_invoke$arity$1(m));
            });
          } else {
          }
          var fresh_QMARK_ = arg1 === new cljs.core.Keyword("mem", "fresh", "mem/fresh", 1118645762);
          var args__$1 = fresh_QMARK_ ? argn : args;
          var _QMARK_instant = cljs.core.truth_(ttl_ms) ? taoensso.encore.now_udt.call(null) : null;
          var tick_SINGLEQUOTE_ = (new cljs.core.Keyword(null, "tick", "tick", 1017464079)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state));
          var dv = taoensso.encore.first_nth.call(null, taoensso.encore.swap_val_BANG_.call(null, state, args__$1, function(fresh_QMARK_, args__$1, _QMARK_instant, tick_SINGLEQUOTE_) {
            return function(_QMARK_cv) {
              if (cljs.core.truth_(function() {
                var and__15530__auto__ = _QMARK_cv;
                if (cljs.core.truth_(and__15530__auto__)) {
                  var and__15530__auto____$1 = !fresh_QMARK_;
                  if (and__15530__auto____$1) {
                    var or__15542__auto__ = _QMARK_instant == null;
                    if (or__15542__auto__) {
                      return or__15542__auto__;
                    } else {
                      var vec__22321 = _QMARK_cv;
                      var _dv = cljs.core.nth.call(null, vec__22321, 0, null);
                      var udt = cljs.core.nth.call(null, vec__22321, 1, null);
                      return _QMARK_instant - udt < ttl_ms;
                    }
                  } else {
                    return and__15530__auto____$1;
                  }
                } else {
                  return and__15530__auto__;
                }
              }())) {
                return _QMARK_cv;
              } else {
                return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function(fresh_QMARK_, args__$1, _QMARK_instant, tick_SINGLEQUOTE_) {
                  return function() {
                    return cljs.core.apply.call(null, f, args__$1);
                  };
                }(fresh_QMARK_, args__$1, _QMARK_instant, tick_SINGLEQUOTE_)), _QMARK_instant, tick_SINGLEQUOTE_, 1], null);
              }
            };
          }(fresh_QMARK_, args__$1, _QMARK_instant, tick_SINGLEQUOTE_)));
          cljs.core.swap_BANG_.call(null, state, function(m) {
            var temp__4092__auto__ = cljs.core.get.call(null, m, args__$1);
            if (cljs.core.truth_(temp__4092__auto__)) {
              var vec__22322 = temp__4092__auto__;
              var dv__$1 = cljs.core.nth.call(null, vec__22322, 0, null);
              var _QMARK_udt = cljs.core.nth.call(null, vec__22322, 1, null);
              var tick_lru = cljs.core.nth.call(null, vec__22322, 2, null);
              var tick_lfu = cljs.core.nth.call(null, vec__22322, 3, null);
              var cv = vec__22322;
              return cljs.core.assoc.call(null, m, new cljs.core.Keyword(null, "tick", "tick", 1017464079), tick_SINGLEQUOTE_ + 1, args__$1, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [dv__$1, _QMARK_udt, tick_SINGLEQUOTE_, tick_lfu + 1], null));
            } else {
              return null;
            }
          });
          return cljs.core.deref.call(null, dv);
        }
      };
      var G__22328 = function(var_args) {
        var p__22313 = null;
        if (arguments.length > 0) {
          p__22313 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__22328__delegate.call(this, p__22313);
      };
      G__22328.cljs$lang$maxFixedArity = 0;
      G__22328.cljs$lang$applyTo = function(arglist__22330) {
        var p__22313 = cljs.core.seq(arglist__22330);
        return G__22328__delegate(p__22313);
      };
      G__22328.cljs$core$IFn$_invoke$arity$variadic = G__22328__delegate;
      return G__22328;
    }();
  };
  memoize_STAR_ = function(cache_size, ttl_ms, f) {
    switch(arguments.length) {
      case 1:
        return memoize_STAR___1.call(this, cache_size);
      case 2:
        return memoize_STAR___2.call(this, cache_size, ttl_ms);
      case 3:
        return memoize_STAR___3.call(this, cache_size, ttl_ms, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  memoize_STAR_.cljs$core$IFn$_invoke$arity$1 = memoize_STAR___1;
  memoize_STAR_.cljs$core$IFn$_invoke$arity$2 = memoize_STAR___2;
  memoize_STAR_.cljs$core$IFn$_invoke$arity$3 = memoize_STAR___3;
  return memoize_STAR_;
}();
taoensso.encore.rate_limiter = function rate_limiter(ncalls_limit, window_ms) {
  var state = cljs.core.atom.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, cljs.core.PersistentArrayMap.EMPTY], null));
  return function() {
    var G__22349__delegate = function(p__22340) {
      var vec__22341 = p__22340;
      var id = cljs.core.nth.call(null, vec__22341, 0, null);
      if (cljs.core.rand.call(null) <= taoensso.encore.gc_rate) {
        var instant_22350 = taoensso.encore.now_udt.call(null);
        cljs.core.swap_BANG_.call(null, state, function(p__22342) {
          var vec__22343 = p__22342;
          var _ = cljs.core.nth.call(null, vec__22343, 0, null);
          var m = cljs.core.nth.call(null, vec__22343, 1, null);
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, cljs.core.reduce_kv.call(null, function(m_STAR_, id__$1, p__22344) {
            var vec__22345 = p__22344;
            var udt_window_start = cljs.core.nth.call(null, vec__22345, 0, null);
            var ncalls = cljs.core.nth.call(null, vec__22345, 1, null);
            if (instant_22350 - udt_window_start > window_ms) {
              return m_STAR_;
            } else {
              return cljs.core.assoc.call(null, m_STAR_, id__$1, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [udt_window_start, ncalls], null));
            }
          }, cljs.core.PersistentArrayMap.EMPTY, m)], null);
        });
      } else {
      }
      return cljs.core.nth.call(null, function() {
        var instant = taoensso.encore.now_udt.call(null);
        return cljs.core.swap_BANG_.call(null, state, function(p__22346) {
          var vec__22347 = p__22346;
          var _ = cljs.core.nth.call(null, vec__22347, 0, null);
          var m = cljs.core.nth.call(null, vec__22347, 1, null);
          var temp__4090__auto__ = m.call(null, id);
          if (cljs.core.truth_(temp__4090__auto__)) {
            var vec__22348 = temp__4090__auto__;
            var udt_window_start = cljs.core.nth.call(null, vec__22348, 0, null);
            var ncalls = cljs.core.nth.call(null, vec__22348, 1, null);
            if (instant - udt_window_start > window_ms) {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, cljs.core.assoc.call(null, m, id, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [instant, 1], null))], null);
            } else {
              if (ncalls < ncalls_limit) {
                return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, cljs.core.assoc.call(null, m, id, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [udt_window_start, ncalls + 1], null))], null);
              } else {
                return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [udt_window_start + window_ms - instant, m], null);
              }
            }
          } else {
            return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, cljs.core.assoc.call(null, m, id, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [instant, 1], null))], null);
          }
        });
      }(), 0);
    };
    var G__22349 = function(var_args) {
      var p__22340 = null;
      if (arguments.length > 0) {
        p__22340 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__22349__delegate.call(this, p__22340);
    };
    G__22349.cljs$lang$maxFixedArity = 0;
    G__22349.cljs$lang$applyTo = function(arglist__22351) {
      var p__22340 = cljs.core.seq(arglist__22351);
      return G__22349__delegate(p__22340);
    };
    G__22349.cljs$core$IFn$_invoke$arity$variadic = G__22349__delegate;
    return G__22349;
  }();
};
taoensso.encore.rate_limited = function rate_limited(ncalls_limit, window_ms, f) {
  var rl = taoensso.encore.rate_limiter.call(null, ncalls_limit, window_ms);
  return function() {
    var G__22352__delegate = function(args) {
      var temp__4090__auto__ = rl.call(null);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var backoff_ms = temp__4090__auto__;
        return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "backoff-ms", "backoff-ms", 4194291165), backoff_ms], null);
      } else {
        return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "result", "result", 4374444943), f.call(null)], null);
      }
    };
    var G__22352 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__22352__delegate.call(this, args);
    };
    G__22352.cljs$lang$maxFixedArity = 0;
    G__22352.cljs$lang$applyTo = function(arglist__22353) {
      var args = cljs.core.seq(arglist__22353);
      return G__22352__delegate(args);
    };
    G__22352.cljs$core$IFn$_invoke$arity$variadic = G__22352__delegate;
    return G__22352;
  }();
};
taoensso.encore.log = function log(x) {
  if (cljs.core.truth_(typeof console != "undefined")) {
    console.log(x);
  } else {
    print(x);
  }
  return null;
};
taoensso.encore.sayp = function() {
  var sayp__delegate = function(xs) {
    return alert(clojure.string.join.call(null, " ", xs));
  };
  var sayp = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sayp__delegate.call(this, xs);
  };
  sayp.cljs$lang$maxFixedArity = 0;
  sayp.cljs$lang$applyTo = function(arglist__22358) {
    var xs = cljs.core.seq(arglist__22358);
    return sayp__delegate(xs);
  };
  sayp.cljs$core$IFn$_invoke$arity$variadic = sayp__delegate;
  return sayp;
}();
taoensso.encore.sayf = function() {
  var sayf__delegate = function(fmt, xs) {
    return alert(cljs.core.apply.call(null, taoensso.encore.format, fmt, xs));
  };
  var sayf = function(fmt, var_args) {
    var xs = null;
    if (arguments.length > 1) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sayf__delegate.call(this, fmt, xs);
  };
  sayf.cljs$lang$maxFixedArity = 1;
  sayf.cljs$lang$applyTo = function(arglist__22359) {
    var fmt = cljs.core.first(arglist__22359);
    var xs = cljs.core.rest(arglist__22359);
    return sayf__delegate(fmt, xs);
  };
  sayf.cljs$core$IFn$_invoke$arity$variadic = sayf__delegate;
  return sayf;
}();
taoensso.encore.logp = function() {
  var logp__delegate = function(xs) {
    return taoensso.encore.log.call(null, clojure.string.join.call(null, " ", xs));
  };
  var logp = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return logp__delegate.call(this, xs);
  };
  logp.cljs$lang$maxFixedArity = 0;
  logp.cljs$lang$applyTo = function(arglist__22360) {
    var xs = cljs.core.seq(arglist__22360);
    return logp__delegate(xs);
  };
  logp.cljs$core$IFn$_invoke$arity$variadic = logp__delegate;
  return logp;
}();
taoensso.encore.logf = function() {
  var logf__delegate = function(fmt, xs) {
    return taoensso.encore.log.call(null, cljs.core.apply.call(null, taoensso.encore.format, fmt, xs));
  };
  var logf = function(fmt, var_args) {
    var xs = null;
    if (arguments.length > 1) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return logf__delegate.call(this, fmt, xs);
  };
  logf.cljs$lang$maxFixedArity = 1;
  logf.cljs$lang$applyTo = function(arglist__22361) {
    var fmt = cljs.core.first(arglist__22361);
    var xs = cljs.core.rest(arglist__22361);
    return logf__delegate(fmt, xs);
  };
  logf.cljs$core$IFn$_invoke$arity$variadic = logf__delegate;
  return logf;
}();
taoensso.encore.debugf = cljs.core.comp.call(null, function(p1__22354_SHARP_) {
  return[cljs.core.str(""), cljs.core.str(p1__22354_SHARP_)].join("");
}, taoensso.encore.logf);
taoensso.encore.infof = cljs.core.comp.call(null, function(p1__22355_SHARP_) {
  return[cljs.core.str(""), cljs.core.str(p1__22355_SHARP_)].join("");
}, taoensso.encore.logf);
taoensso.encore.warnf = cljs.core.comp.call(null, function(p1__22356_SHARP_) {
  return[cljs.core.str("WARN: "), cljs.core.str(p1__22356_SHARP_)].join("");
}, taoensso.encore.logf);
taoensso.encore.errorf = cljs.core.comp.call(null, function(p1__22357_SHARP_) {
  return[cljs.core.str("ERROR: "), cljs.core.str(p1__22357_SHARP_)].join("");
}, taoensso.encore.logf);
taoensso.encore.get_window_location = function get_window_location() {
  var loc_STAR_ = window.location;
  var loc = new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "href", "href", 1017115293), loc_STAR_.href, new cljs.core.Keyword(null, "protocol", "protocol", 4319707658), loc_STAR_.protocol, new cljs.core.Keyword(null, "hostname", "hostname", 714100645), loc_STAR_.hostname, new cljs.core.Keyword(null, "host", "host", 1017112858), loc_STAR_.host, new cljs.core.Keyword(null, "pathname", "pathname", 2249078690), loc_STAR_.pathname, new cljs.core.Keyword(null, "search", "search", 
  4402534682), loc_STAR_.search, new cljs.core.Keyword(null, "hash", "hash", 1017099392), loc_STAR_.hash], null);
  return loc;
};
taoensso.encore.set_exp_backoff_timeout_BANG_ = function() {
  var set_exp_backoff_timeout_BANG___delegate = function(nullary_f, p__22362) {
    var vec__22364 = p__22362;
    var nattempt = cljs.core.nth.call(null, vec__22364, 0, null);
    return window.setTimeout(nullary_f, taoensso.encore.exp_backoff.call(null, function() {
      var or__15542__auto__ = nattempt;
      if (cljs.core.truth_(or__15542__auto__)) {
        return or__15542__auto__;
      } else {
        return 0;
      }
    }()));
  };
  var set_exp_backoff_timeout_BANG_ = function(nullary_f, var_args) {
    var p__22362 = null;
    if (arguments.length > 1) {
      p__22362 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return set_exp_backoff_timeout_BANG___delegate.call(this, nullary_f, p__22362);
  };
  set_exp_backoff_timeout_BANG_.cljs$lang$maxFixedArity = 1;
  set_exp_backoff_timeout_BANG_.cljs$lang$applyTo = function(arglist__22365) {
    var nullary_f = cljs.core.first(arglist__22365);
    var p__22362 = cljs.core.rest(arglist__22365);
    return set_exp_backoff_timeout_BANG___delegate(nullary_f, p__22362);
  };
  set_exp_backoff_timeout_BANG_.cljs$core$IFn$_invoke$arity$variadic = set_exp_backoff_timeout_BANG___delegate;
  return set_exp_backoff_timeout_BANG_;
}();
taoensso.encore.xhr_pool_ = new cljs.core.Delay(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), false, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null)), function() {
  return new goog.net.XhrIoPool;
});
taoensso.encore.get_pooled_xhr_BANG_ = function get_pooled_xhr_BANG_() {
  var result = cljs.core.deref.call(null, taoensso.encore.xhr_pool_).getObject();
  if (void 0 === result) {
    return null;
  } else {
    return result;
  }
};
taoensso.encore.coerce_xhr_params = function coerce_xhr_params(uri, method, params) {
  if (params == null || cljs.core.map_QMARK_.call(null, params)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", -1640527972, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", -1637150201, null), new cljs.core.Symbol(null, "params", "params", 1659007807, null)), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1637187556, null), new cljs.core.Symbol(null, "params", "params", 1659007807, null)))))].join(""));
  }
  var _QMARK_pstr = cljs.core.empty_QMARK_.call(null, params) ? null : function() {
    var s = goog.Uri.QueryData.createFromMap(new goog.structs.Map(cljs.core.clj__GT_js.call(null, params))).toString();
    if (cljs.core.truth_(clojure.string.blank_QMARK_.call(null, s))) {
      return null;
    } else {
      return s;
    }
  }();
  var G__22367 = method;
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "post", "post", 1017351186), G__22367)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [uri, _QMARK_pstr], null);
  } else {
    if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "get", "get", 1014006472), G__22367)) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.truth_(_QMARK_pstr) ? [cljs.core.str(uri), cljs.core.str("?"), cljs.core.str(_QMARK_pstr)].join("") : uri, null], null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(method)].join(""));
      } else {
        return null;
      }
    }
  }
};
taoensso.encore.ajax_lite = function ajax_lite(uri, p__22370, callback) {
  var map__22384 = p__22370;
  var map__22384__$1 = cljs.core.seq_QMARK_.call(null, map__22384) ? cljs.core.apply.call(null, cljs.core.hash_map, map__22384) : map__22384;
  var resp_type = cljs.core.get.call(null, map__22384__$1, new cljs.core.Keyword(null, "resp-type", "resp-type", 3288017545), new cljs.core.Keyword(null, "auto", "auto", 1016910113));
  var timeout = cljs.core.get.call(null, map__22384__$1, new cljs.core.Keyword(null, "timeout", "timeout", 3994960083), 1E4);
  var headers = cljs.core.get.call(null, map__22384__$1, new cljs.core.Keyword(null, "headers", "headers", 1809212152));
  var params = cljs.core.get.call(null, map__22384__$1, new cljs.core.Keyword(null, "params", "params", 4313443576));
  var method = cljs.core.get.call(null, map__22384__$1, new cljs.core.Keyword(null, "method", "method", 4231316563), new cljs.core.Keyword(null, "get", "get", 1014006472));
  if (timeout == null || taoensso.encore.nneg_int_QMARK_.call(null, timeout)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", -1640527972, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", -1637150201, null), new cljs.core.Symbol(null, "timeout", "timeout", 1340524314, null)), cljs.core.list(new cljs.core.Symbol(null, "nneg-int?", "nneg-int?", -2019261324, null), new cljs.core.Symbol(null, "timeout", "timeout", 1340524314, null)))))].join(""));
  }
  var temp__4090__auto__ = taoensso.encore.get_pooled_xhr_BANG_.call(null);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var xhr = temp__4090__auto__;
    try {
      var method_STAR_ = function() {
        var G__22387 = method;
        if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "post", "post", 1017351186), G__22387)) {
          return "POST";
        } else {
          if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "get", "get", 1014006472), G__22387)) {
            return "GET";
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(method)].join(""));
            } else {
              return null;
            }
          }
        }
      }();
      var params__$1 = taoensso.encore.map_keys.call(null, cljs.core.name, params);
      var headers__$1 = cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, ["X-Requested-With", "XMLHTTPRequest"], null), taoensso.encore.map_keys.call(null, cljs.core.name, headers));
      var vec__22386 = taoensso.encore.coerce_xhr_params.call(null, uri, method, params__$1);
      var uri_STAR_ = cljs.core.nth.call(null, vec__22386, 0, null);
      var post_content_STAR_ = cljs.core.nth.call(null, vec__22386, 1, null);
      var headers_STAR_ = cljs.core.clj__GT_js.call(null, cljs.core.not.call(null, post_content_STAR_) ? headers__$1 : cljs.core.assoc.call(null, headers__$1, "Content-Type", "application/x-www-form-urlencoded; charset\x3dUTF-8"));
      var G__22388_22397 = xhr;
      goog.events.listenOnce(G__22388_22397, goog.net.EventType.READY, function(_) {
        return cljs.core.deref.call(null, taoensso.encore.xhr_pool_).releaseObject(xhr);
      });
      goog.events.listenOnce(G__22388_22397, goog.net.EventType.COMPLETE, function wrapped_callback(resp) {
        var status = xhr.getStatus();
        var got_resp_QMARK_ = cljs.core.not_EQ_.call(null, status, -1);
        var content_type = got_resp_QMARK_ ? xhr.getResponseHeader("Content-Type") : null;
        var cb_arg = new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "raw-resp", "raw-resp", 1471254983), resp, new cljs.core.Keyword(null, "xhr", "xhr", 1014022900), xhr, new cljs.core.Keyword(null, "content-type", "content-type", 1799574400), got_resp_QMARK_ ? content_type : null, new cljs.core.Keyword(null, "content", "content", 1965434859), got_resp_QMARK_ ? function() {
          var resp_type__$1 = !cljs.core._EQ_.call(null, resp_type, new cljs.core.Keyword(null, "auto", "auto", 1016910113)) ? resp_type : function() {
            var pred__22393 = function(status, got_resp_QMARK_, content_type) {
              return function(p1__22369_SHARP_, p2__22368_SHARP_) {
                return taoensso.encore.str_contains_QMARK_.call(null, p2__22368_SHARP_, p1__22369_SHARP_);
              };
            }(status, got_resp_QMARK_, content_type);
            var expr__22394 = [cljs.core.str(content_type)].join("");
            if (pred__22393.call(null, "/edn", expr__22394)) {
              return new cljs.core.Keyword(null, "edn", "edn", 1014004513);
            } else {
              if (pred__22393.call(null, "/json", expr__22394)) {
                return new cljs.core.Keyword(null, "json", "json", 1017176154);
              } else {
                if (pred__22393.call(null, "/xml", expr__22394)) {
                  return new cljs.core.Keyword(null, "xml", "xml", 1014023049);
                } else {
                  if (pred__22393.call(null, "/html", expr__22394)) {
                    return new cljs.core.Keyword(null, "text", "text", 1017460895);
                  } else {
                    return new cljs.core.Keyword(null, "text", "text", 1017460895);
                  }
                }
              }
            }
          }();
          var G__22396 = resp_type__$1;
          if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "edn", "edn", 1014004513), G__22396)) {
            return cljs.reader.read_string.call(null, xhr.getResponseText());
          } else {
            if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "xml", "xml", 1014023049), G__22396)) {
              return xhr.getResponseXml();
            } else {
              if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "json", "json", 1017176154), G__22396)) {
                return xhr.getResponseJson();
              } else {
                if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "text", "text", 1017460895), G__22396)) {
                  return xhr.getResponseText();
                } else {
                  if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                    throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(resp_type__$1)].join(""));
                  } else {
                    return null;
                  }
                }
              }
            }
          }
        }() : null, new cljs.core.Keyword(null, "status", "status", 4416389988), got_resp_QMARK_ ? status : null, new cljs.core.Keyword(null, "error", "error", 1110689146), got_resp_QMARK_ ? 200 <= status && status <= 299 ? null : status : cljs.core.get.call(null, new cljs.core.PersistentArrayMap.fromArray([goog.net.ErrorCode.EXCEPTION, new cljs.core.Keyword(null, "exception", "exception", 2495529921), goog.net.ErrorCode.HTTP_ERROR, new cljs.core.Keyword(null, "http-error", "http-error", 848845813), 
        goog.net.ErrorCode.ABORT, new cljs.core.Keyword(null, "abort", "abort", 1106515618), goog.net.ErrorCode.TIMEOUT, new cljs.core.Keyword(null, "timeout", "timeout", 3994960083)], true, false), xhr.getLastErrorCode(), new cljs.core.Keyword(null, "unknown", "unknown", 729063356))], null);
        return callback.call(null, cb_arg);
      });
      G__22388_22397.setTimeoutInterval(function() {
        var or__15542__auto__ = timeout;
        if (cljs.core.truth_(or__15542__auto__)) {
          return or__15542__auto__;
        } else {
          return 0;
        }
      }());
      G__22388_22397.send(uri_STAR_, method_STAR_, post_content_STAR_, headers_STAR_);
      return xhr;
    } catch (e22385) {
      if (e22385 instanceof Error) {
        var e = e22385;
        taoensso.encore.logf.call(null, "Ajax error: %s", e);
        cljs.core.deref.call(null, taoensso.encore.xhr_pool_).releaseObject(xhr);
        return null;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw e22385;
        } else {
          return null;
        }
      }
    }
  } else {
    callback.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "error", "error", 1110689146), new cljs.core.Keyword(null, "xhr-pool-depleted", "xhr-pool-depleted", 4237587523)], null));
    return null;
  }
};
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = function() {
  var obj25069 = {};
  return obj25069;
}();
cljs.core.async.impl.protocols.take_BANG_ = function take_BANG_(port, fn1_handler) {
  if (function() {
    var and__15530__auto__ = port;
    if (and__15530__auto__) {
      return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler);
  } else {
    var x__16169__auto__ = port == null ? null : port;
    return function() {
      var or__15542__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core.async.impl.protocols.take_BANG_["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
        }
      }
    }().call(null, port, fn1_handler);
  }
};
cljs.core.async.impl.protocols.WritePort = function() {
  var obj25071 = {};
  return obj25071;
}();
cljs.core.async.impl.protocols.put_BANG_ = function put_BANG_(port, val, fn1_handler) {
  if (function() {
    var and__15530__auto__ = port;
    if (and__15530__auto__) {
      return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn1_handler);
  } else {
    var x__16169__auto__ = port == null ? null : port;
    return function() {
      var or__15542__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core.async.impl.protocols.put_BANG_["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
        }
      }
    }().call(null, port, val, fn1_handler);
  }
};
cljs.core.async.impl.protocols.Channel = function() {
  var obj25073 = {};
  return obj25073;
}();
cljs.core.async.impl.protocols.close_BANG_ = function close_BANG_(chan) {
  if (function() {
    var and__15530__auto__ = chan;
    if (and__15530__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan);
  } else {
    var x__16169__auto__ = chan == null ? null : chan;
    return function() {
      var or__15542__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core.async.impl.protocols.close_BANG_["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.closed_QMARK_ = function closed_QMARK_(chan) {
  if (function() {
    var and__15530__auto__ = chan;
    if (and__15530__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1(chan);
  } else {
    var x__16169__auto__ = chan == null ? null : chan;
    return function() {
      var or__15542__auto__ = cljs.core.async.impl.protocols.closed_QMARK_[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core.async.impl.protocols.closed_QMARK_["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.closed?", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.Handler = function() {
  var obj25075 = {};
  return obj25075;
}();
cljs.core.async.impl.protocols.active_QMARK_ = function active_QMARK_(h) {
  if (function() {
    var and__15530__auto__ = h;
    if (and__15530__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h);
  } else {
    var x__16169__auto__ = h == null ? null : h;
    return function() {
      var or__15542__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core.async.impl.protocols.active_QMARK_["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.commit = function commit(h) {
  if (function() {
    var and__15530__auto__ = h;
    if (and__15530__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$commit$arity$1;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h);
  } else {
    var x__16169__auto__ = h == null ? null : h;
    return function() {
      var or__15542__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core.async.impl.protocols.commit["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.Buffer = function() {
  var obj25077 = {};
  return obj25077;
}();
cljs.core.async.impl.protocols.full_QMARK_ = function full_QMARK_(b) {
  if (function() {
    var and__15530__auto__ = b;
    if (and__15530__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b);
  } else {
    var x__16169__auto__ = b == null ? null : b;
    return function() {
      var or__15542__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core.async.impl.protocols.full_QMARK_["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function remove_BANG_(b) {
  if (function() {
    var and__15530__auto__ = b;
    if (and__15530__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b);
  } else {
    var x__16169__auto__ = b == null ? null : b;
    return function() {
      var or__15542__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core.async.impl.protocols.remove_BANG_["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function add_BANG_(b, itm) {
  if (function() {
    var and__15530__auto__ = b;
    if (and__15530__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2(b, itm);
  } else {
    var x__16169__auto__ = b == null ? null : b;
    return function() {
      var or__15542__auto__ = cljs.core.async.impl.protocols.add_BANG_[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core.async.impl.protocols.add_BANG_["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.add!", b);
        }
      }
    }().call(null, b, itm);
  }
};
cljs.core.async.impl.protocols.UnblockingBuffer = function() {
  var obj25079 = {};
  return obj25079;
}();
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES = 4;
cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION = 5;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 6;
cljs.core.async.impl.ioc_helpers.aset_object = function aset_object(arr, idx, o) {
  return arr[idx][o];
};
cljs.core.async.impl.ioc_helpers.aget_object = function aget_object(arr, idx) {
  return arr[idx];
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[cljs.core.async.impl.ioc_helpers.STATE_IDX], new cljs.core.Keyword(null, "finished", "finished", 4635210724));
};
cljs.core.async.impl.ioc_helpers.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.impl.ioc_helpers.t25097 !== "undefined") {
  } else {
    cljs.core.async.impl.ioc_helpers.t25097 = function(f, fn_handler, meta25098) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta25098 = meta25098;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.impl.ioc_helpers.t25097.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t25097.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t25097";
    cljs.core.async.impl.ioc_helpers.t25097.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
      return cljs.core._write.call(null, writer__16110__auto__, "cljs.core.async.impl.ioc-helpers/t25097");
    };
    cljs.core.async.impl.ioc_helpers.t25097.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.impl.ioc_helpers.t25097.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t25097.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.impl.ioc_helpers.t25097.prototype.cljs$core$IMeta$_meta$arity$1 = function(_25099) {
      var self__ = this;
      var _25099__$1 = this;
      return self__.meta25098;
    };
    cljs.core.async.impl.ioc_helpers.t25097.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_25099, meta25098__$1) {
      var self__ = this;
      var _25099__$1 = this;
      return new cljs.core.async.impl.ioc_helpers.t25097(self__.f, self__.fn_handler, meta25098__$1);
    };
    cljs.core.async.impl.ioc_helpers.__GT_t25097 = function __GT_t25097(f__$1, fn_handler__$1, meta25098) {
      return new cljs.core.async.impl.ioc_helpers.t25097(f__$1, fn_handler__$1, meta25098);
    };
  }
  return new cljs.core.async.impl.ioc_helpers.t25097(f, fn_handler, null);
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.FN_IDX).call(null, state);
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state);
  } catch (e25101) {
    if (e25101 instanceof Object) {
      var ex = e25101;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.USER_START_IDX));
      throw ex;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw e25101;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function take_BANG_(state, blk, c) {
  var temp__4090__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_25104_25106 = state;
    statearr_25104_25106[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = x;
    statearr_25104_25106[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4090__auto__)) {
    var cb = temp__4090__auto__;
    var statearr_25105_25107 = state;
    statearr_25105_25107[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_25105_25107[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function put_BANG_(state, blk, c, val) {
  var temp__4090__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(ret_val) {
    var statearr_25110_25112 = state;
    statearr_25110_25112[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = ret_val;
    statearr_25110_25112[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4090__auto__)) {
    var cb = temp__4090__auto__;
    var statearr_25111_25113 = state;
    statearr_25111_25113[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_25111_25113[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_ = function() {
  var ioc_alts_BANG___delegate = function(state, cont_block, ports, p__25114) {
    var map__25119 = p__25114;
    var map__25119__$1 = cljs.core.seq_QMARK_.call(null, map__25119) ? cljs.core.apply.call(null, cljs.core.hash_map, map__25119) : map__25119;
    var opts = map__25119__$1;
    var statearr_25120_25123 = state;
    statearr_25120_25123[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block;
    var temp__4092__auto__ = cljs.core.async.do_alts.call(null, function(val) {
      var statearr_25121_25124 = state;
      statearr_25121_25124[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val;
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
    }, ports, opts);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var cb = temp__4092__auto__;
      var statearr_25122_25125 = state;
      statearr_25122_25125[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
    } else {
      return null;
    }
  };
  var ioc_alts_BANG_ = function(state, cont_block, ports, var_args) {
    var p__25114 = null;
    if (arguments.length > 3) {
      p__25114 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return ioc_alts_BANG___delegate.call(this, state, cont_block, ports, p__25114);
  };
  ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
  ioc_alts_BANG_.cljs$lang$applyTo = function(arglist__25126) {
    var state = cljs.core.first(arglist__25126);
    arglist__25126 = cljs.core.next(arglist__25126);
    var cont_block = cljs.core.first(arglist__25126);
    arglist__25126 = cljs.core.next(arglist__25126);
    var ports = cljs.core.first(arglist__25126);
    var p__25114 = cljs.core.rest(arglist__25126);
    return ioc_alts_BANG___delegate(state, cont_block, ports, p__25114);
  };
  ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = ioc_alts_BANG___delegate;
  return ioc_alts_BANG_;
}();
cljs.core.async.impl.ioc_helpers.return_chan = function return_chan(state, value) {
  var c = state[cljs.core.async.impl.ioc_helpers.USER_START_IDX];
  if (value == null) {
  } else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function() {
      return null;
    }));
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame = function(catch_block, catch_exception, finally_block, continue_block, prev, __meta, __extmap) {
  this.catch_block = catch_block;
  this.catch_exception = catch_exception;
  this.finally_block = finally_block;
  this.continue_block = continue_block;
  this.prev = prev;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 5) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IHash$_hash$arity$1 = function(this__16123__auto__) {
  var self__ = this;
  var this__16123__auto____$1 = this;
  var h__15953__auto__ = self__.__hash;
  if (!(h__15953__auto__ == null)) {
    return h__15953__auto__;
  } else {
    var h__15953__auto____$1 = cljs.core.hash_imap.call(null, this__16123__auto____$1);
    self__.__hash = h__15953__auto____$1;
    return h__15953__auto____$1;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__16128__auto__, k__16129__auto__) {
  var self__ = this;
  var this__16128__auto____$1 = this;
  return cljs.core._lookup.call(null, this__16128__auto____$1, k__16129__auto__, null);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__16130__auto__, k25128, else__16131__auto__) {
  var self__ = this;
  var this__16130__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k25128, new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893))) {
    return self__.catch_block;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k25128, new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687))) {
      return self__.catch_exception;
    } else {
      if (cljs.core.keyword_identical_QMARK_.call(null, k25128, new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429))) {
        return self__.finally_block;
      } else {
        if (cljs.core.keyword_identical_QMARK_.call(null, k25128, new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097))) {
          return self__.continue_block;
        } else {
          if (cljs.core.keyword_identical_QMARK_.call(null, k25128, new cljs.core.Keyword(null, "prev", "prev", 1017353637))) {
            return self__.prev;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.get.call(null, self__.__extmap, k25128, else__16131__auto__);
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__16135__auto__, k__16136__auto__, G__25127) {
  var self__ = this;
  var this__16135__auto____$1 = this;
  var pred__25130 = cljs.core.keyword_identical_QMARK_;
  var expr__25131 = k__16136__auto__;
  if (cljs.core.truth_(pred__25130.call(null, new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), expr__25131))) {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(G__25127, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__25130.call(null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), expr__25131))) {
      return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, G__25127, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__25130.call(null, new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), expr__25131))) {
        return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, G__25127, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__25130.call(null, new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097), expr__25131))) {
          return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, G__25127, self__.prev, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__25130.call(null, new cljs.core.Keyword(null, "prev", "prev", 1017353637), expr__25131))) {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, G__25127, self__.__meta, self__.__extmap, null);
          } else {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__16136__auto__, G__25127), null);
          }
        }
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__16142__auto__, writer__16143__auto__, opts__16144__auto__) {
  var self__ = this;
  var this__16142__auto____$1 = this;
  var pr_pair__16145__auto__ = function(keyval__16146__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__16143__auto__, cljs.core.pr_writer, "", " ", "", opts__16144__auto__, keyval__16146__auto__);
  };
  return cljs.core.pr_sequential_writer.call(null, writer__16143__auto__, pr_pair__16145__auto__, "#cljs.core.async.impl.ioc-helpers.ExceptionFrame{", ", ", "}", opts__16144__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), self__.catch_block], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), self__.catch_exception], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097), 
  self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", "prev", 1017353637), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__16133__auto__, entry__16134__auto__) {
  var self__ = this;
  var this__16133__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__16134__auto__)) {
    return cljs.core._assoc.call(null, this__16133__auto____$1, cljs.core._nth.call(null, entry__16134__auto__, 0), cljs.core._nth.call(null, entry__16134__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__16133__auto____$1, entry__16134__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__16140__auto__) {
  var self__ = this;
  var this__16140__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), self__.catch_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), self__.catch_exception], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097), self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", 
  "prev", 1017353637), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICounted$_count$arity$1 = function(this__16132__auto__) {
  var self__ = this;
  var this__16132__auto____$1 = this;
  return 5 + cljs.core.count.call(null, self__.__extmap);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__16124__auto__, other__16125__auto__) {
  var self__ = this;
  var this__16124__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__15530__auto__ = other__16125__auto__;
    if (cljs.core.truth_(and__15530__auto__)) {
      return this__16124__auto____$1.constructor === other__16125__auto__.constructor && cljs.core.equiv_map.call(null, this__16124__auto____$1, other__16125__auto__);
    } else {
      return and__15530__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__16127__auto__, G__25127) {
  var self__ = this;
  var this__16127__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, G__25127, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__16122__auto__) {
  var self__ = this;
  var this__16122__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__16126__auto__) {
  var self__ = this;
  var this__16126__auto____$1 = this;
  return self__.__meta;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__16137__auto__, k__16138__auto__) {
  var self__ = this;
  var this__16137__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), null, new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), null, new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097), null, new cljs.core.Keyword(null, "prev", "prev", 1017353637), 
  null], null), null), k__16138__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__16137__auto____$1), self__.__meta), k__16138__auto__);
  } else {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__16138__auto__)), null);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$type = true;
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrSeq = function(this__16162__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrWriter = function(this__16162__auto__, writer__16163__auto__) {
  return cljs.core._write.call(null, writer__16163__auto__, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame = function __GT_ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev);
};
cljs.core.async.impl.ioc_helpers.map__GT_ExceptionFrame = function map__GT_ExceptionFrame(G__25129) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame((new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893)).cljs$core$IFn$_invoke$arity$1(G__25129), (new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687)).cljs$core$IFn$_invoke$arity$1(G__25129), (new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(G__25129), (new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097)).cljs$core$IFn$_invoke$arity$1(G__25129), 
  (new cljs.core.Keyword(null, "prev", "prev", 1017353637)).cljs$core$IFn$_invoke$arity$1(G__25129), null, cljs.core.dissoc.call(null, G__25129, new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097), new cljs.core.Keyword(null, "prev", "prev", 1017353637)));
};
cljs.core.async.impl.ioc_helpers.add_exception_frame = function add_exception_frame(state, catch_block, catch_exception, finally_block, continue_block) {
  var statearr_25134 = state;
  statearr_25134[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame.call(null, catch_block, catch_exception, finally_block, continue_block, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES));
  return statearr_25134;
};
cljs.core.async.impl.ioc_helpers.process_exception = function process_exception(state) {
  while (true) {
    var exception_frame = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES);
    var catch_block = (new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var catch_exception = (new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var exception = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION);
    if (cljs.core.truth_(function() {
      var and__15530__auto__ = exception;
      if (cljs.core.truth_(and__15530__auto__)) {
        return cljs.core.not.call(null, exception_frame);
      } else {
        return and__15530__auto__;
      }
    }())) {
      throw exception;
    } else {
      if (cljs.core.truth_(function() {
        var and__15530__auto__ = exception;
        if (cljs.core.truth_(and__15530__auto__)) {
          var and__15530__auto____$1 = catch_block;
          if (cljs.core.truth_(and__15530__auto____$1)) {
            return exception instanceof catch_exception;
          } else {
            return and__15530__auto____$1;
          }
        } else {
          return and__15530__auto__;
        }
      }())) {
        var statearr_25140 = state;
        statearr_25140[cljs.core.async.impl.ioc_helpers.STATE_IDX] = catch_block;
        statearr_25140[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = exception;
        statearr_25140[cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION] = null;
        statearr_25140[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), null);
        return statearr_25140;
      } else {
        if (cljs.core.truth_(function() {
          var and__15530__auto__ = exception;
          if (cljs.core.truth_(and__15530__auto__)) {
            return cljs.core.not.call(null, catch_block) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame));
          } else {
            return and__15530__auto__;
          }
        }())) {
          var statearr_25141_25145 = state;
          statearr_25141_25145[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", 1017353637)).cljs$core$IFn$_invoke$arity$1(exception_frame);
          var G__25146 = state;
          state = G__25146;
          continue;
        } else {
          if (cljs.core.truth_(function() {
            var and__15530__auto__ = exception;
            if (cljs.core.truth_(and__15530__auto__)) {
              var and__15530__auto____$1 = cljs.core.not.call(null, catch_block);
              if (and__15530__auto____$1) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__15530__auto____$1;
              }
            } else {
              return and__15530__auto__;
            }
          }())) {
            var statearr_25142 = state;
            statearr_25142[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame);
            statearr_25142[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), null);
            return statearr_25142;
          } else {
            if (cljs.core.truth_(function() {
              var and__15530__auto__ = cljs.core.not.call(null, exception);
              if (and__15530__auto__) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__15530__auto__;
              }
            }())) {
              var statearr_25143 = state;
              statearr_25143[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              statearr_25143[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), null);
              return statearr_25143;
            } else {
              if (cljs.core.not.call(null, exception) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame))) {
                var statearr_25144 = state;
                statearr_25144[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                statearr_25144[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", 1017353637)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                return statearr_25144;
              } else {
                if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                  if (false) {
                    return null;
                  } else {
                    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("No matching clause"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, false))].join(""));
                  }
                } else {
                  return null;
                }
              }
            }
          }
        }
      }
    }
    break;
  }
};
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while (true) {
    if (cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__25091 = cnt + 1;
      cnt = G__25091;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr;
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core.async.impl.buffers/RingBuffer");
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if (self__.length === 0) {
    return null;
  } else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x;
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if (self__.length + 1 === self__.arr.length) {
    this$.resize();
  } else {
  }
  return this$.unshift(x);
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if (self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr;
  } else {
    if (self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr;
    } else {
      if (self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__16390__auto__ = self__.length;
  var x = 0;
  while (true) {
    if (x < n__16390__auto__) {
      var v_25092 = this$.pop();
      if (keep_QMARK_.call(null, v_25092)) {
        this$.unshift(v_25092);
      } else {
      }
      var G__25093 = x + 1;
      x = G__25093;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function __GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr);
};
cljs.core.async.impl.buffers.ring_buffer = function ring_buffer(n) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't create a ring buffer of size 0"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3e", "\x3e", -1640531465, null), new cljs.core.Symbol(null, "n", "n", -1640531417, null), 0)))].join(""));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n));
};
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core.async.impl.buffers/FixedBuffer");
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length === self__.n;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, this$__$1))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't add to a full buffer"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", -1640422260, null), cljs.core.list(new cljs.core.Symbol("impl", "full?", "impl/full?", -1337857039, null), new cljs.core.Symbol(null, "this", "this", -1636972457, null)))))].join(""));
  }
  return self__.buf.unshift(itm);
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function __GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n);
};
cljs.core.async.impl.buffers.fixed_buffer = function fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core.async.impl.buffers/DroppingBuffer");
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    return null;
  } else {
    return self__.buf.unshift(itm);
  }
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function __GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n);
};
cljs.core.async.impl.buffers.dropping_buffer = function dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core.async.impl.buffers/SlidingBuffer");
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    cljs.core.async.impl.protocols.remove_BANG_.call(null, this$__$1);
  } else {
  }
  return self__.buf.unshift(itm);
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function __GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n);
};
cljs.core.async.impl.buffers.sliding_buffer = function sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.dispatch.message_channel = null;
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.process_messages = function process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_25080 = 0;
  while (true) {
    var m_25081 = cljs.core.async.impl.dispatch.tasks.pop();
    if (m_25081 == null) {
    } else {
      m_25081.call(null);
      if (count_25080 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__25082 = count_25080 + 1;
        count_25080 = G__25082;
        continue;
      } else {
      }
    }
    break;
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if (cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
  } else {
    return null;
  }
};
if (typeof MessageChannel !== "undefined") {
  cljs.core.async.impl.dispatch.message_channel = new MessageChannel;
  cljs.core.async.impl.dispatch.message_channel.port1.onmessage = function(msg) {
    return cljs.core.async.impl.dispatch.process_messages.call(null);
  };
} else {
}
cljs.core.async.impl.dispatch.queue_dispatcher = function queue_dispatcher() {
  if (cljs.core.truth_(function() {
    var and__15530__auto__ = cljs.core.async.impl.dispatch.queued_QMARK_;
    if (and__15530__auto__) {
      return cljs.core.async.impl.dispatch.running_QMARK_;
    } else {
      return and__15530__auto__;
    }
  }())) {
    return null;
  } else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    if (typeof MessageChannel !== "undefined") {
      return cljs.core.async.impl.dispatch.message_channel.port2.postMessage(0);
    } else {
      if (typeof setImmediate !== "undefined") {
        return setImmediate(cljs.core.async.impl.dispatch.process_messages);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return setTimeout(cljs.core.async.impl.dispatch.process_messages, 0);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.async.impl.dispatch.run = function run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
};
cljs.core.async.impl.dispatch.queue_delay = function queue_delay(f, delay) {
  return setTimeout(f, delay);
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.channels.box = function box(val) {
  if (typeof cljs.core.async.impl.channels.t25086 !== "undefined") {
  } else {
    cljs.core.async.impl.channels.t25086 = function(val, box, meta25087) {
      this.val = val;
      this.box = box;
      this.meta25087 = meta25087;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 425984;
    };
    cljs.core.async.impl.channels.t25086.cljs$lang$type = true;
    cljs.core.async.impl.channels.t25086.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t25086";
    cljs.core.async.impl.channels.t25086.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
      return cljs.core._write.call(null, writer__16110__auto__, "cljs.core.async.impl.channels/t25086");
    };
    cljs.core.async.impl.channels.t25086.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.val;
    };
    cljs.core.async.impl.channels.t25086.prototype.cljs$core$IMeta$_meta$arity$1 = function(_25088) {
      var self__ = this;
      var _25088__$1 = this;
      return self__.meta25087;
    };
    cljs.core.async.impl.channels.t25086.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_25088, meta25087__$1) {
      var self__ = this;
      var _25088__$1 = this;
      return new cljs.core.async.impl.channels.t25086(self__.val, self__.box, meta25087__$1);
    };
    cljs.core.async.impl.channels.__GT_t25086 = function __GT_t25086(val__$1, box__$1, meta25087) {
      return new cljs.core.async.impl.channels.t25086(val__$1, box__$1, meta25087);
    };
  }
  return new cljs.core.async.impl.channels.t25086(val, box, null);
};
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val;
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__16112__auto__, writer__16113__auto__, opts__16114__auto__) {
  return cljs.core._write.call(null, writer__16113__auto__, "cljs.core.async.impl.channels/PutBox");
};
cljs.core.async.impl.channels.__GT_PutBox = function __GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val);
};
cljs.core.async.impl.channels.put_active_QMARK_ = function put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler);
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core.async.impl.channels/ManyToManyChannel");
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.closed) {
    return null;
  } else {
    self__.closed = true;
    while (true) {
      var taker_25089 = self__.takes.pop();
      if (taker_25089 == null) {
      } else {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_25089)) {
          var take_cb_25090 = cljs.core.async.impl.protocols.commit.call(null, taker_25089);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_25090, taker_25089) {
            return function() {
              return take_cb_25090.call(null, null);
            };
          }(take_cb_25090, taker_25089));
        } else {
        }
        continue;
      }
      break;
    }
    return null;
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null;
  } else {
    if (!(self__.buf == null) && cljs.core.count.call(null, self__.buf) > 0) {
      var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
      return cljs.core.async.impl.channels.box.call(null, cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf));
    } else {
      while (true) {
        var putter = self__.puts.pop();
        if (!(putter == null)) {
          var put_handler = putter.handler;
          var val = putter.val;
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler)) {
            var put_cb = cljs.core.async.impl.protocols.commit.call(null, put_handler);
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            cljs.core.async.impl.dispatch.run.call(null, function(put_cb, _, put_handler, val, putter) {
              return function() {
                return put_cb.call(null, true);
              };
            }(put_cb, _, put_handler, val, putter));
            return cljs.core.async.impl.channels.box.call(null, val);
          } else {
            continue;
          }
        } else {
          if (self__.closed) {
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            return cljs.core.async.impl.channels.box.call(null, null);
          } else {
            if (self__.dirty_takes > cljs.core.async.impl.channels.MAX_DIRTY) {
              self__.dirty_takes = 0;
              self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_);
            } else {
              self__.dirty_takes = self__.dirty_takes + 1;
            }
            if (self__.takes.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
            } else {
              throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending takes are allowed on a single channel.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", -1640531467, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 1395928862, null), new cljs.core.Symbol(null, 
              "takes", "takes", -1530407291, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", -1989946393, null))))].join(""));
            }
            self__.takes.unbounded_unshift(handler);
            return null;
          }
        }
        break;
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!(val == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't put nil in on a channel"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", -1640422260, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", -1637150201, null), new cljs.core.Symbol(null, "val", "val", -1640415014, null)))))].join(""));
  }
  var closed__$1 = self__.closed;
  if (closed__$1 || !cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return cljs.core.async.impl.channels.box.call(null, !closed__$1);
  } else {
    while (true) {
      var taker = self__.takes.pop();
      if (!(taker == null)) {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker)) {
          var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb, _, taker) {
            return function() {
              return take_cb.call(null, val);
            };
          }(take_cb, _, taker));
          return cljs.core.async.impl.channels.box.call(null, true);
        } else {
          continue;
        }
      } else {
        if (!(self__.buf == null || cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf))) {
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.protocols.add_BANG_.call(null, self__.buf, val);
          return cljs.core.async.impl.channels.box.call(null, true);
        } else {
          if (self__.dirty_puts > cljs.core.async.impl.channels.MAX_DIRTY) {
            self__.dirty_puts = 0;
            self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_);
          } else {
            self__.dirty_puts = self__.dirty_puts + 1;
          }
          if (self__.puts.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending puts are allowed on a single channel."), cljs.core.str(" Consider using a windowed buffer.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", -1640531467, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 
            1395928862, null), new cljs.core.Symbol(null, "puts", "puts", -1637078787, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", -1989946393, null))))].join(""));
          }
          self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
          return null;
        }
      }
      break;
    }
  }
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function __GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed);
};
cljs.core.async.impl.channels.chan = function chan(buf) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, false);
};
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function() {
  var random_level = null;
  var random_level__0 = function() {
    return random_level.call(null, 0);
  };
  var random_level__1 = function(level) {
    while (true) {
      if (Math.random() < cljs.core.async.impl.timers.P && level < cljs.core.async.impl.timers.MAX_LEVEL) {
        var G__25044 = level + 1;
        level = G__25044;
        continue;
      } else {
        return level;
      }
      break;
    }
  };
  random_level = function(level) {
    switch(arguments.length) {
      case 0:
        return random_level__0.call(this);
      case 1:
        return random_level__1.call(this, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_level.cljs$core$IFn$_invoke$arity$0 = random_level__0;
  random_level.cljs$core$IFn$_invoke$arity$1 = random_level__1;
  return random_level;
}();
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core.async.impl.timers/SkipListNode");
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.async.impl.timers.__GT_SkipListNode = function __GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward);
};
cljs.core.async.impl.timers.skip_list_node = function() {
  var skip_list_node = null;
  var skip_list_node__1 = function(level) {
    return skip_list_node.call(null, null, null, level);
  };
  var skip_list_node__3 = function(k, v, level) {
    var arr = new Array(level + 1);
    var i_25045 = 0;
    while (true) {
      if (i_25045 < arr.length) {
        arr[i_25045] = null;
        var G__25046 = i_25045 + 1;
        i_25045 = G__25046;
        continue;
      } else {
      }
      break;
    }
    return new cljs.core.async.impl.timers.SkipListNode(k, v, arr);
  };
  skip_list_node = function(k, v, level) {
    switch(arguments.length) {
      case 1:
        return skip_list_node__1.call(this, k);
      case 3:
        return skip_list_node__3.call(this, k, v, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  skip_list_node.cljs$core$IFn$_invoke$arity$1 = skip_list_node__1;
  skip_list_node.cljs$core$IFn$_invoke$arity$3 = skip_list_node__3;
  return skip_list_node;
}();
cljs.core.async.impl.timers.least_greater_node = function() {
  var least_greater_node = null;
  var least_greater_node__3 = function(x, k, level) {
    return least_greater_node.call(null, x, k, level, null);
  };
  var least_greater_node__4 = function(x, k, level, update) {
    while (true) {
      if (!(level < 0)) {
        var x__$1 = function() {
          var x__$1 = x;
          while (true) {
            var temp__4090__auto__ = x__$1.forward[level];
            if (cljs.core.truth_(temp__4090__auto__)) {
              var x_SINGLEQUOTE_ = temp__4090__auto__;
              if (x_SINGLEQUOTE_.key < k) {
                var G__25047 = x_SINGLEQUOTE_;
                x__$1 = G__25047;
                continue;
              } else {
                return x__$1;
              }
            } else {
              return x__$1;
            }
            break;
          }
        }();
        if (update == null) {
        } else {
          update[level] = x__$1;
        }
        var G__25048 = x__$1;
        var G__25049 = k;
        var G__25050 = level - 1;
        var G__25051 = update;
        x = G__25048;
        k = G__25049;
        level = G__25050;
        update = G__25051;
        continue;
      } else {
        return x;
      }
      break;
    }
  };
  least_greater_node = function(x, k, level, update) {
    switch(arguments.length) {
      case 3:
        return least_greater_node__3.call(this, x, k, level);
      case 4:
        return least_greater_node__4.call(this, x, k, level, update);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  least_greater_node.cljs$core$IFn$_invoke$arity$3 = least_greater_node__3;
  least_greater_node.cljs$core$IFn$_invoke$arity$4 = least_greater_node__4;
  return least_greater_node;
}();
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
  return cljs.core._write.call(null, writer__16110__auto__, "cljs.core.async.impl.timers/SkipList");
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval);
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var iter = function iter(node) {
    return new cljs.core.LazySeq(null, function() {
      if (node == null) {
        return null;
      } else {
        return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node.key, node.val], null), iter.call(null, node.forward[0]));
      }
    }, null, null);
  };
  return iter.call(null, self__.header.forward[0]);
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    return x__$1.val = v;
  } else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if (new_level > self__.level) {
      var i_25052 = self__.level + 1;
      while (true) {
        if (i_25052 <= new_level + 1) {
          update[i_25052] = self__.header;
          var G__25053 = i_25052 + 1;
          i_25052 = G__25053;
          continue;
        } else {
        }
        break;
      }
      self__.level = new_level;
    } else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while (true) {
      if (i <= self__.level) {
        var links = update[i].forward;
        x__$2.forward[i] = links[i];
        return links[i] = x__$2;
      } else {
        return null;
      }
      break;
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    var i_25054 = 0;
    while (true) {
      if (i_25054 <= self__.level) {
        var links_25055 = update[i_25054].forward;
        if (links_25055[i_25054] === x__$1) {
          links_25055[i_25054] = x__$1.forward[i_25054];
          var G__25056 = i_25054 + 1;
          i_25054 = G__25056;
          continue;
        } else {
          var G__25057 = i_25054 + 1;
          i_25054 = G__25057;
          continue;
        }
      } else {
      }
      break;
    }
    while (true) {
      if (self__.level > 0 && self__.header.forward[self__.level] == null) {
        self__.level = self__.level - 1;
        continue;
      } else {
        return null;
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (x_SINGLEQUOTE_ == null) {
            return null;
          } else {
            if (x_SINGLEQUOTE_.key >= k) {
              return x_SINGLEQUOTE_;
            } else {
              var G__25058 = x_SINGLEQUOTE_;
              x__$1 = G__25058;
              continue;
            }
          }
          break;
        }
      }();
      if (!(nx == null)) {
        var G__25059 = nx;
        var G__25060 = level__$1 - 1;
        x = G__25059;
        level__$1 = G__25060;
        continue;
      } else {
        var G__25061 = x;
        var G__25062 = level__$1 - 1;
        x = G__25061;
        level__$1 = G__25062;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (!(x_SINGLEQUOTE_ == null)) {
            if (x_SINGLEQUOTE_.key > k) {
              return x__$1;
            } else {
              var G__25063 = x_SINGLEQUOTE_;
              x__$1 = G__25063;
              continue;
            }
          } else {
            if (level__$1 === 0) {
              return x__$1;
            } else {
              return null;
            }
          }
          break;
        }
      }();
      if (cljs.core.truth_(nx)) {
        var G__25064 = nx;
        var G__25065 = level__$1 - 1;
        x = G__25064;
        level__$1 = G__25065;
        continue;
      } else {
        var G__25066 = x;
        var G__25067 = level__$1 - 1;
        x = G__25066;
        level__$1 = G__25067;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.__GT_SkipList = function __GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level);
};
cljs.core.async.impl.timers.skip_list = function skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0);
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function timeout(msecs) {
  var timeout__$1 = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout__$1);
  var or__15542__auto__ = cljs.core.truth_(function() {
    var and__15530__auto__ = me;
    if (cljs.core.truth_(and__15530__auto__)) {
      return me.key < timeout__$1 + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS;
    } else {
      return and__15530__auto__;
    }
  }()) ? me.val : null;
  if (cljs.core.truth_(or__15542__auto__)) {
    return or__15542__auto__;
  } else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout__$1, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function() {
      cljs.core.async.impl.timers.timeouts_map.remove(timeout__$1);
      return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel);
    }, msecs);
    return timeout_channel;
  }
};
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.timers");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.timers");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.ioc_helpers");
cljs.core.async.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.t22415 !== "undefined") {
  } else {
    cljs.core.async.t22415 = function(f, fn_handler, meta22416) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta22416 = meta22416;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t22415.cljs$lang$type = true;
    cljs.core.async.t22415.cljs$lang$ctorStr = "cljs.core.async/t22415";
    cljs.core.async.t22415.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
      return cljs.core._write.call(null, writer__16110__auto__, "cljs.core.async/t22415");
    };
    cljs.core.async.t22415.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t22415.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t22415.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.t22415.prototype.cljs$core$IMeta$_meta$arity$1 = function(_22417) {
      var self__ = this;
      var _22417__$1 = this;
      return self__.meta22416;
    };
    cljs.core.async.t22415.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_22417, meta22416__$1) {
      var self__ = this;
      var _22417__$1 = this;
      return new cljs.core.async.t22415(self__.f, self__.fn_handler, meta22416__$1);
    };
    cljs.core.async.__GT_t22415 = function __GT_t22415(f__$1, fn_handler__$1, meta22416) {
      return new cljs.core.async.t22415(f__$1, fn_handler__$1, meta22416);
    };
  }
  return new cljs.core.async.t22415(f, fn_handler, null);
};
cljs.core.async.buffer = function buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n);
};
cljs.core.async.dropping_buffer = function dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n);
};
cljs.core.async.sliding_buffer = function sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n);
};
cljs.core.async.unblocking_buffer_QMARK_ = function unblocking_buffer_QMARK_(buff) {
  var G__22419 = buff;
  if (G__22419) {
    var bit__16192__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__15542__auto__ = bit__16192__auto__;
      if (cljs.core.truth_(or__15542__auto__)) {
        return or__15542__auto__;
      } else {
        return G__22419.cljs$core$async$impl$protocols$UnblockingBuffer$;
      }
    }())) {
      return true;
    } else {
      if (!G__22419.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__22419);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__22419);
  }
};
cljs.core.async.chan = function() {
  var chan = null;
  var chan__0 = function() {
    return chan.call(null, null);
  };
  var chan__1 = function(buf_or_n) {
    var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
    return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1);
  };
  chan = function(buf_or_n) {
    switch(arguments.length) {
      case 0:
        return chan__0.call(this);
      case 1:
        return chan__1.call(this, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chan.cljs$core$IFn$_invoke$arity$0 = chan__0;
  chan.cljs$core$IFn$_invoke$arity$1 = chan__1;
  return chan;
}();
cljs.core.async.timeout = function timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs);
};
cljs.core.async._LT__BANG_ = function _LT__BANG_(port) {
  if (null) {
    return null;
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("\x3c! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
  }
};
cljs.core.async.take_BANG_ = function() {
  var take_BANG_ = null;
  var take_BANG___2 = function(port, fn1) {
    return take_BANG_.call(null, port, fn1, true);
  };
  var take_BANG___3 = function(port, fn1, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(ret)) {
      var val_22420 = cljs.core.deref.call(null, ret);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, val_22420);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function() {
          return fn1.call(null, val_22420);
        });
      }
    } else {
    }
    return null;
  };
  take_BANG_ = function(port, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return take_BANG___2.call(this, port, fn1);
      case 3:
        return take_BANG___3.call(this, port, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_BANG_.cljs$core$IFn$_invoke$arity$2 = take_BANG___2;
  take_BANG_.cljs$core$IFn$_invoke$arity$3 = take_BANG___3;
  return take_BANG_;
}();
cljs.core.async.nop = function nop(_) {
  return null;
};
cljs.core.async.fhnop = cljs.core.async.fn_handler.call(null, cljs.core.async.nop);
cljs.core.async._GT__BANG_ = function _GT__BANG_(port, val) {
  if (null) {
    return null;
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("\x3e! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
  }
};
cljs.core.async.put_BANG_ = function() {
  var put_BANG_ = null;
  var put_BANG___2 = function(port, val) {
    var temp__4090__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fhnop);
    if (cljs.core.truth_(temp__4090__auto__)) {
      var ret = temp__4090__auto__;
      return cljs.core.deref.call(null, ret);
    } else {
      return true;
    }
  };
  var put_BANG___3 = function(port, val, fn1) {
    return put_BANG_.call(null, port, val, fn1, true);
  };
  var put_BANG___4 = function(port, val, fn1, on_caller_QMARK_) {
    var temp__4090__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(temp__4090__auto__)) {
      var retb = temp__4090__auto__;
      var ret = cljs.core.deref.call(null, retb);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, ret);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function() {
          return fn1.call(null, ret);
        });
      }
      return ret;
    } else {
      return true;
    }
  };
  put_BANG_ = function(port, val, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return put_BANG___2.call(this, port, val);
      case 3:
        return put_BANG___3.call(this, port, val, fn1);
      case 4:
        return put_BANG___4.call(this, port, val, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  put_BANG_.cljs$core$IFn$_invoke$arity$2 = put_BANG___2;
  put_BANG_.cljs$core$IFn$_invoke$arity$3 = put_BANG___3;
  put_BANG_.cljs$core$IFn$_invoke$arity$4 = put_BANG___4;
  return put_BANG_;
}();
cljs.core.async.close_BANG_ = function close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port);
};
cljs.core.async.random_array = function random_array(n) {
  var a = new Array(n);
  var n__16390__auto___22421 = n;
  var x_22422 = 0;
  while (true) {
    if (x_22422 < n__16390__auto___22421) {
      a[x_22422] = 0;
      var G__22423 = x_22422 + 1;
      x_22422 = G__22423;
      continue;
    } else {
    }
    break;
  }
  var i = 1;
  while (true) {
    if (cljs.core._EQ_.call(null, i, n)) {
      return a;
    } else {
      var j = cljs.core.rand_int.call(null, i);
      a[i] = a[j];
      a[j] = i;
      var G__22424 = i + 1;
      i = G__22424;
      continue;
    }
    break;
  }
};
cljs.core.async.alt_flag = function alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if (typeof cljs.core.async.t22428 !== "undefined") {
  } else {
    cljs.core.async.t22428 = function(flag, alt_flag, meta22429) {
      this.flag = flag;
      this.alt_flag = alt_flag;
      this.meta22429 = meta22429;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t22428.cljs$lang$type = true;
    cljs.core.async.t22428.cljs$lang$ctorStr = "cljs.core.async/t22428";
    cljs.core.async.t22428.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
      return cljs.core._write.call(null, writer__16110__auto__, "cljs.core.async/t22428");
    };
    cljs.core.async.t22428.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t22428.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.deref.call(null, self__.flag);
    };
    cljs.core.async.t22428.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.reset_BANG_.call(null, self__.flag, null);
      return true;
    };
    cljs.core.async.t22428.prototype.cljs$core$IMeta$_meta$arity$1 = function(_22430) {
      var self__ = this;
      var _22430__$1 = this;
      return self__.meta22429;
    };
    cljs.core.async.t22428.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_22430, meta22429__$1) {
      var self__ = this;
      var _22430__$1 = this;
      return new cljs.core.async.t22428(self__.flag, self__.alt_flag, meta22429__$1);
    };
    cljs.core.async.__GT_t22428 = function __GT_t22428(flag__$1, alt_flag__$1, meta22429) {
      return new cljs.core.async.t22428(flag__$1, alt_flag__$1, meta22429);
    };
  }
  return new cljs.core.async.t22428(flag, alt_flag, null);
};
cljs.core.async.alt_handler = function alt_handler(flag, cb) {
  if (typeof cljs.core.async.t22434 !== "undefined") {
  } else {
    cljs.core.async.t22434 = function(cb, flag, alt_handler, meta22435) {
      this.cb = cb;
      this.flag = flag;
      this.alt_handler = alt_handler;
      this.meta22435 = meta22435;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t22434.cljs$lang$type = true;
    cljs.core.async.t22434.cljs$lang$ctorStr = "cljs.core.async/t22434";
    cljs.core.async.t22434.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
      return cljs.core._write.call(null, writer__16110__auto__, "cljs.core.async/t22434");
    };
    cljs.core.async.t22434.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t22434.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag);
    };
    cljs.core.async.t22434.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb;
    };
    cljs.core.async.t22434.prototype.cljs$core$IMeta$_meta$arity$1 = function(_22436) {
      var self__ = this;
      var _22436__$1 = this;
      return self__.meta22435;
    };
    cljs.core.async.t22434.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_22436, meta22435__$1) {
      var self__ = this;
      var _22436__$1 = this;
      return new cljs.core.async.t22434(self__.cb, self__.flag, self__.alt_handler, meta22435__$1);
    };
    cljs.core.async.__GT_t22434 = function __GT_t22434(cb__$1, flag__$1, alt_handler__$1, meta22435) {
      return new cljs.core.async.t22434(cb__$1, flag__$1, alt_handler__$1, meta22435);
    };
  }
  return new cljs.core.async.t22434(cb, flag, alt_handler, null);
};
cljs.core.async.do_alts = function do_alts(fret, ports, opts) {
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 4143410454)).cljs$core$IFn$_invoke$arity$1(opts);
  var ret = function() {
    var i = 0;
    while (true) {
      if (i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function(p1__22437_SHARP_) {
              return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__22437_SHARP_, wport], null));
            };
          }(i, val, idx, port, wport, flag, n, idxs, priority)));
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__22438_SHARP_) {
            return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__22438_SHARP_, port], null));
          };
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if (cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, vbox), function() {
            var or__15542__auto__ = wport;
            if (cljs.core.truth_(or__15542__auto__)) {
              return or__15542__auto__;
            } else {
              return port;
            }
          }()], null));
        } else {
          var G__22439 = i + 1;
          i = G__22439;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  }();
  var or__15542__auto__ = ret;
  if (cljs.core.truth_(or__15542__auto__)) {
    return or__15542__auto__;
  } else {
    if (cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", 2558708147))) {
      var temp__4092__auto__ = function() {
        var and__15530__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if (cljs.core.truth_(and__15530__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag);
        } else {
          return and__15530__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4092__auto__)) {
        var got = temp__4092__auto__;
        return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "default", "default", 2558708147)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "default", "default", 2558708147)], null));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
cljs.core.async.alts_BANG_ = function() {
  var alts_BANG___delegate = function(ports, p__22440) {
    var map__22442 = p__22440;
    var map__22442__$1 = cljs.core.seq_QMARK_.call(null, map__22442) ? cljs.core.apply.call(null, cljs.core.hash_map, map__22442) : map__22442;
    var opts = map__22442__$1;
    if (null) {
      return null;
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("alts! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
    }
  };
  var alts_BANG_ = function(ports, var_args) {
    var p__22440 = null;
    if (arguments.length > 1) {
      p__22440 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return alts_BANG___delegate.call(this, ports, p__22440);
  };
  alts_BANG_.cljs$lang$maxFixedArity = 1;
  alts_BANG_.cljs$lang$applyTo = function(arglist__22443) {
    var ports = cljs.core.first(arglist__22443);
    var p__22440 = cljs.core.rest(arglist__22443);
    return alts_BANG___delegate(ports, p__22440);
  };
  alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = alts_BANG___delegate;
  return alts_BANG_;
}();
cljs.core.async.map_LT_ = function map_LT_(f, ch) {
  if (typeof cljs.core.async.t22451 !== "undefined") {
  } else {
    cljs.core.async.t22451 = function(ch, f, map_LT_, meta22452) {
      this.ch = ch;
      this.f = f;
      this.map_LT_ = map_LT_;
      this.meta22452 = meta22452;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t22451.cljs$lang$type = true;
    cljs.core.async.t22451.cljs$lang$ctorStr = "cljs.core.async/t22451";
    cljs.core.async.t22451.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
      return cljs.core._write.call(null, writer__16110__auto__, "cljs.core.async/t22451");
    };
    cljs.core.async.t22451.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t22451.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
    };
    cljs.core.async.t22451.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t22451.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if (typeof cljs.core.async.t22454 !== "undefined") {
        } else {
          cljs.core.async.t22454 = function(fn1, _, meta22452, ch, f, map_LT_, meta22455) {
            this.fn1 = fn1;
            this._ = _;
            this.meta22452 = meta22452;
            this.ch = ch;
            this.f = f;
            this.map_LT_ = map_LT_;
            this.meta22455 = meta22455;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          cljs.core.async.t22454.cljs$lang$type = true;
          cljs.core.async.t22454.cljs$lang$ctorStr = "cljs.core.async/t22454";
          cljs.core.async.t22454.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
            return cljs.core._write.call(null, writer__16110__auto__, "cljs.core.async/t22454");
          };
          cljs.core.async.t22454.prototype.cljs$core$async$impl$protocols$Handler$ = true;
          cljs.core.async.t22454.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$3) {
            var self__ = this;
            var ___$4 = this;
            return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1);
          };
          cljs.core.async.t22454.prototype.cljs$core$async$impl$protocols$Handler$lock_id$arity$1 = function(___$3) {
            var self__ = this;
            var ___$4 = this;
            return cljs.core.async.impl.protocols.lock_id.call(null, self__.fn1);
          };
          cljs.core.async.t22454.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$3) {
            var self__ = this;
            var ___$4 = this;
            var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
            return function(f1, ___$4) {
              return function(p1__22444_SHARP_) {
                return f1.call(null, p1__22444_SHARP_ == null ? null : self__.f.call(null, p1__22444_SHARP_));
              };
            }(f1, ___$4);
          };
          cljs.core.async.t22454.prototype.cljs$core$IMeta$_meta$arity$1 = function(_22456) {
            var self__ = this;
            var _22456__$1 = this;
            return self__.meta22455;
          };
          cljs.core.async.t22454.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_22456, meta22455__$1) {
            var self__ = this;
            var _22456__$1 = this;
            return new cljs.core.async.t22454(self__.fn1, self__._, self__.meta22452, self__.ch, self__.f, self__.map_LT_, meta22455__$1);
          };
          cljs.core.async.__GT_t22454 = function __GT_t22454(fn1__$1, ___$2, meta22452__$1, ch__$2, f__$2, map_LT___$2, meta22455) {
            return new cljs.core.async.t22454(fn1__$1, ___$2, meta22452__$1, ch__$2, f__$2, map_LT___$2, meta22455);
          };
        }
        return new cljs.core.async.t22454(fn1, ___$1, self__.meta22452, self__.ch, self__.f, self__.map_LT_, null);
      }());
      if (cljs.core.truth_(function() {
        var and__15530__auto__ = ret;
        if (cljs.core.truth_(and__15530__auto__)) {
          return!(cljs.core.deref.call(null, ret) == null);
        } else {
          return and__15530__auto__;
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)));
      } else {
        return ret;
      }
    };
    cljs.core.async.t22451.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t22451.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t22451.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t22451.prototype.cljs$core$IMeta$_meta$arity$1 = function(_22453) {
      var self__ = this;
      var _22453__$1 = this;
      return self__.meta22452;
    };
    cljs.core.async.t22451.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_22453, meta22452__$1) {
      var self__ = this;
      var _22453__$1 = this;
      return new cljs.core.async.t22451(self__.ch, self__.f, self__.map_LT_, meta22452__$1);
    };
    cljs.core.async.__GT_t22451 = function __GT_t22451(ch__$1, f__$1, map_LT___$1, meta22452) {
      return new cljs.core.async.t22451(ch__$1, f__$1, map_LT___$1, meta22452);
    };
  }
  return new cljs.core.async.t22451(ch, f, map_LT_, null);
};
cljs.core.async.map_GT_ = function map_GT_(f, ch) {
  if (typeof cljs.core.async.t22460 !== "undefined") {
  } else {
    cljs.core.async.t22460 = function(ch, f, map_GT_, meta22461) {
      this.ch = ch;
      this.f = f;
      this.map_GT_ = map_GT_;
      this.meta22461 = meta22461;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t22460.cljs$lang$type = true;
    cljs.core.async.t22460.cljs$lang$ctorStr = "cljs.core.async/t22460";
    cljs.core.async.t22460.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
      return cljs.core._write.call(null, writer__16110__auto__, "cljs.core.async/t22460");
    };
    cljs.core.async.t22460.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t22460.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn1);
    };
    cljs.core.async.t22460.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t22460.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t22460.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t22460.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t22460.prototype.cljs$core$IMeta$_meta$arity$1 = function(_22462) {
      var self__ = this;
      var _22462__$1 = this;
      return self__.meta22461;
    };
    cljs.core.async.t22460.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_22462, meta22461__$1) {
      var self__ = this;
      var _22462__$1 = this;
      return new cljs.core.async.t22460(self__.ch, self__.f, self__.map_GT_, meta22461__$1);
    };
    cljs.core.async.__GT_t22460 = function __GT_t22460(ch__$1, f__$1, map_GT___$1, meta22461) {
      return new cljs.core.async.t22460(ch__$1, f__$1, map_GT___$1, meta22461);
    };
  }
  return new cljs.core.async.t22460(ch, f, map_GT_, null);
};
cljs.core.async.filter_GT_ = function filter_GT_(p, ch) {
  if (typeof cljs.core.async.t22466 !== "undefined") {
  } else {
    cljs.core.async.t22466 = function(ch, p, filter_GT_, meta22467) {
      this.ch = ch;
      this.p = p;
      this.filter_GT_ = filter_GT_;
      this.meta22467 = meta22467;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t22466.cljs$lang$type = true;
    cljs.core.async.t22466.cljs$lang$ctorStr = "cljs.core.async/t22466";
    cljs.core.async.t22466.cljs$lang$ctorPrWriter = function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
      return cljs.core._write.call(null, writer__16110__auto__, "cljs.core.async/t22466");
    };
    cljs.core.async.t22466.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t22466.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      if (cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
      } else {
        return cljs.core.async.impl.channels.box.call(null, cljs.core.not.call(null, cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch)));
      }
    };
    cljs.core.async.t22466.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t22466.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t22466.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t22466.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t22466.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t22466.prototype.cljs$core$IMeta$_meta$arity$1 = function(_22468) {
      var self__ = this;
      var _22468__$1 = this;
      return self__.meta22467;
    };
    cljs.core.async.t22466.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_22468, meta22467__$1) {
      var self__ = this;
      var _22468__$1 = this;
      return new cljs.core.async.t22466(self__.ch, self__.p, self__.filter_GT_, meta22467__$1);
    };
    cljs.core.async.__GT_t22466 = function __GT_t22466(ch__$1, p__$1, filter_GT___$1, meta22467) {
      return new cljs.core.async.t22466(ch__$1, p__$1, filter_GT___$1, meta22467);
    };
  }
  return new cljs.core.async.t22466(ch, p, filter_GT_, null);
};
cljs.core.async.remove_GT_ = function remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch);
};
cljs.core.async.filter_LT_ = function() {
  var filter_LT_ = null;
  var filter_LT___2 = function(p, ch) {
    return filter_LT_.call(null, p, ch, null);
  };
  var filter_LT___3 = function(p, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__18844__auto___22551 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__18845__auto__ = function() {
        var switch__18829__auto__ = function(state_22530) {
          var state_val_22531 = state_22530[1];
          if (state_val_22531 === 1) {
            var state_22530__$1 = state_22530;
            var statearr_22532_22552 = state_22530__$1;
            statearr_22532_22552[2] = null;
            statearr_22532_22552[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_22531 === 2) {
              var state_22530__$1 = state_22530;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_22530__$1, 4, ch);
            } else {
              if (state_val_22531 === 3) {
                var inst_22528 = state_22530[2];
                var state_22530__$1 = state_22530;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_22530__$1, inst_22528);
              } else {
                if (state_val_22531 === 4) {
                  var inst_22512 = state_22530[7];
                  var inst_22512__$1 = state_22530[2];
                  var inst_22513 = inst_22512__$1 == null;
                  var state_22530__$1 = function() {
                    var statearr_22533 = state_22530;
                    statearr_22533[7] = inst_22512__$1;
                    return statearr_22533;
                  }();
                  if (cljs.core.truth_(inst_22513)) {
                    var statearr_22534_22553 = state_22530__$1;
                    statearr_22534_22553[1] = 5;
                  } else {
                    var statearr_22535_22554 = state_22530__$1;
                    statearr_22535_22554[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_22531 === 5) {
                    var inst_22515 = cljs.core.async.close_BANG_.call(null, out);
                    var state_22530__$1 = state_22530;
                    var statearr_22536_22555 = state_22530__$1;
                    statearr_22536_22555[2] = inst_22515;
                    statearr_22536_22555[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_22531 === 6) {
                      var inst_22512 = state_22530[7];
                      var inst_22517 = p.call(null, inst_22512);
                      var state_22530__$1 = state_22530;
                      if (cljs.core.truth_(inst_22517)) {
                        var statearr_22537_22556 = state_22530__$1;
                        statearr_22537_22556[1] = 8;
                      } else {
                        var statearr_22538_22557 = state_22530__$1;
                        statearr_22538_22557[1] = 9;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_22531 === 7) {
                        var inst_22526 = state_22530[2];
                        var state_22530__$1 = state_22530;
                        var statearr_22539_22558 = state_22530__$1;
                        statearr_22539_22558[2] = inst_22526;
                        statearr_22539_22558[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_22531 === 8) {
                          var inst_22512 = state_22530[7];
                          var state_22530__$1 = state_22530;
                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_22530__$1, 11, out, inst_22512);
                        } else {
                          if (state_val_22531 === 9) {
                            var state_22530__$1 = state_22530;
                            var statearr_22540_22559 = state_22530__$1;
                            statearr_22540_22559[2] = null;
                            statearr_22540_22559[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_22531 === 10) {
                              var inst_22523 = state_22530[2];
                              var state_22530__$1 = function() {
                                var statearr_22541 = state_22530;
                                statearr_22541[8] = inst_22523;
                                return statearr_22541;
                              }();
                              var statearr_22542_22560 = state_22530__$1;
                              statearr_22542_22560[2] = null;
                              statearr_22542_22560[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_22531 === 11) {
                                var inst_22520 = state_22530[2];
                                var state_22530__$1 = state_22530;
                                var statearr_22543_22561 = state_22530__$1;
                                statearr_22543_22561[2] = inst_22520;
                                statearr_22543_22561[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__18829__auto__) {
          return function() {
            var state_machine__18830__auto__ = null;
            var state_machine__18830__auto____0 = function() {
              var statearr_22547 = [null, null, null, null, null, null, null, null, null];
              statearr_22547[0] = state_machine__18830__auto__;
              statearr_22547[1] = 1;
              return statearr_22547;
            };
            var state_machine__18830__auto____1 = function(state_22530) {
              while (true) {
                var ret_value__18831__auto__ = function() {
                  try {
                    while (true) {
                      var result__18832__auto__ = switch__18829__auto__.call(null, state_22530);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__18832__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__18832__auto__;
                      }
                      break;
                    }
                  } catch (e22548) {
                    if (e22548 instanceof Object) {
                      var ex__18833__auto__ = e22548;
                      var statearr_22549_22562 = state_22530;
                      statearr_22549_22562[5] = ex__18833__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_22530);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e22548;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__18831__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__22563 = state_22530;
                  state_22530 = G__22563;
                  continue;
                } else {
                  return ret_value__18831__auto__;
                }
                break;
              }
            };
            state_machine__18830__auto__ = function(state_22530) {
              switch(arguments.length) {
                case 0:
                  return state_machine__18830__auto____0.call(this);
                case 1:
                  return state_machine__18830__auto____1.call(this, state_22530);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__18830__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__18830__auto____0;
            state_machine__18830__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__18830__auto____1;
            return state_machine__18830__auto__;
          }();
        }(switch__18829__auto__);
      }();
      var state__18846__auto__ = function() {
        var statearr_22550 = f__18845__auto__.call(null);
        statearr_22550[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__18844__auto___22551;
        return statearr_22550;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__18846__auto__);
    });
    return out;
  };
  filter_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return filter_LT___2.call(this, p, ch);
      case 3:
        return filter_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter_LT_.cljs$core$IFn$_invoke$arity$2 = filter_LT___2;
  filter_LT_.cljs$core$IFn$_invoke$arity$3 = filter_LT___3;
  return filter_LT_;
}();
cljs.core.async.remove_LT_ = function() {
  var remove_LT_ = null;
  var remove_LT___2 = function(p, ch) {
    return remove_LT_.call(null, p, ch, null);
  };
  var remove_LT___3 = function(p, ch, buf_or_n) {
    return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n);
  };
  remove_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return remove_LT___2.call(this, p, ch);
      case 3:
        return remove_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_LT_.cljs$core$IFn$_invoke$arity$2 = remove_LT___2;
  remove_LT_.cljs$core$IFn$_invoke$arity$3 = remove_LT___3;
  return remove_LT_;
}();
cljs.core.async.mapcat_STAR_ = function mapcat_STAR_(f, in$, out) {
  var c__18844__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__18845__auto__ = function() {
      var switch__18829__auto__ = function(state_22729) {
        var state_val_22730 = state_22729[1];
        if (state_val_22730 === 1) {
          var state_22729__$1 = state_22729;
          var statearr_22731_22772 = state_22729__$1;
          statearr_22731_22772[2] = null;
          statearr_22731_22772[1] = 2;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_22730 === 2) {
            var state_22729__$1 = state_22729;
            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_22729__$1, 4, in$);
          } else {
            if (state_val_22730 === 3) {
              var inst_22727 = state_22729[2];
              var state_22729__$1 = state_22729;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_22729__$1, inst_22727);
            } else {
              if (state_val_22730 === 4) {
                var inst_22670 = state_22729[7];
                var inst_22670__$1 = state_22729[2];
                var inst_22671 = inst_22670__$1 == null;
                var state_22729__$1 = function() {
                  var statearr_22732 = state_22729;
                  statearr_22732[7] = inst_22670__$1;
                  return statearr_22732;
                }();
                if (cljs.core.truth_(inst_22671)) {
                  var statearr_22733_22773 = state_22729__$1;
                  statearr_22733_22773[1] = 5;
                } else {
                  var statearr_22734_22774 = state_22729__$1;
                  statearr_22734_22774[1] = 6;
                }
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_22730 === 5) {
                  var inst_22673 = cljs.core.async.close_BANG_.call(null, out);
                  var state_22729__$1 = state_22729;
                  var statearr_22735_22775 = state_22729__$1;
                  statearr_22735_22775[2] = inst_22673;
                  statearr_22735_22775[1] = 7;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_22730 === 6) {
                    var inst_22670 = state_22729[7];
                    var inst_22679 = f.call(null, inst_22670);
                    var inst_22680 = cljs.core.seq.call(null, inst_22679);
                    var inst_22681 = inst_22680;
                    var inst_22682 = null;
                    var inst_22683 = 0;
                    var inst_22684 = 0;
                    var state_22729__$1 = function() {
                      var statearr_22736 = state_22729;
                      statearr_22736[8] = inst_22681;
                      statearr_22736[9] = inst_22682;
                      statearr_22736[10] = inst_22684;
                      statearr_22736[11] = inst_22683;
                      return statearr_22736;
                    }();
                    var statearr_22737_22776 = state_22729__$1;
                    statearr_22737_22776[2] = null;
                    statearr_22737_22776[1] = 8;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_22730 === 7) {
                      var inst_22725 = state_22729[2];
                      var state_22729__$1 = state_22729;
                      var statearr_22738_22777 = state_22729__$1;
                      statearr_22738_22777[2] = inst_22725;
                      statearr_22738_22777[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_22730 === 8) {
                        var inst_22684 = state_22729[10];
                        var inst_22683 = state_22729[11];
                        var inst_22686 = inst_22684 < inst_22683;
                        var inst_22687 = inst_22686;
                        var state_22729__$1 = state_22729;
                        if (cljs.core.truth_(inst_22687)) {
                          var statearr_22739_22778 = state_22729__$1;
                          statearr_22739_22778[1] = 10;
                        } else {
                          var statearr_22740_22779 = state_22729__$1;
                          statearr_22740_22779[1] = 11;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_22730 === 9) {
                          var inst_22717 = state_22729[2];
                          var inst_22718 = cljs.core.async.impl.protocols.closed_QMARK_.call(null, out);
                          var state_22729__$1 = function() {
                            var statearr_22741 = state_22729;
                            statearr_22741[12] = inst_22717;
                            return statearr_22741;
                          }();
                          if (cljs.core.truth_(inst_22718)) {
                            var statearr_22742_22780 = state_22729__$1;
                            statearr_22742_22780[1] = 21;
                          } else {
                            var statearr_22743_22781 = state_22729__$1;
                            statearr_22743_22781[1] = 22;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_22730 === 10) {
                            var inst_22682 = state_22729[9];
                            var inst_22684 = state_22729[10];
                            var inst_22689 = cljs.core._nth.call(null, inst_22682, inst_22684);
                            var state_22729__$1 = state_22729;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_22729__$1, 13, out, inst_22689);
                          } else {
                            if (state_val_22730 === 11) {
                              var inst_22681 = state_22729[8];
                              var inst_22695 = state_22729[13];
                              var inst_22695__$1 = cljs.core.seq.call(null, inst_22681);
                              var state_22729__$1 = function() {
                                var statearr_22747 = state_22729;
                                statearr_22747[13] = inst_22695__$1;
                                return statearr_22747;
                              }();
                              if (inst_22695__$1) {
                                var statearr_22748_22782 = state_22729__$1;
                                statearr_22748_22782[1] = 14;
                              } else {
                                var statearr_22749_22783 = state_22729__$1;
                                statearr_22749_22783[1] = 15;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_22730 === 12) {
                                var inst_22715 = state_22729[2];
                                var state_22729__$1 = state_22729;
                                var statearr_22750_22784 = state_22729__$1;
                                statearr_22750_22784[2] = inst_22715;
                                statearr_22750_22784[1] = 9;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_22730 === 13) {
                                  var inst_22681 = state_22729[8];
                                  var inst_22682 = state_22729[9];
                                  var inst_22684 = state_22729[10];
                                  var inst_22683 = state_22729[11];
                                  var inst_22691 = state_22729[2];
                                  var inst_22692 = inst_22684 + 1;
                                  var tmp22744 = inst_22681;
                                  var tmp22745 = inst_22682;
                                  var tmp22746 = inst_22683;
                                  var inst_22681__$1 = tmp22744;
                                  var inst_22682__$1 = tmp22745;
                                  var inst_22683__$1 = tmp22746;
                                  var inst_22684__$1 = inst_22692;
                                  var state_22729__$1 = function() {
                                    var statearr_22751 = state_22729;
                                    statearr_22751[8] = inst_22681__$1;
                                    statearr_22751[9] = inst_22682__$1;
                                    statearr_22751[14] = inst_22691;
                                    statearr_22751[10] = inst_22684__$1;
                                    statearr_22751[11] = inst_22683__$1;
                                    return statearr_22751;
                                  }();
                                  var statearr_22752_22785 = state_22729__$1;
                                  statearr_22752_22785[2] = null;
                                  statearr_22752_22785[1] = 8;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_22730 === 14) {
                                    var inst_22695 = state_22729[13];
                                    var inst_22697 = cljs.core.chunked_seq_QMARK_.call(null, inst_22695);
                                    var state_22729__$1 = state_22729;
                                    if (inst_22697) {
                                      var statearr_22753_22786 = state_22729__$1;
                                      statearr_22753_22786[1] = 17;
                                    } else {
                                      var statearr_22754_22787 = state_22729__$1;
                                      statearr_22754_22787[1] = 18;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_22730 === 15) {
                                      var state_22729__$1 = state_22729;
                                      var statearr_22755_22788 = state_22729__$1;
                                      statearr_22755_22788[2] = null;
                                      statearr_22755_22788[1] = 16;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_22730 === 16) {
                                        var inst_22713 = state_22729[2];
                                        var state_22729__$1 = state_22729;
                                        var statearr_22756_22789 = state_22729__$1;
                                        statearr_22756_22789[2] = inst_22713;
                                        statearr_22756_22789[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_22730 === 17) {
                                          var inst_22695 = state_22729[13];
                                          var inst_22699 = cljs.core.chunk_first.call(null, inst_22695);
                                          var inst_22700 = cljs.core.chunk_rest.call(null, inst_22695);
                                          var inst_22701 = cljs.core.count.call(null, inst_22699);
                                          var inst_22681 = inst_22700;
                                          var inst_22682 = inst_22699;
                                          var inst_22683 = inst_22701;
                                          var inst_22684 = 0;
                                          var state_22729__$1 = function() {
                                            var statearr_22757 = state_22729;
                                            statearr_22757[8] = inst_22681;
                                            statearr_22757[9] = inst_22682;
                                            statearr_22757[10] = inst_22684;
                                            statearr_22757[11] = inst_22683;
                                            return statearr_22757;
                                          }();
                                          var statearr_22758_22790 = state_22729__$1;
                                          statearr_22758_22790[2] = null;
                                          statearr_22758_22790[1] = 8;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_22730 === 18) {
                                            var inst_22695 = state_22729[13];
                                            var inst_22704 = cljs.core.first.call(null, inst_22695);
                                            var state_22729__$1 = state_22729;
                                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_22729__$1, 20, out, inst_22704);
                                          } else {
                                            if (state_val_22730 === 19) {
                                              var inst_22710 = state_22729[2];
                                              var state_22729__$1 = state_22729;
                                              var statearr_22759_22791 = state_22729__$1;
                                              statearr_22759_22791[2] = inst_22710;
                                              statearr_22759_22791[1] = 16;
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_22730 === 20) {
                                                var inst_22695 = state_22729[13];
                                                var inst_22706 = state_22729[2];
                                                var inst_22707 = cljs.core.next.call(null, inst_22695);
                                                var inst_22681 = inst_22707;
                                                var inst_22682 = null;
                                                var inst_22683 = 0;
                                                var inst_22684 = 0;
                                                var state_22729__$1 = function() {
                                                  var statearr_22760 = state_22729;
                                                  statearr_22760[8] = inst_22681;
                                                  statearr_22760[9] = inst_22682;
                                                  statearr_22760[10] = inst_22684;
                                                  statearr_22760[15] = inst_22706;
                                                  statearr_22760[11] = inst_22683;
                                                  return statearr_22760;
                                                }();
                                                var statearr_22761_22792 = state_22729__$1;
                                                statearr_22761_22792[2] = null;
                                                statearr_22761_22792[1] = 8;
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } else {
                                                if (state_val_22730 === 21) {
                                                  var state_22729__$1 = state_22729;
                                                  var statearr_22762_22793 = state_22729__$1;
                                                  statearr_22762_22793[2] = null;
                                                  statearr_22762_22793[1] = 23;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                } else {
                                                  if (state_val_22730 === 22) {
                                                    var state_22729__$1 = state_22729;
                                                    var statearr_22763_22794 = state_22729__$1;
                                                    statearr_22763_22794[2] = null;
                                                    statearr_22763_22794[1] = 2;
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                  } else {
                                                    if (state_val_22730 === 23) {
                                                      var inst_22723 = state_22729[2];
                                                      var state_22729__$1 = state_22729;
                                                      var statearr_22764_22795 = state_22729__$1;
                                                      statearr_22764_22795[2] = inst_22723;
                                                      statearr_22764_22795[1] = 7;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                    } else {
                                                      return null;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__18829__auto__) {
        return function() {
          var state_machine__18830__auto__ = null;
          var state_machine__18830__auto____0 = function() {
            var statearr_22768 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
            statearr_22768[0] = state_machine__18830__auto__;
            statearr_22768[1] = 1;
            return statearr_22768;
          };
          var state_machine__18830__auto____1 = function(state_22729) {
            while (true) {
              var ret_value__18831__auto__ = function() {
                try {
                  while (true) {
                    var result__18832__auto__ = switch__18829__auto__.call(null, state_22729);
                    if (cljs.core.keyword_identical_QMARK_.call(null, result__18832__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                      continue;
                    } else {
                      return result__18832__auto__;
                    }
                    break;
                  }
                } catch (e22769) {
                  if (e22769 instanceof Object) {
                    var ex__18833__auto__ = e22769;
                    var statearr_22770_22796 = state_22729;
                    statearr_22770_22796[5] = ex__18833__auto__;
                    cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_22729);
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                      throw e22769;
                    } else {
                      return null;
                    }
                  }
                }
              }();
              if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__18831__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                var G__22797 = state_22729;
                state_22729 = G__22797;
                continue;
              } else {
                return ret_value__18831__auto__;
              }
              break;
            }
          };
          state_machine__18830__auto__ = function(state_22729) {
            switch(arguments.length) {
              case 0:
                return state_machine__18830__auto____0.call(this);
              case 1:
                return state_machine__18830__auto____1.call(this, state_22729);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__18830__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__18830__auto____0;
          state_machine__18830__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__18830__auto____1;
          return state_machine__18830__auto__;
        }();
      }(switch__18829__auto__);
    }();
    var state__18846__auto__ = function() {
      var statearr_22771 = f__18845__auto__.call(null);
      statearr_22771[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__18844__auto__;
      return statearr_22771;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__18846__auto__);
  });
  return c__18844__auto__;
};
cljs.core.async.mapcat_LT_ = function() {
  var mapcat_LT_ = null;
  var mapcat_LT___2 = function(f, in$) {
    return mapcat_LT_.call(null, f, in$, null);
  };
  var mapcat_LT___3 = function(f, in$, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return out;
  };
  mapcat_LT_ = function(f, in$, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_LT___2.call(this, f, in$);
      case 3:
        return mapcat_LT___3.call(this, f, in$, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = mapcat_LT___2;
  mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = mapcat_LT___3;
  return mapcat_LT_;
}();
cljs.core.async.mapcat_GT_ = function() {
  var mapcat_GT_ = null;
  var mapcat_GT___2 = function(f, out) {
    return mapcat_GT_.call(null, f, out, null);
  };
  var mapcat_GT___3 = function(f, out, buf_or_n) {
    var in$ = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return in$;
  };
  mapcat_GT_ = function(f, out, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_GT___2.call(this, f, out);
      case 3:
        return mapcat_GT___3.call(this, f, out, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = mapcat_GT___2;
  mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = mapcat_GT___3;
  return mapcat_GT_;
}();
cljs.core.async.pipe = function() {
  var pipe = null;
  var pipe__2 = function(from, to) {
    return pipe.call(null, from, to, true);
  };
  var pipe__3 = function(from, to, close_QMARK_) {
    var c__18844__auto___22892 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__18845__auto__ = function() {
        var switch__18829__auto__ = function(state_22868) {
          var state_val_22869 = state_22868[1];
          if (state_val_22869 === 1) {
            var state_22868__$1 = state_22868;
            var statearr_22870_22893 = state_22868__$1;
            statearr_22870_22893[2] = null;
            statearr_22870_22893[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_22869 === 2) {
              var state_22868__$1 = state_22868;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_22868__$1, 4, from);
            } else {
              if (state_val_22869 === 3) {
                var inst_22866 = state_22868[2];
                var state_22868__$1 = state_22868;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_22868__$1, inst_22866);
              } else {
                if (state_val_22869 === 4) {
                  var inst_22847 = state_22868[7];
                  var inst_22847__$1 = state_22868[2];
                  var inst_22848 = inst_22847__$1 == null;
                  var state_22868__$1 = function() {
                    var statearr_22871 = state_22868;
                    statearr_22871[7] = inst_22847__$1;
                    return statearr_22871;
                  }();
                  if (cljs.core.truth_(inst_22848)) {
                    var statearr_22872_22894 = state_22868__$1;
                    statearr_22872_22894[1] = 5;
                  } else {
                    var statearr_22873_22895 = state_22868__$1;
                    statearr_22873_22895[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_22869 === 5) {
                    var state_22868__$1 = state_22868;
                    if (cljs.core.truth_(close_QMARK_)) {
                      var statearr_22874_22896 = state_22868__$1;
                      statearr_22874_22896[1] = 8;
                    } else {
                      var statearr_22875_22897 = state_22868__$1;
                      statearr_22875_22897[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_22869 === 6) {
                      var inst_22847 = state_22868[7];
                      var state_22868__$1 = state_22868;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_22868__$1, 11, to, inst_22847);
                    } else {
                      if (state_val_22869 === 7) {
                        var inst_22864 = state_22868[2];
                        var state_22868__$1 = state_22868;
                        var statearr_22876_22898 = state_22868__$1;
                        statearr_22876_22898[2] = inst_22864;
                        statearr_22876_22898[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_22869 === 8) {
                          var inst_22851 = cljs.core.async.close_BANG_.call(null, to);
                          var state_22868__$1 = state_22868;
                          var statearr_22877_22899 = state_22868__$1;
                          statearr_22877_22899[2] = inst_22851;
                          statearr_22877_22899[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_22869 === 9) {
                            var state_22868__$1 = state_22868;
                            var statearr_22878_22900 = state_22868__$1;
                            statearr_22878_22900[2] = null;
                            statearr_22878_22900[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_22869 === 10) {
                              var inst_22854 = state_22868[2];
                              var state_22868__$1 = state_22868;
                              var statearr_22879_22901 = state_22868__$1;
                              statearr_22879_22901[2] = inst_22854;
                              statearr_22879_22901[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_22869 === 11) {
                                var inst_22857 = state_22868[2];
                                var state_22868__$1 = state_22868;
                                if (cljs.core.truth_(inst_22857)) {
                                  var statearr_22880_22902 = state_22868__$1;
                                  statearr_22880_22902[1] = 12;
                                } else {
                                  var statearr_22881_22903 = state_22868__$1;
                                  statearr_22881_22903[1] = 13;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_22869 === 12) {
                                  var state_22868__$1 = state_22868;
                                  var statearr_22882_22904 = state_22868__$1;
                                  statearr_22882_22904[2] = null;
                                  statearr_22882_22904[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_22869 === 13) {
                                    var state_22868__$1 = state_22868;
                                    var statearr_22883_22905 = state_22868__$1;
                                    statearr_22883_22905[2] = null;
                                    statearr_22883_22905[1] = 14;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_22869 === 14) {
                                      var inst_22862 = state_22868[2];
                                      var state_22868__$1 = state_22868;
                                      var statearr_22884_22906 = state_22868__$1;
                                      statearr_22884_22906[2] = inst_22862;
                                      statearr_22884_22906[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      return null;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__18829__auto__) {
          return function() {
            var state_machine__18830__auto__ = null;
            var state_machine__18830__auto____0 = function() {
              var statearr_22888 = [null, null, null, null, null, null, null, null];
              statearr_22888[0] = state_machine__18830__auto__;
              statearr_22888[1] = 1;
              return statearr_22888;
            };
            var state_machine__18830__auto____1 = function(state_22868) {
              while (true) {
                var ret_value__18831__auto__ = function() {
                  try {
                    while (true) {
                      var result__18832__auto__ = switch__18829__auto__.call(null, state_22868);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__18832__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__18832__auto__;
                      }
                      break;
                    }
                  } catch (e22889) {
                    if (e22889 instanceof Object) {
                      var ex__18833__auto__ = e22889;
                      var statearr_22890_22907 = state_22868;
                      statearr_22890_22907[5] = ex__18833__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_22868);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e22889;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__18831__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__22908 = state_22868;
                  state_22868 = G__22908;
                  continue;
                } else {
                  return ret_value__18831__auto__;
                }
                break;
              }
            };
            state_machine__18830__auto__ = function(state_22868) {
              switch(arguments.length) {
                case 0:
                  return state_machine__18830__auto____0.call(this);
                case 1:
                  return state_machine__18830__auto____1.call(this, state_22868);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__18830__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__18830__auto____0;
            state_machine__18830__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__18830__auto____1;
            return state_machine__18830__auto__;
          }();
        }(switch__18829__auto__);
      }();
      var state__18846__auto__ = function() {
        var statearr_22891 = f__18845__auto__.call(null);
        statearr_22891[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__18844__auto___22892;
        return statearr_22891;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__18846__auto__);
    });
    return to;
  };
  pipe = function(from, to, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return pipe__2.call(this, from, to);
      case 3:
        return pipe__3.call(this, from, to, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipe.cljs$core$IFn$_invoke$arity$2 = pipe__2;
  pipe.cljs$core$IFn$_invoke$arity$3 = pipe__3;
  return pipe;
}();
cljs.core.async.split = function() {
  var split = null;
  var split__2 = function(p, ch) {
    return split.call(null, p, ch, null, null);
  };
  var split__4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
    var tc = cljs.core.async.chan.call(null, t_buf_or_n);
    var fc = cljs.core.async.chan.call(null, f_buf_or_n);
    var c__18844__auto___23009 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__18845__auto__ = function() {
        var switch__18829__auto__ = function(state_22984) {
          var state_val_22985 = state_22984[1];
          if (state_val_22985 === 1) {
            var state_22984__$1 = state_22984;
            var statearr_22986_23010 = state_22984__$1;
            statearr_22986_23010[2] = null;
            statearr_22986_23010[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_22985 === 2) {
              var state_22984__$1 = state_22984;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_22984__$1, 4, ch);
            } else {
              if (state_val_22985 === 3) {
                var inst_22982 = state_22984[2];
                var state_22984__$1 = state_22984;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_22984__$1, inst_22982);
              } else {
                if (state_val_22985 === 4) {
                  var inst_22961 = state_22984[7];
                  var inst_22961__$1 = state_22984[2];
                  var inst_22962 = inst_22961__$1 == null;
                  var state_22984__$1 = function() {
                    var statearr_22987 = state_22984;
                    statearr_22987[7] = inst_22961__$1;
                    return statearr_22987;
                  }();
                  if (cljs.core.truth_(inst_22962)) {
                    var statearr_22988_23011 = state_22984__$1;
                    statearr_22988_23011[1] = 5;
                  } else {
                    var statearr_22989_23012 = state_22984__$1;
                    statearr_22989_23012[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_22985 === 5) {
                    var inst_22964 = cljs.core.async.close_BANG_.call(null, tc);
                    var inst_22965 = cljs.core.async.close_BANG_.call(null, fc);
                    var state_22984__$1 = function() {
                      var statearr_22990 = state_22984;
                      statearr_22990[8] = inst_22964;
                      return statearr_22990;
                    }();
                    var statearr_22991_23013 = state_22984__$1;
                    statearr_22991_23013[2] = inst_22965;
                    statearr_22991_23013[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_22985 === 6) {
                      var inst_22961 = state_22984[7];
                      var inst_22967 = p.call(null, inst_22961);
                      var state_22984__$1 = state_22984;
                      if (cljs.core.truth_(inst_22967)) {
                        var statearr_22992_23014 = state_22984__$1;
                        statearr_22992_23014[1] = 9;
                      } else {
                        var statearr_22993_23015 = state_22984__$1;
                        statearr_22993_23015[1] = 10;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_22985 === 7) {
                        var inst_22980 = state_22984[2];
                        var state_22984__$1 = state_22984;
                        var statearr_22994_23016 = state_22984__$1;
                        statearr_22994_23016[2] = inst_22980;
                        statearr_22994_23016[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_22985 === 8) {
                          var inst_22973 = state_22984[2];
                          var state_22984__$1 = state_22984;
                          if (cljs.core.truth_(inst_22973)) {
                            var statearr_22995_23017 = state_22984__$1;
                            statearr_22995_23017[1] = 12;
                          } else {
                            var statearr_22996_23018 = state_22984__$1;
                            statearr_22996_23018[1] = 13;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_22985 === 9) {
                            var state_22984__$1 = state_22984;
                            var statearr_22997_23019 = state_22984__$1;
                            statearr_22997_23019[2] = tc;
                            statearr_22997_23019[1] = 11;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_22985 === 10) {
                              var state_22984__$1 = state_22984;
                              var statearr_22998_23020 = state_22984__$1;
                              statearr_22998_23020[2] = fc;
                              statearr_22998_23020[1] = 11;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_22985 === 11) {
                                var inst_22961 = state_22984[7];
                                var inst_22971 = state_22984[2];
                                var state_22984__$1 = state_22984;
                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_22984__$1, 8, inst_22971, inst_22961);
                              } else {
                                if (state_val_22985 === 12) {
                                  var state_22984__$1 = state_22984;
                                  var statearr_22999_23021 = state_22984__$1;
                                  statearr_22999_23021[2] = null;
                                  statearr_22999_23021[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_22985 === 13) {
                                    var state_22984__$1 = state_22984;
                                    var statearr_23000_23022 = state_22984__$1;
                                    statearr_23000_23022[2] = null;
                                    statearr_23000_23022[1] = 14;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_22985 === 14) {
                                      var inst_22978 = state_22984[2];
                                      var state_22984__$1 = state_22984;
                                      var statearr_23001_23023 = state_22984__$1;
                                      statearr_23001_23023[2] = inst_22978;
                                      statearr_23001_23023[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      return null;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__18829__auto__) {
          return function() {
            var state_machine__18830__auto__ = null;
            var state_machine__18830__auto____0 = function() {
              var statearr_23005 = [null, null, null, null, null, null, null, null, null];
              statearr_23005[0] = state_machine__18830__auto__;
              statearr_23005[1] = 1;
              return statearr_23005;
            };
            var state_machine__18830__auto____1 = function(state_22984) {
              while (true) {
                var ret_value__18831__auto__ = function() {
                  try {
                    while (true) {
                      var result__18832__auto__ = switch__18829__auto__.call(null, state_22984);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__18832__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__18832__auto__;
                      }
                      break;
                    }
                  } catch (e23006) {
                    if (e23006 instanceof Object) {
                      var ex__18833__auto__ = e23006;
                      var statearr_23007_23024 = state_22984;
                      statearr_23007_23024[5] = ex__18833__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_22984);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e23006;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__18831__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__23025 = state_22984;
                  state_22984 = G__23025;
                  continue;
                } else {
                  return ret_value__18831__auto__;
                }
                break;
              }
            };
            state_machine__18830__auto__ = function(state_22984) {
              switch(arguments.length) {
                case 0:
                  return state_machine__18830__auto____0.call(this);
                case 1:
                  return state_machine__18830__auto____1.call(this, state_22984);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__18830__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__18830__auto____0;
            state_machine__18830__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__18830__auto____1;
            return state_machine__18830__auto__;
          }();
        }(switch__18829__auto__);
      }();
      var state__18846__auto__ = function() {
        var statearr_23008 = f__18845__auto__.call(null);
        statearr_23008[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__18844__auto___23009;
        return statearr_23008;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__18846__auto__);
    });
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc, fc], null);
  };
  split = function(p, ch, t_buf_or_n, f_buf_or_n) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, p, ch);
      case 4:
        return split__4.call(this, p, ch, t_buf_or_n, f_buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$4 = split__4;
  return split;
}();
cljs.core.async.reduce = function reduce(f, init, ch) {
  var c__18844__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__18845__auto__ = function() {
      var switch__18829__auto__ = function(state_23072) {
        var state_val_23073 = state_23072[1];
        if (state_val_23073 === 7) {
          var inst_23068 = state_23072[2];
          var state_23072__$1 = state_23072;
          var statearr_23074_23090 = state_23072__$1;
          statearr_23074_23090[2] = inst_23068;
          statearr_23074_23090[1] = 3;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_23073 === 6) {
            var inst_23061 = state_23072[7];
            var inst_23058 = state_23072[8];
            var inst_23065 = f.call(null, inst_23058, inst_23061);
            var inst_23058__$1 = inst_23065;
            var state_23072__$1 = function() {
              var statearr_23075 = state_23072;
              statearr_23075[8] = inst_23058__$1;
              return statearr_23075;
            }();
            var statearr_23076_23091 = state_23072__$1;
            statearr_23076_23091[2] = null;
            statearr_23076_23091[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_23073 === 5) {
              var inst_23058 = state_23072[8];
              var state_23072__$1 = state_23072;
              var statearr_23077_23092 = state_23072__$1;
              statearr_23077_23092[2] = inst_23058;
              statearr_23077_23092[1] = 7;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_23073 === 4) {
                var inst_23061 = state_23072[7];
                var inst_23061__$1 = state_23072[2];
                var inst_23062 = inst_23061__$1 == null;
                var state_23072__$1 = function() {
                  var statearr_23078 = state_23072;
                  statearr_23078[7] = inst_23061__$1;
                  return statearr_23078;
                }();
                if (cljs.core.truth_(inst_23062)) {
                  var statearr_23079_23093 = state_23072__$1;
                  statearr_23079_23093[1] = 5;
                } else {
                  var statearr_23080_23094 = state_23072__$1;
                  statearr_23080_23094[1] = 6;
                }
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_23073 === 3) {
                  var inst_23070 = state_23072[2];
                  var state_23072__$1 = state_23072;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_23072__$1, inst_23070);
                } else {
                  if (state_val_23073 === 2) {
                    var state_23072__$1 = state_23072;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_23072__$1, 4, ch);
                  } else {
                    if (state_val_23073 === 1) {
                      var inst_23058 = init;
                      var state_23072__$1 = function() {
                        var statearr_23081 = state_23072;
                        statearr_23081[8] = inst_23058;
                        return statearr_23081;
                      }();
                      var statearr_23082_23095 = state_23072__$1;
                      statearr_23082_23095[2] = null;
                      statearr_23082_23095[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__18829__auto__) {
        return function() {
          var state_machine__18830__auto__ = null;
          var state_machine__18830__auto____0 = function() {
            var statearr_23086 = [null, null, null, null, null, null, null, null, null];
            statearr_23086[0] = state_machine__18830__auto__;
            statearr_23086[1] = 1;
            return statearr_23086;
          };
          var state_machine__18830__auto____1 = function(state_23072) {
            while (true) {
              var ret_value__18831__auto__ = function() {
                try {
                  while (true) {
                    var result__18832__auto__ = switch__18829__auto__.call(null, state_23072);
                    if (cljs.core.keyword_identical_QMARK_.call(null, result__18832__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                      continue;
                    } else {
                      return result__18832__auto__;
                    }
                    break;
                  }
                } catch (e23087) {
                  if (e23087 instanceof Object) {
                    var ex__18833__auto__ = e23087;
                    var statearr_23088_23096 = state_23072;
                    statearr_23088_23096[5] = ex__18833__auto__;
                    cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_23072);
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                      throw e23087;
                    } else {
                      return null;
                    }
                  }
                }
              }();
              if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__18831__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                var G__23097 = state_23072;
                state_23072 = G__23097;
                continue;
              } else {
                return ret_value__18831__auto__;
              }
              break;
            }
          };
          state_machine__18830__auto__ = function(state_23072) {
            switch(arguments.length) {
              case 0:
                return state_machine__18830__auto____0.call(this);
              case 1:
                return state_machine__18830__auto____1.call(this, state_23072);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__18830__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__18830__auto____0;
          state_machine__18830__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__18830__auto____1;
          return state_machine__18830__auto__;
        }();
      }(switch__18829__auto__);
    }();
    var state__18846__auto__ = function() {
      var statearr_23089 = f__18845__auto__.call(null);
      statearr_23089[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__18844__auto__;
      return statearr_23089;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__18846__auto__);
  });
  return c__18844__auto__;
};
cljs.core.async.onto_chan = function() {
  var onto_chan = null;
  var onto_chan__2 = function(ch, coll) {
    return onto_chan.call(null, ch, coll, true);
  };
  var onto_chan__3 = function(ch, coll, close_QMARK_) {
    var c__18844__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__18845__auto__ = function() {
        var switch__18829__auto__ = function(state_23171) {
          var state_val_23172 = state_23171[1];
          if (state_val_23172 === 1) {
            var inst_23147 = cljs.core.seq.call(null, coll);
            var inst_23148 = inst_23147;
            var state_23171__$1 = function() {
              var statearr_23173 = state_23171;
              statearr_23173[7] = inst_23148;
              return statearr_23173;
            }();
            var statearr_23174_23196 = state_23171__$1;
            statearr_23174_23196[2] = null;
            statearr_23174_23196[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_23172 === 2) {
              var inst_23148 = state_23171[7];
              var state_23171__$1 = state_23171;
              if (cljs.core.truth_(inst_23148)) {
                var statearr_23175_23197 = state_23171__$1;
                statearr_23175_23197[1] = 4;
              } else {
                var statearr_23176_23198 = state_23171__$1;
                statearr_23176_23198[1] = 5;
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_23172 === 3) {
                var inst_23169 = state_23171[2];
                var state_23171__$1 = state_23171;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_23171__$1, inst_23169);
              } else {
                if (state_val_23172 === 4) {
                  var inst_23148 = state_23171[7];
                  var inst_23151 = cljs.core.first.call(null, inst_23148);
                  var state_23171__$1 = state_23171;
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_23171__$1, 7, ch, inst_23151);
                } else {
                  if (state_val_23172 === 5) {
                    var inst_23148 = state_23171[7];
                    var state_23171__$1 = state_23171;
                    var statearr_23177_23199 = state_23171__$1;
                    statearr_23177_23199[2] = inst_23148;
                    statearr_23177_23199[1] = 6;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_23172 === 6) {
                      var inst_23156 = state_23171[2];
                      var state_23171__$1 = state_23171;
                      if (cljs.core.truth_(inst_23156)) {
                        var statearr_23178_23200 = state_23171__$1;
                        statearr_23178_23200[1] = 8;
                      } else {
                        var statearr_23179_23201 = state_23171__$1;
                        statearr_23179_23201[1] = 9;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_23172 === 7) {
                        var inst_23153 = state_23171[2];
                        var state_23171__$1 = state_23171;
                        var statearr_23180_23202 = state_23171__$1;
                        statearr_23180_23202[2] = inst_23153;
                        statearr_23180_23202[1] = 6;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_23172 === 8) {
                          var inst_23148 = state_23171[7];
                          var inst_23158 = cljs.core.next.call(null, inst_23148);
                          var inst_23148__$1 = inst_23158;
                          var state_23171__$1 = function() {
                            var statearr_23181 = state_23171;
                            statearr_23181[7] = inst_23148__$1;
                            return statearr_23181;
                          }();
                          var statearr_23182_23203 = state_23171__$1;
                          statearr_23182_23203[2] = null;
                          statearr_23182_23203[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_23172 === 9) {
                            var state_23171__$1 = state_23171;
                            if (cljs.core.truth_(close_QMARK_)) {
                              var statearr_23183_23204 = state_23171__$1;
                              statearr_23183_23204[1] = 11;
                            } else {
                              var statearr_23184_23205 = state_23171__$1;
                              statearr_23184_23205[1] = 12;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_23172 === 10) {
                              var inst_23167 = state_23171[2];
                              var state_23171__$1 = state_23171;
                              var statearr_23185_23206 = state_23171__$1;
                              statearr_23185_23206[2] = inst_23167;
                              statearr_23185_23206[1] = 3;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_23172 === 11) {
                                var inst_23162 = cljs.core.async.close_BANG_.call(null, ch);
                                var state_23171__$1 = state_23171;
                                var statearr_23186_23207 = state_23171__$1;
                                statearr_23186_23207[2] = inst_23162;
                                statearr_23186_23207[1] = 13;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_23172 === 12) {
                                  var state_23171__$1 = state_23171;
                                  var statearr_23187_23208 = state_23171__$1;
                                  statearr_23187_23208[2] = null;
                                  statearr_23187_23208[1] = 13;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_23172 === 13) {
                                    var inst_23165 = state_23171[2];
                                    var state_23171__$1 = state_23171;
                                    var statearr_23188_23209 = state_23171__$1;
                                    statearr_23188_23209[2] = inst_23165;
                                    statearr_23188_23209[1] = 10;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__18829__auto__) {
          return function() {
            var state_machine__18830__auto__ = null;
            var state_machine__18830__auto____0 = function() {
              var statearr_23192 = [null, null, null, null, null, null, null, null];
              statearr_23192[0] = state_machine__18830__auto__;
              statearr_23192[1] = 1;
              return statearr_23192;
            };
            var state_machine__18830__auto____1 = function(state_23171) {
              while (true) {
                var ret_value__18831__auto__ = function() {
                  try {
                    while (true) {
                      var result__18832__auto__ = switch__18829__auto__.call(null, state_23171);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__18832__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__18832__auto__;
                      }
                      break;
                    }
                  } catch (e23193) {
                    if (e23193 instanceof Object) {
                      var ex__18833__auto__ = e23193;
                      var statearr_23194_23210 = state_23171;
                      statearr_23194_23210[5] = ex__18833__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_23171);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e23193;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__18831__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__23211 = state_23171;
                  state_23171 = G__23211;
                  continue;
                } else {
                  return ret_value__18831__auto__;
                }
                break;
              }
            };
            state_machine__18830__auto__ = function(state_23171) {
              switch(arguments.length) {
                case 0:
                  return state_machine__18830__auto____0.call(this);
                case 1:
                  return state_machine__18830__auto____1.call(this, state_23171);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__18830__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__18830__auto____0;
            state_machine__18830__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__18830__auto____1;
            return state_machine__18830__auto__;
          }();
        }(switch__18829__auto__);
      }();
      var state__18846__auto__ = function() {
        var statearr_23195 = f__18845__auto__.call(null);
        statearr_23195[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__18844__auto__;
        return statearr_23195;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__18846__auto__);
    });
    return c__18844__auto__;
  };
  onto_chan = function(ch, coll, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return onto_chan__2.call(this, ch, coll);
      case 3:
        return onto_chan__3.call(this, ch, coll, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  onto_chan.cljs$core$IFn$_invoke$arity$2 = onto_chan__2;
  onto_chan.cljs$core$IFn$_invoke$arity$3 = onto_chan__3;
  return onto_chan;
}();
cljs.core.async.to_chan = function to_chan(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan.call(null, ch, coll);
  return ch;
};
cljs.core.async.Mux = function() {
  var obj23213 = {};
  return obj23213;
}();
cljs.core.async.muxch_STAR_ = function muxch_STAR_(_) {
  if (function() {
    var and__15530__auto__ = _;
    if (and__15530__auto__) {
      return _.cljs$core$async$Mux$muxch_STAR_$arity$1;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_);
  } else {
    var x__16169__auto__ = _ == null ? null : _;
    return function() {
      var or__15542__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core.async.muxch_STAR_["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
        }
      }
    }().call(null, _);
  }
};
cljs.core.async.Mult = function() {
  var obj23215 = {};
  return obj23215;
}();
cljs.core.async.tap_STAR_ = function tap_STAR_(m, ch, close_QMARK_) {
  if (function() {
    var and__15530__auto__ = m;
    if (and__15530__auto__) {
      return m.cljs$core$async$Mult$tap_STAR_$arity$3;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_);
  } else {
    var x__16169__auto__ = m == null ? null : m;
    return function() {
      var or__15542__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core.async.tap_STAR_["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
        }
      }
    }().call(null, m, ch, close_QMARK_);
  }
};
cljs.core.async.untap_STAR_ = function untap_STAR_(m, ch) {
  if (function() {
    var and__15530__auto__ = m;
    if (and__15530__auto__) {
      return m.cljs$core$async$Mult$untap_STAR_$arity$2;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch);
  } else {
    var x__16169__auto__ = m == null ? null : m;
    return function() {
      var or__15542__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core.async.untap_STAR_["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.untap_all_STAR_ = function untap_all_STAR_(m) {
  if (function() {
    var and__15530__auto__ = m;
    if (and__15530__auto__) {
      return m.cljs$core$async$Mult$untap_all_STAR_$arity$1;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m);
  } else {
    var x__16169__auto__ = m == null ? null : m;
    return function() {
      var or__15542__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core.async.untap_all_STAR_["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.mult = function mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if (typeof cljs.core.async.t23437 !== "undefined") {
    } else {
      cljs.core.async.t23437 = function(cs, ch, mult, meta23438) {
        this.cs = cs;
        this.ch = ch;
        this.mult = mult;
        this.meta23438 = meta23438;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t23437.cljs$lang$type = true;
      cljs.core.async.t23437.cljs$lang$ctorStr = "cljs.core.async/t23437";
      cljs.core.async.t23437.cljs$lang$ctorPrWriter = function(cs) {
        return function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
          return cljs.core._write.call(null, writer__16110__auto__, "cljs.core.async/t23437");
        };
      }(cs);
      cljs.core.async.t23437.prototype.cljs$core$async$Mult$ = true;
      cljs.core.async.t23437.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(cs) {
        return function(_, ch__$2, close_QMARK_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$2, close_QMARK_);
          return null;
        };
      }(cs);
      cljs.core.async.t23437.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(cs) {
        return function(_, ch__$2) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$2);
          return null;
        };
      }(cs);
      cljs.core.async.t23437.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return null;
        };
      }(cs);
      cljs.core.async.t23437.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t23437.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(cs);
      cljs.core.async.t23437.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs) {
        return function(_23439) {
          var self__ = this;
          var _23439__$1 = this;
          return self__.meta23438;
        };
      }(cs);
      cljs.core.async.t23437.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs) {
        return function(_23439, meta23438__$1) {
          var self__ = this;
          var _23439__$1 = this;
          return new cljs.core.async.t23437(self__.cs, self__.ch, self__.mult, meta23438__$1);
        };
      }(cs);
      cljs.core.async.__GT_t23437 = function(cs) {
        return function __GT_t23437(cs__$1, ch__$1, mult__$1, meta23438) {
          return new cljs.core.async.t23437(cs__$1, ch__$1, mult__$1, meta23438);
        };
      }(cs);
    }
    return new cljs.core.async.t23437(cs, ch, mult, null);
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(cs, m, dchan, dctr) {
    return function(_) {
      if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, true);
      } else {
        return null;
      }
    };
  }(cs, m, dchan, dctr);
  var c__18844__auto___23658 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__18845__auto__ = function() {
      var switch__18829__auto__ = function(state_23570) {
        var state_val_23571 = state_23570[1];
        if (state_val_23571 === 32) {
          var inst_23512 = state_23570[7];
          var inst_23513 = state_23570[8];
          var inst_23511 = state_23570[9];
          var inst_23510 = state_23570[10];
          var inst_23525 = state_23570[2];
          var inst_23526 = inst_23513 + 1;
          var tmp23572 = inst_23512;
          var tmp23573 = inst_23511;
          var tmp23574 = inst_23510;
          var inst_23510__$1 = tmp23574;
          var inst_23511__$1 = tmp23573;
          var inst_23512__$1 = tmp23572;
          var inst_23513__$1 = inst_23526;
          var state_23570__$1 = function() {
            var statearr_23575 = state_23570;
            statearr_23575[7] = inst_23512__$1;
            statearr_23575[8] = inst_23513__$1;
            statearr_23575[9] = inst_23511__$1;
            statearr_23575[10] = inst_23510__$1;
            statearr_23575[11] = inst_23525;
            return statearr_23575;
          }();
          var statearr_23576_23659 = state_23570__$1;
          statearr_23576_23659[2] = null;
          statearr_23576_23659[1] = 25;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_23571 === 1) {
            var state_23570__$1 = state_23570;
            var statearr_23577_23660 = state_23570__$1;
            statearr_23577_23660[2] = null;
            statearr_23577_23660[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_23571 === 33) {
              var inst_23529 = state_23570[12];
              var inst_23531 = cljs.core.chunked_seq_QMARK_.call(null, inst_23529);
              var state_23570__$1 = state_23570;
              if (inst_23531) {
                var statearr_23578_23661 = state_23570__$1;
                statearr_23578_23661[1] = 36;
              } else {
                var statearr_23579_23662 = state_23570__$1;
                statearr_23579_23662[1] = 37;
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_23571 === 2) {
                var state_23570__$1 = state_23570;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_23570__$1, 4, ch);
              } else {
                if (state_val_23571 === 34) {
                  var state_23570__$1 = state_23570;
                  var statearr_23580_23663 = state_23570__$1;
                  statearr_23580_23663[2] = null;
                  statearr_23580_23663[1] = 35;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_23571 === 3) {
                    var inst_23568 = state_23570[2];
                    var state_23570__$1 = state_23570;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_23570__$1, inst_23568);
                  } else {
                    if (state_val_23571 === 35) {
                      var inst_23552 = state_23570[2];
                      var state_23570__$1 = state_23570;
                      var statearr_23581_23664 = state_23570__$1;
                      statearr_23581_23664[2] = inst_23552;
                      statearr_23581_23664[1] = 29;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_23571 === 4) {
                        var inst_23442 = state_23570[13];
                        var inst_23442__$1 = state_23570[2];
                        var inst_23443 = inst_23442__$1 == null;
                        var state_23570__$1 = function() {
                          var statearr_23582 = state_23570;
                          statearr_23582[13] = inst_23442__$1;
                          return statearr_23582;
                        }();
                        if (cljs.core.truth_(inst_23443)) {
                          var statearr_23583_23665 = state_23570__$1;
                          statearr_23583_23665[1] = 5;
                        } else {
                          var statearr_23584_23666 = state_23570__$1;
                          statearr_23584_23666[1] = 6;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_23571 === 36) {
                          var inst_23529 = state_23570[12];
                          var inst_23533 = cljs.core.chunk_first.call(null, inst_23529);
                          var inst_23534 = cljs.core.chunk_rest.call(null, inst_23529);
                          var inst_23535 = cljs.core.count.call(null, inst_23533);
                          var inst_23510 = inst_23534;
                          var inst_23511 = inst_23533;
                          var inst_23512 = inst_23535;
                          var inst_23513 = 0;
                          var state_23570__$1 = function() {
                            var statearr_23585 = state_23570;
                            statearr_23585[7] = inst_23512;
                            statearr_23585[8] = inst_23513;
                            statearr_23585[9] = inst_23511;
                            statearr_23585[10] = inst_23510;
                            return statearr_23585;
                          }();
                          var statearr_23586_23667 = state_23570__$1;
                          statearr_23586_23667[2] = null;
                          statearr_23586_23667[1] = 25;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_23571 === 5) {
                            var inst_23449 = cljs.core.deref.call(null, cs);
                            var inst_23450 = cljs.core.seq.call(null, inst_23449);
                            var inst_23451 = inst_23450;
                            var inst_23452 = null;
                            var inst_23453 = 0;
                            var inst_23454 = 0;
                            var state_23570__$1 = function() {
                              var statearr_23587 = state_23570;
                              statearr_23587[14] = inst_23451;
                              statearr_23587[15] = inst_23452;
                              statearr_23587[16] = inst_23454;
                              statearr_23587[17] = inst_23453;
                              return statearr_23587;
                            }();
                            var statearr_23588_23668 = state_23570__$1;
                            statearr_23588_23668[2] = null;
                            statearr_23588_23668[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_23571 === 37) {
                              var inst_23529 = state_23570[12];
                              var inst_23442 = state_23570[13];
                              var inst_23538 = state_23570[18];
                              var inst_23538__$1 = cljs.core.first.call(null, inst_23529);
                              var inst_23539 = cljs.core.async.put_BANG_.call(null, inst_23538__$1, inst_23442, done);
                              var state_23570__$1 = function() {
                                var statearr_23589 = state_23570;
                                statearr_23589[18] = inst_23538__$1;
                                return statearr_23589;
                              }();
                              if (cljs.core.truth_(inst_23539)) {
                                var statearr_23590_23669 = state_23570__$1;
                                statearr_23590_23669[1] = 39;
                              } else {
                                var statearr_23591_23670 = state_23570__$1;
                                statearr_23591_23670[1] = 40;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_23571 === 6) {
                                var inst_23502 = state_23570[19];
                                var inst_23501 = cljs.core.deref.call(null, cs);
                                var inst_23502__$1 = cljs.core.keys.call(null, inst_23501);
                                var inst_23503 = cljs.core.count.call(null, inst_23502__$1);
                                var inst_23504 = cljs.core.reset_BANG_.call(null, dctr, inst_23503);
                                var inst_23509 = cljs.core.seq.call(null, inst_23502__$1);
                                var inst_23510 = inst_23509;
                                var inst_23511 = null;
                                var inst_23512 = 0;
                                var inst_23513 = 0;
                                var state_23570__$1 = function() {
                                  var statearr_23592 = state_23570;
                                  statearr_23592[7] = inst_23512;
                                  statearr_23592[8] = inst_23513;
                                  statearr_23592[9] = inst_23511;
                                  statearr_23592[19] = inst_23502__$1;
                                  statearr_23592[10] = inst_23510;
                                  statearr_23592[20] = inst_23504;
                                  return statearr_23592;
                                }();
                                var statearr_23593_23671 = state_23570__$1;
                                statearr_23593_23671[2] = null;
                                statearr_23593_23671[1] = 25;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_23571 === 38) {
                                  var inst_23549 = state_23570[2];
                                  var state_23570__$1 = state_23570;
                                  var statearr_23594_23672 = state_23570__$1;
                                  statearr_23594_23672[2] = inst_23549;
                                  statearr_23594_23672[1] = 35;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_23571 === 7) {
                                    var inst_23566 = state_23570[2];
                                    var state_23570__$1 = state_23570;
                                    var statearr_23595_23673 = state_23570__$1;
                                    statearr_23595_23673[2] = inst_23566;
                                    statearr_23595_23673[1] = 3;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_23571 === 39) {
                                      var state_23570__$1 = state_23570;
                                      var statearr_23596_23674 = state_23570__$1;
                                      statearr_23596_23674[2] = null;
                                      statearr_23596_23674[1] = 41;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_23571 === 8) {
                                        var inst_23454 = state_23570[16];
                                        var inst_23453 = state_23570[17];
                                        var inst_23456 = inst_23454 < inst_23453;
                                        var inst_23457 = inst_23456;
                                        var state_23570__$1 = state_23570;
                                        if (cljs.core.truth_(inst_23457)) {
                                          var statearr_23597_23675 = state_23570__$1;
                                          statearr_23597_23675[1] = 10;
                                        } else {
                                          var statearr_23598_23676 = state_23570__$1;
                                          statearr_23598_23676[1] = 11;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_23571 === 40) {
                                          var inst_23538 = state_23570[18];
                                          var inst_23542 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                          var inst_23543 = cljs.core.async.untap_STAR_.call(null, m, inst_23538);
                                          var state_23570__$1 = function() {
                                            var statearr_23599 = state_23570;
                                            statearr_23599[21] = inst_23542;
                                            return statearr_23599;
                                          }();
                                          var statearr_23600_23677 = state_23570__$1;
                                          statearr_23600_23677[2] = inst_23543;
                                          statearr_23600_23677[1] = 41;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_23571 === 9) {
                                            var inst_23499 = state_23570[2];
                                            var state_23570__$1 = state_23570;
                                            var statearr_23601_23678 = state_23570__$1;
                                            statearr_23601_23678[2] = inst_23499;
                                            statearr_23601_23678[1] = 7;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_23571 === 41) {
                                              var inst_23529 = state_23570[12];
                                              var inst_23545 = state_23570[2];
                                              var inst_23546 = cljs.core.next.call(null, inst_23529);
                                              var inst_23510 = inst_23546;
                                              var inst_23511 = null;
                                              var inst_23512 = 0;
                                              var inst_23513 = 0;
                                              var state_23570__$1 = function() {
                                                var statearr_23602 = state_23570;
                                                statearr_23602[7] = inst_23512;
                                                statearr_23602[8] = inst_23513;
                                                statearr_23602[22] = inst_23545;
                                                statearr_23602[9] = inst_23511;
                                                statearr_23602[10] = inst_23510;
                                                return statearr_23602;
                                              }();
                                              var statearr_23603_23679 = state_23570__$1;
                                              statearr_23603_23679[2] = null;
                                              statearr_23603_23679[1] = 25;
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_23571 === 10) {
                                                var inst_23452 = state_23570[15];
                                                var inst_23454 = state_23570[16];
                                                var inst_23460 = cljs.core._nth.call(null, inst_23452, inst_23454);
                                                var inst_23461 = cljs.core.nth.call(null, inst_23460, 0, null);
                                                var inst_23462 = cljs.core.nth.call(null, inst_23460, 1, null);
                                                var state_23570__$1 = function() {
                                                  var statearr_23604 = state_23570;
                                                  statearr_23604[23] = inst_23461;
                                                  return statearr_23604;
                                                }();
                                                if (cljs.core.truth_(inst_23462)) {
                                                  var statearr_23605_23680 = state_23570__$1;
                                                  statearr_23605_23680[1] = 13;
                                                } else {
                                                  var statearr_23606_23681 = state_23570__$1;
                                                  statearr_23606_23681[1] = 14;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } else {
                                                if (state_val_23571 === 42) {
                                                  var state_23570__$1 = state_23570;
                                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_23570__$1, 45, dchan);
                                                } else {
                                                  if (state_val_23571 === 11) {
                                                    var inst_23471 = state_23570[24];
                                                    var inst_23451 = state_23570[14];
                                                    var inst_23471__$1 = cljs.core.seq.call(null, inst_23451);
                                                    var state_23570__$1 = function() {
                                                      var statearr_23607 = state_23570;
                                                      statearr_23607[24] = inst_23471__$1;
                                                      return statearr_23607;
                                                    }();
                                                    if (inst_23471__$1) {
                                                      var statearr_23608_23682 = state_23570__$1;
                                                      statearr_23608_23682[1] = 16;
                                                    } else {
                                                      var statearr_23609_23683 = state_23570__$1;
                                                      statearr_23609_23683[1] = 17;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                  } else {
                                                    if (state_val_23571 === 43) {
                                                      var state_23570__$1 = state_23570;
                                                      var statearr_23610_23684 = state_23570__$1;
                                                      statearr_23610_23684[2] = null;
                                                      statearr_23610_23684[1] = 44;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                    } else {
                                                      if (state_val_23571 === 12) {
                                                        var inst_23497 = state_23570[2];
                                                        var state_23570__$1 = state_23570;
                                                        var statearr_23611_23685 = state_23570__$1;
                                                        statearr_23611_23685[2] = inst_23497;
                                                        statearr_23611_23685[1] = 9;
                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                      } else {
                                                        if (state_val_23571 === 44) {
                                                          var inst_23563 = state_23570[2];
                                                          var state_23570__$1 = function() {
                                                            var statearr_23612 = state_23570;
                                                            statearr_23612[25] = inst_23563;
                                                            return statearr_23612;
                                                          }();
                                                          var statearr_23613_23686 = state_23570__$1;
                                                          statearr_23613_23686[2] = null;
                                                          statearr_23613_23686[1] = 2;
                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                        } else {
                                                          if (state_val_23571 === 13) {
                                                            var inst_23461 = state_23570[23];
                                                            var inst_23464 = cljs.core.async.close_BANG_.call(null, inst_23461);
                                                            var state_23570__$1 = state_23570;
                                                            var statearr_23614_23687 = state_23570__$1;
                                                            statearr_23614_23687[2] = inst_23464;
                                                            statearr_23614_23687[1] = 15;
                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                          } else {
                                                            if (state_val_23571 === 45) {
                                                              var inst_23560 = state_23570[2];
                                                              var state_23570__$1 = state_23570;
                                                              var statearr_23618_23688 = state_23570__$1;
                                                              statearr_23618_23688[2] = inst_23560;
                                                              statearr_23618_23688[1] = 44;
                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                            } else {
                                                              if (state_val_23571 === 14) {
                                                                var state_23570__$1 = state_23570;
                                                                var statearr_23619_23689 = state_23570__$1;
                                                                statearr_23619_23689[2] = null;
                                                                statearr_23619_23689[1] = 15;
                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                              } else {
                                                                if (state_val_23571 === 15) {
                                                                  var inst_23451 = state_23570[14];
                                                                  var inst_23452 = state_23570[15];
                                                                  var inst_23454 = state_23570[16];
                                                                  var inst_23453 = state_23570[17];
                                                                  var inst_23467 = state_23570[2];
                                                                  var inst_23468 = inst_23454 + 1;
                                                                  var tmp23615 = inst_23451;
                                                                  var tmp23616 = inst_23452;
                                                                  var tmp23617 = inst_23453;
                                                                  var inst_23451__$1 = tmp23615;
                                                                  var inst_23452__$1 = tmp23616;
                                                                  var inst_23453__$1 = tmp23617;
                                                                  var inst_23454__$1 = inst_23468;
                                                                  var state_23570__$1 = function() {
                                                                    var statearr_23620 = state_23570;
                                                                    statearr_23620[14] = inst_23451__$1;
                                                                    statearr_23620[15] = inst_23452__$1;
                                                                    statearr_23620[26] = inst_23467;
                                                                    statearr_23620[16] = inst_23454__$1;
                                                                    statearr_23620[17] = inst_23453__$1;
                                                                    return statearr_23620;
                                                                  }();
                                                                  var statearr_23621_23690 = state_23570__$1;
                                                                  statearr_23621_23690[2] = null;
                                                                  statearr_23621_23690[1] = 8;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                } else {
                                                                  if (state_val_23571 === 16) {
                                                                    var inst_23471 = state_23570[24];
                                                                    var inst_23473 = cljs.core.chunked_seq_QMARK_.call(null, inst_23471);
                                                                    var state_23570__$1 = state_23570;
                                                                    if (inst_23473) {
                                                                      var statearr_23622_23691 = state_23570__$1;
                                                                      statearr_23622_23691[1] = 19;
                                                                    } else {
                                                                      var statearr_23623_23692 = state_23570__$1;
                                                                      statearr_23623_23692[1] = 20;
                                                                    }
                                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                  } else {
                                                                    if (state_val_23571 === 17) {
                                                                      var state_23570__$1 = state_23570;
                                                                      var statearr_23624_23693 = state_23570__$1;
                                                                      statearr_23624_23693[2] = null;
                                                                      statearr_23624_23693[1] = 18;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                    } else {
                                                                      if (state_val_23571 === 18) {
                                                                        var inst_23495 = state_23570[2];
                                                                        var state_23570__$1 = state_23570;
                                                                        var statearr_23625_23694 = state_23570__$1;
                                                                        statearr_23625_23694[2] = inst_23495;
                                                                        statearr_23625_23694[1] = 12;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                      } else {
                                                                        if (state_val_23571 === 19) {
                                                                          var inst_23471 = state_23570[24];
                                                                          var inst_23475 = cljs.core.chunk_first.call(null, inst_23471);
                                                                          var inst_23476 = cljs.core.chunk_rest.call(null, inst_23471);
                                                                          var inst_23477 = cljs.core.count.call(null, inst_23475);
                                                                          var inst_23451 = inst_23476;
                                                                          var inst_23452 = inst_23475;
                                                                          var inst_23453 = inst_23477;
                                                                          var inst_23454 = 0;
                                                                          var state_23570__$1 = function() {
                                                                            var statearr_23626 = state_23570;
                                                                            statearr_23626[14] = inst_23451;
                                                                            statearr_23626[15] = inst_23452;
                                                                            statearr_23626[16] = inst_23454;
                                                                            statearr_23626[17] = inst_23453;
                                                                            return statearr_23626;
                                                                          }();
                                                                          var statearr_23627_23695 = state_23570__$1;
                                                                          statearr_23627_23695[2] = null;
                                                                          statearr_23627_23695[1] = 8;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                        } else {
                                                                          if (state_val_23571 === 20) {
                                                                            var inst_23471 = state_23570[24];
                                                                            var inst_23481 = cljs.core.first.call(null, inst_23471);
                                                                            var inst_23482 = cljs.core.nth.call(null, inst_23481, 0, null);
                                                                            var inst_23483 = cljs.core.nth.call(null, inst_23481, 1, null);
                                                                            var state_23570__$1 = function() {
                                                                              var statearr_23628 = state_23570;
                                                                              statearr_23628[27] = inst_23482;
                                                                              return statearr_23628;
                                                                            }();
                                                                            if (cljs.core.truth_(inst_23483)) {
                                                                              var statearr_23629_23696 = state_23570__$1;
                                                                              statearr_23629_23696[1] = 22;
                                                                            } else {
                                                                              var statearr_23630_23697 = state_23570__$1;
                                                                              statearr_23630_23697[1] = 23;
                                                                            }
                                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                          } else {
                                                                            if (state_val_23571 === 21) {
                                                                              var inst_23492 = state_23570[2];
                                                                              var state_23570__$1 = state_23570;
                                                                              var statearr_23631_23698 = state_23570__$1;
                                                                              statearr_23631_23698[2] = inst_23492;
                                                                              statearr_23631_23698[1] = 18;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                            } else {
                                                                              if (state_val_23571 === 22) {
                                                                                var inst_23482 = state_23570[27];
                                                                                var inst_23485 = cljs.core.async.close_BANG_.call(null, inst_23482);
                                                                                var state_23570__$1 = state_23570;
                                                                                var statearr_23632_23699 = state_23570__$1;
                                                                                statearr_23632_23699[2] = inst_23485;
                                                                                statearr_23632_23699[1] = 24;
                                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                              } else {
                                                                                if (state_val_23571 === 23) {
                                                                                  var state_23570__$1 = state_23570;
                                                                                  var statearr_23633_23700 = state_23570__$1;
                                                                                  statearr_23633_23700[2] = null;
                                                                                  statearr_23633_23700[1] = 24;
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                } else {
                                                                                  if (state_val_23571 === 24) {
                                                                                    var inst_23471 = state_23570[24];
                                                                                    var inst_23488 = state_23570[2];
                                                                                    var inst_23489 = cljs.core.next.call(null, inst_23471);
                                                                                    var inst_23451 = inst_23489;
                                                                                    var inst_23452 = null;
                                                                                    var inst_23453 = 0;
                                                                                    var inst_23454 = 0;
                                                                                    var state_23570__$1 = function() {
                                                                                      var statearr_23634 = state_23570;
                                                                                      statearr_23634[28] = inst_23488;
                                                                                      statearr_23634[14] = inst_23451;
                                                                                      statearr_23634[15] = inst_23452;
                                                                                      statearr_23634[16] = inst_23454;
                                                                                      statearr_23634[17] = inst_23453;
                                                                                      return statearr_23634;
                                                                                    }();
                                                                                    var statearr_23635_23701 = state_23570__$1;
                                                                                    statearr_23635_23701[2] = null;
                                                                                    statearr_23635_23701[1] = 8;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                  } else {
                                                                                    if (state_val_23571 === 25) {
                                                                                      var inst_23512 = state_23570[7];
                                                                                      var inst_23513 = state_23570[8];
                                                                                      var inst_23515 = inst_23513 < inst_23512;
                                                                                      var inst_23516 = inst_23515;
                                                                                      var state_23570__$1 = state_23570;
                                                                                      if (cljs.core.truth_(inst_23516)) {
                                                                                        var statearr_23636_23702 = state_23570__$1;
                                                                                        statearr_23636_23702[1] = 27;
                                                                                      } else {
                                                                                        var statearr_23637_23703 = state_23570__$1;
                                                                                        statearr_23637_23703[1] = 28;
                                                                                      }
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                    } else {
                                                                                      if (state_val_23571 === 26) {
                                                                                        var inst_23502 = state_23570[19];
                                                                                        var inst_23556 = state_23570[2];
                                                                                        var inst_23557 = cljs.core.seq.call(null, inst_23502);
                                                                                        var state_23570__$1 = function() {
                                                                                          var statearr_23638 = state_23570;
                                                                                          statearr_23638[29] = inst_23556;
                                                                                          return statearr_23638;
                                                                                        }();
                                                                                        if (inst_23557) {
                                                                                          var statearr_23639_23704 = state_23570__$1;
                                                                                          statearr_23639_23704[1] = 42;
                                                                                        } else {
                                                                                          var statearr_23640_23705 = state_23570__$1;
                                                                                          statearr_23640_23705[1] = 43;
                                                                                        }
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                      } else {
                                                                                        if (state_val_23571 === 27) {
                                                                                          var inst_23513 = state_23570[8];
                                                                                          var inst_23442 = state_23570[13];
                                                                                          var inst_23511 = state_23570[9];
                                                                                          var inst_23518 = state_23570[30];
                                                                                          var inst_23518__$1 = cljs.core._nth.call(null, inst_23511, inst_23513);
                                                                                          var inst_23519 = cljs.core.async.put_BANG_.call(null, inst_23518__$1, inst_23442, done);
                                                                                          var state_23570__$1 = function() {
                                                                                            var statearr_23641 = state_23570;
                                                                                            statearr_23641[30] = inst_23518__$1;
                                                                                            return statearr_23641;
                                                                                          }();
                                                                                          if (cljs.core.truth_(inst_23519)) {
                                                                                            var statearr_23642_23706 = state_23570__$1;
                                                                                            statearr_23642_23706[1] = 30;
                                                                                          } else {
                                                                                            var statearr_23643_23707 = state_23570__$1;
                                                                                            statearr_23643_23707[1] = 31;
                                                                                          }
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                        } else {
                                                                                          if (state_val_23571 === 28) {
                                                                                            var inst_23529 = state_23570[12];
                                                                                            var inst_23510 = state_23570[10];
                                                                                            var inst_23529__$1 = cljs.core.seq.call(null, inst_23510);
                                                                                            var state_23570__$1 = function() {
                                                                                              var statearr_23644 = state_23570;
                                                                                              statearr_23644[12] = inst_23529__$1;
                                                                                              return statearr_23644;
                                                                                            }();
                                                                                            if (inst_23529__$1) {
                                                                                              var statearr_23645_23708 = state_23570__$1;
                                                                                              statearr_23645_23708[1] = 33;
                                                                                            } else {
                                                                                              var statearr_23646_23709 = state_23570__$1;
                                                                                              statearr_23646_23709[1] = 34;
                                                                                            }
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                          } else {
                                                                                            if (state_val_23571 === 29) {
                                                                                              var inst_23554 = state_23570[2];
                                                                                              var state_23570__$1 = state_23570;
                                                                                              var statearr_23647_23710 = state_23570__$1;
                                                                                              statearr_23647_23710[2] = inst_23554;
                                                                                              statearr_23647_23710[1] = 26;
                                                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                            } else {
                                                                                              if (state_val_23571 === 30) {
                                                                                                var state_23570__$1 = state_23570;
                                                                                                var statearr_23648_23711 = state_23570__$1;
                                                                                                statearr_23648_23711[2] = null;
                                                                                                statearr_23648_23711[1] = 32;
                                                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                              } else {
                                                                                                if (state_val_23571 === 31) {
                                                                                                  var inst_23518 = state_23570[30];
                                                                                                  var inst_23522 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                                                                                  var inst_23523 = cljs.core.async.untap_STAR_.call(null, m, inst_23518);
                                                                                                  var state_23570__$1 = function() {
                                                                                                    var statearr_23649 = state_23570;
                                                                                                    statearr_23649[31] = inst_23522;
                                                                                                    return statearr_23649;
                                                                                                  }();
                                                                                                  var statearr_23650_23712 = state_23570__$1;
                                                                                                  statearr_23650_23712[2] = inst_23523;
                                                                                                  statearr_23650_23712[1] = 32;
                                                                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                                } else {
                                                                                                  return null;
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__18829__auto__) {
        return function() {
          var state_machine__18830__auto__ = null;
          var state_machine__18830__auto____0 = function() {
            var statearr_23654 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
            statearr_23654[0] = state_machine__18830__auto__;
            statearr_23654[1] = 1;
            return statearr_23654;
          };
          var state_machine__18830__auto____1 = function(state_23570) {
            while (true) {
              var ret_value__18831__auto__ = function() {
                try {
                  while (true) {
                    var result__18832__auto__ = switch__18829__auto__.call(null, state_23570);
                    if (cljs.core.keyword_identical_QMARK_.call(null, result__18832__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                      continue;
                    } else {
                      return result__18832__auto__;
                    }
                    break;
                  }
                } catch (e23655) {
                  if (e23655 instanceof Object) {
                    var ex__18833__auto__ = e23655;
                    var statearr_23656_23713 = state_23570;
                    statearr_23656_23713[5] = ex__18833__auto__;
                    cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_23570);
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                      throw e23655;
                    } else {
                      return null;
                    }
                  }
                }
              }();
              if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__18831__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                var G__23714 = state_23570;
                state_23570 = G__23714;
                continue;
              } else {
                return ret_value__18831__auto__;
              }
              break;
            }
          };
          state_machine__18830__auto__ = function(state_23570) {
            switch(arguments.length) {
              case 0:
                return state_machine__18830__auto____0.call(this);
              case 1:
                return state_machine__18830__auto____1.call(this, state_23570);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__18830__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__18830__auto____0;
          state_machine__18830__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__18830__auto____1;
          return state_machine__18830__auto__;
        }();
      }(switch__18829__auto__);
    }();
    var state__18846__auto__ = function() {
      var statearr_23657 = f__18845__auto__.call(null);
      statearr_23657[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__18844__auto___23658;
      return statearr_23657;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__18846__auto__);
  });
  return m;
};
cljs.core.async.tap = function() {
  var tap = null;
  var tap__2 = function(mult, ch) {
    return tap.call(null, mult, ch, true);
  };
  var tap__3 = function(mult, ch, close_QMARK_) {
    cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
    return ch;
  };
  tap = function(mult, ch, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return tap__2.call(this, mult, ch);
      case 3:
        return tap__3.call(this, mult, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  tap.cljs$core$IFn$_invoke$arity$2 = tap__2;
  tap.cljs$core$IFn$_invoke$arity$3 = tap__3;
  return tap;
}();
cljs.core.async.untap = function untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch);
};
cljs.core.async.untap_all = function untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult);
};
cljs.core.async.Mix = function() {
  var obj23716 = {};
  return obj23716;
}();
cljs.core.async.admix_STAR_ = function admix_STAR_(m, ch) {
  if (function() {
    var and__15530__auto__ = m;
    if (and__15530__auto__) {
      return m.cljs$core$async$Mix$admix_STAR_$arity$2;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch);
  } else {
    var x__16169__auto__ = m == null ? null : m;
    return function() {
      var or__15542__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core.async.admix_STAR_["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_STAR_ = function unmix_STAR_(m, ch) {
  if (function() {
    var and__15530__auto__ = m;
    if (and__15530__auto__) {
      return m.cljs$core$async$Mix$unmix_STAR_$arity$2;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch);
  } else {
    var x__16169__auto__ = m == null ? null : m;
    return function() {
      var or__15542__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core.async.unmix_STAR_["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_all_STAR_ = function unmix_all_STAR_(m) {
  if (function() {
    var and__15530__auto__ = m;
    if (and__15530__auto__) {
      return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m);
  } else {
    var x__16169__auto__ = m == null ? null : m;
    return function() {
      var or__15542__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core.async.unmix_all_STAR_["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.toggle_STAR_ = function toggle_STAR_(m, state_map) {
  if (function() {
    var and__15530__auto__ = m;
    if (and__15530__auto__) {
      return m.cljs$core$async$Mix$toggle_STAR_$arity$2;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map);
  } else {
    var x__16169__auto__ = m == null ? null : m;
    return function() {
      var or__15542__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core.async.toggle_STAR_["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
        }
      }
    }().call(null, m, state_map);
  }
};
cljs.core.async.solo_mode_STAR_ = function solo_mode_STAR_(m, mode) {
  if (function() {
    var and__15530__auto__ = m;
    if (and__15530__auto__) {
      return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode);
  } else {
    var x__16169__auto__ = m == null ? null : m;
    return function() {
      var or__15542__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core.async.solo_mode_STAR_["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
        }
      }
    }().call(null, m, mode);
  }
};
cljs.core.async.mix = function mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pause", "pause", 1120344424), null, new cljs.core.Keyword(null, "mute", "mute", 1017267595), null], null), null);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", 1017440337));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1017267595));
  var change = cljs.core.async.chan.call(null);
  var changed = function(cs, solo_modes, attrs, solo_mode, change) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, change, true);
    };
  }(cs, solo_modes, attrs, solo_mode, change);
  var pick = function(cs, solo_modes, attrs, solo_mode, change, changed) {
    return function(attr, chs) {
      return cljs.core.reduce_kv.call(null, function(cs, solo_modes, attrs, solo_mode, change, changed) {
        return function(ret, c, v) {
          if (cljs.core.truth_(attr.call(null, v))) {
            return cljs.core.conj.call(null, ret, c);
          } else {
            return ret;
          }
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed), cljs.core.PersistentHashSet.EMPTY, chs);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed);
  var calc_state = function(cs, solo_modes, attrs, solo_mode, change, changed, pick) {
    return function() {
      var chs = cljs.core.deref.call(null, cs);
      var mode = cljs.core.deref.call(null, solo_mode);
      var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", 1017440337), chs);
      var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", 1120344424), chs);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "solos", "solos", 1123523302), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1017267595), chs), new cljs.core.Keyword(null, "reads", "reads", 1122290959), cljs.core.conj.call(null, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", 1120344424)) && !cljs.core.empty_QMARK_.call(null, solos) ? cljs.core.vec.call(null, 
      solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], null);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed, pick);
  var m = function() {
    if (typeof cljs.core.async.t23836 !== "undefined") {
    } else {
      cljs.core.async.t23836 = function(pick, out, attrs, cs, calc_state, solo_modes, mix, changed, change, solo_mode, meta23837) {
        this.pick = pick;
        this.out = out;
        this.attrs = attrs;
        this.cs = cs;
        this.calc_state = calc_state;
        this.solo_modes = solo_modes;
        this.mix = mix;
        this.changed = changed;
        this.change = change;
        this.solo_mode = solo_mode;
        this.meta23837 = meta23837;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t23836.cljs$lang$type = true;
      cljs.core.async.t23836.cljs$lang$ctorStr = "cljs.core.async/t23836";
      cljs.core.async.t23836.cljs$lang$ctorPrWriter = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
          return cljs.core._write.call(null, writer__16110__auto__, "cljs.core.async/t23836");
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t23836.prototype.cljs$core$async$Mix$ = true;
      cljs.core.async.t23836.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t23836.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t23836.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t23836.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, state_map) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, cljs.core.merge), state_map);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t23836.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, mode) {
          var self__ = this;
          var ___$1 = this;
          if (cljs.core.truth_(self__.solo_modes.call(null, mode))) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("mode must be one of: "), cljs.core.str(self__.solo_modes)].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "solo-modes", "solo-modes", -1162732933, null), new cljs.core.Symbol(null, "mode", "mode", -1637174436, null))))].join(""));
          }
          cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t23836.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t23836.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.out;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t23836.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_23838) {
          var self__ = this;
          var _23838__$1 = this;
          return self__.meta23837;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t23836.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_23838, meta23837__$1) {
          var self__ = this;
          var _23838__$1 = this;
          return new cljs.core.async.t23836(self__.pick, self__.out, self__.attrs, self__.cs, self__.calc_state, self__.solo_modes, self__.mix, self__.changed, self__.change, self__.solo_mode, meta23837__$1);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.__GT_t23836 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function __GT_t23836(pick__$1, out__$1, attrs__$1, cs__$1, calc_state__$1, solo_modes__$1, mix__$1, changed__$1, change__$1, solo_mode__$1, meta23837) {
          return new cljs.core.async.t23836(pick__$1, out__$1, attrs__$1, cs__$1, calc_state__$1, solo_modes__$1, mix__$1, changed__$1, change__$1, solo_mode__$1, meta23837);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
    }
    return new cljs.core.async.t23836(pick, out, attrs, cs, calc_state, solo_modes, mix, changed, change, solo_mode, null);
  }();
  var c__18844__auto___23955 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__18845__auto__ = function() {
      var switch__18829__auto__ = function(state_23908) {
        var state_val_23909 = state_23908[1];
        if (state_val_23909 === 1) {
          var inst_23842 = state_23908[7];
          var inst_23842__$1 = calc_state.call(null);
          var inst_23843 = cljs.core.seq_QMARK_.call(null, inst_23842__$1);
          var state_23908__$1 = function() {
            var statearr_23910 = state_23908;
            statearr_23910[7] = inst_23842__$1;
            return statearr_23910;
          }();
          if (inst_23843) {
            var statearr_23911_23956 = state_23908__$1;
            statearr_23911_23956[1] = 2;
          } else {
            var statearr_23912_23957 = state_23908__$1;
            statearr_23912_23957[1] = 3;
          }
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_23909 === 2) {
            var inst_23842 = state_23908[7];
            var inst_23845 = cljs.core.apply.call(null, cljs.core.hash_map, inst_23842);
            var state_23908__$1 = state_23908;
            var statearr_23913_23958 = state_23908__$1;
            statearr_23913_23958[2] = inst_23845;
            statearr_23913_23958[1] = 4;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_23909 === 3) {
              var inst_23842 = state_23908[7];
              var state_23908__$1 = state_23908;
              var statearr_23914_23959 = state_23908__$1;
              statearr_23914_23959[2] = inst_23842;
              statearr_23914_23959[1] = 4;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_23909 === 4) {
                var inst_23842 = state_23908[7];
                var inst_23848 = state_23908[2];
                var inst_23849 = cljs.core.get.call(null, inst_23848, new cljs.core.Keyword(null, "reads", "reads", 1122290959));
                var inst_23850 = cljs.core.get.call(null, inst_23848, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300));
                var inst_23851 = cljs.core.get.call(null, inst_23848, new cljs.core.Keyword(null, "solos", "solos", 1123523302));
                var inst_23852 = inst_23842;
                var state_23908__$1 = function() {
                  var statearr_23915 = state_23908;
                  statearr_23915[8] = inst_23849;
                  statearr_23915[9] = inst_23852;
                  statearr_23915[10] = inst_23851;
                  statearr_23915[11] = inst_23850;
                  return statearr_23915;
                }();
                var statearr_23916_23960 = state_23908__$1;
                statearr_23916_23960[2] = null;
                statearr_23916_23960[1] = 5;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_23909 === 5) {
                  var inst_23852 = state_23908[9];
                  var inst_23855 = cljs.core.seq_QMARK_.call(null, inst_23852);
                  var state_23908__$1 = state_23908;
                  if (inst_23855) {
                    var statearr_23917_23961 = state_23908__$1;
                    statearr_23917_23961[1] = 7;
                  } else {
                    var statearr_23918_23962 = state_23908__$1;
                    statearr_23918_23962[1] = 8;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_23909 === 6) {
                    var inst_23906 = state_23908[2];
                    var state_23908__$1 = state_23908;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_23908__$1, inst_23906);
                  } else {
                    if (state_val_23909 === 7) {
                      var inst_23852 = state_23908[9];
                      var inst_23857 = cljs.core.apply.call(null, cljs.core.hash_map, inst_23852);
                      var state_23908__$1 = state_23908;
                      var statearr_23919_23963 = state_23908__$1;
                      statearr_23919_23963[2] = inst_23857;
                      statearr_23919_23963[1] = 9;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_23909 === 8) {
                        var inst_23852 = state_23908[9];
                        var state_23908__$1 = state_23908;
                        var statearr_23920_23964 = state_23908__$1;
                        statearr_23920_23964[2] = inst_23852;
                        statearr_23920_23964[1] = 9;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_23909 === 9) {
                          var inst_23860 = state_23908[12];
                          var inst_23860__$1 = state_23908[2];
                          var inst_23861 = cljs.core.get.call(null, inst_23860__$1, new cljs.core.Keyword(null, "reads", "reads", 1122290959));
                          var inst_23862 = cljs.core.get.call(null, inst_23860__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300));
                          var inst_23863 = cljs.core.get.call(null, inst_23860__$1, new cljs.core.Keyword(null, "solos", "solos", 1123523302));
                          var state_23908__$1 = function() {
                            var statearr_23921 = state_23908;
                            statearr_23921[13] = inst_23863;
                            statearr_23921[14] = inst_23862;
                            statearr_23921[12] = inst_23860__$1;
                            return statearr_23921;
                          }();
                          return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_23908__$1, 10, inst_23861);
                        } else {
                          if (state_val_23909 === 10) {
                            var inst_23867 = state_23908[15];
                            var inst_23868 = state_23908[16];
                            var inst_23866 = state_23908[2];
                            var inst_23867__$1 = cljs.core.nth.call(null, inst_23866, 0, null);
                            var inst_23868__$1 = cljs.core.nth.call(null, inst_23866, 1, null);
                            var inst_23869 = inst_23867__$1 == null;
                            var inst_23870 = cljs.core._EQ_.call(null, inst_23868__$1, change);
                            var inst_23871 = inst_23869 || inst_23870;
                            var state_23908__$1 = function() {
                              var statearr_23922 = state_23908;
                              statearr_23922[15] = inst_23867__$1;
                              statearr_23922[16] = inst_23868__$1;
                              return statearr_23922;
                            }();
                            if (cljs.core.truth_(inst_23871)) {
                              var statearr_23923_23965 = state_23908__$1;
                              statearr_23923_23965[1] = 11;
                            } else {
                              var statearr_23924_23966 = state_23908__$1;
                              statearr_23924_23966[1] = 12;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_23909 === 11) {
                              var inst_23867 = state_23908[15];
                              var inst_23873 = inst_23867 == null;
                              var state_23908__$1 = state_23908;
                              if (cljs.core.truth_(inst_23873)) {
                                var statearr_23925_23967 = state_23908__$1;
                                statearr_23925_23967[1] = 14;
                              } else {
                                var statearr_23926_23968 = state_23908__$1;
                                statearr_23926_23968[1] = 15;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_23909 === 12) {
                                var inst_23882 = state_23908[17];
                                var inst_23868 = state_23908[16];
                                var inst_23863 = state_23908[13];
                                var inst_23882__$1 = inst_23863.call(null, inst_23868);
                                var state_23908__$1 = function() {
                                  var statearr_23927 = state_23908;
                                  statearr_23927[17] = inst_23882__$1;
                                  return statearr_23927;
                                }();
                                if (cljs.core.truth_(inst_23882__$1)) {
                                  var statearr_23928_23969 = state_23908__$1;
                                  statearr_23928_23969[1] = 17;
                                } else {
                                  var statearr_23929_23970 = state_23908__$1;
                                  statearr_23929_23970[1] = 18;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_23909 === 13) {
                                  var inst_23904 = state_23908[2];
                                  var state_23908__$1 = state_23908;
                                  var statearr_23930_23971 = state_23908__$1;
                                  statearr_23930_23971[2] = inst_23904;
                                  statearr_23930_23971[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_23909 === 14) {
                                    var inst_23868 = state_23908[16];
                                    var inst_23875 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_23868);
                                    var state_23908__$1 = state_23908;
                                    var statearr_23931_23972 = state_23908__$1;
                                    statearr_23931_23972[2] = inst_23875;
                                    statearr_23931_23972[1] = 16;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_23909 === 15) {
                                      var state_23908__$1 = state_23908;
                                      var statearr_23932_23973 = state_23908__$1;
                                      statearr_23932_23973[2] = null;
                                      statearr_23932_23973[1] = 16;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_23909 === 16) {
                                        var inst_23878 = state_23908[2];
                                        var inst_23879 = calc_state.call(null);
                                        var inst_23852 = inst_23879;
                                        var state_23908__$1 = function() {
                                          var statearr_23933 = state_23908;
                                          statearr_23933[18] = inst_23878;
                                          statearr_23933[9] = inst_23852;
                                          return statearr_23933;
                                        }();
                                        var statearr_23934_23974 = state_23908__$1;
                                        statearr_23934_23974[2] = null;
                                        statearr_23934_23974[1] = 5;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_23909 === 17) {
                                          var inst_23882 = state_23908[17];
                                          var state_23908__$1 = state_23908;
                                          var statearr_23935_23975 = state_23908__$1;
                                          statearr_23935_23975[2] = inst_23882;
                                          statearr_23935_23975[1] = 19;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_23909 === 18) {
                                            var inst_23868 = state_23908[16];
                                            var inst_23863 = state_23908[13];
                                            var inst_23862 = state_23908[14];
                                            var inst_23885 = cljs.core.empty_QMARK_.call(null, inst_23863);
                                            var inst_23886 = inst_23862.call(null, inst_23868);
                                            var inst_23887 = cljs.core.not.call(null, inst_23886);
                                            var inst_23888 = inst_23885 && inst_23887;
                                            var state_23908__$1 = state_23908;
                                            var statearr_23936_23976 = state_23908__$1;
                                            statearr_23936_23976[2] = inst_23888;
                                            statearr_23936_23976[1] = 19;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_23909 === 19) {
                                              var inst_23890 = state_23908[2];
                                              var state_23908__$1 = state_23908;
                                              if (cljs.core.truth_(inst_23890)) {
                                                var statearr_23937_23977 = state_23908__$1;
                                                statearr_23937_23977[1] = 20;
                                              } else {
                                                var statearr_23938_23978 = state_23908__$1;
                                                statearr_23938_23978[1] = 21;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_23909 === 20) {
                                                var inst_23867 = state_23908[15];
                                                var state_23908__$1 = state_23908;
                                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_23908__$1, 23, out, inst_23867);
                                              } else {
                                                if (state_val_23909 === 21) {
                                                  var inst_23860 = state_23908[12];
                                                  var inst_23852 = inst_23860;
                                                  var state_23908__$1 = function() {
                                                    var statearr_23939 = state_23908;
                                                    statearr_23939[9] = inst_23852;
                                                    return statearr_23939;
                                                  }();
                                                  var statearr_23940_23979 = state_23908__$1;
                                                  statearr_23940_23979[2] = null;
                                                  statearr_23940_23979[1] = 5;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                } else {
                                                  if (state_val_23909 === 22) {
                                                    var inst_23902 = state_23908[2];
                                                    var state_23908__$1 = state_23908;
                                                    var statearr_23941_23980 = state_23908__$1;
                                                    statearr_23941_23980[2] = inst_23902;
                                                    statearr_23941_23980[1] = 13;
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                  } else {
                                                    if (state_val_23909 === 23) {
                                                      var inst_23893 = state_23908[2];
                                                      var state_23908__$1 = state_23908;
                                                      if (cljs.core.truth_(inst_23893)) {
                                                        var statearr_23942_23981 = state_23908__$1;
                                                        statearr_23942_23981[1] = 24;
                                                      } else {
                                                        var statearr_23943_23982 = state_23908__$1;
                                                        statearr_23943_23982[1] = 25;
                                                      }
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                    } else {
                                                      if (state_val_23909 === 24) {
                                                        var inst_23860 = state_23908[12];
                                                        var inst_23852 = inst_23860;
                                                        var state_23908__$1 = function() {
                                                          var statearr_23944 = state_23908;
                                                          statearr_23944[9] = inst_23852;
                                                          return statearr_23944;
                                                        }();
                                                        var statearr_23945_23983 = state_23908__$1;
                                                        statearr_23945_23983[2] = null;
                                                        statearr_23945_23983[1] = 5;
                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                      } else {
                                                        if (state_val_23909 === 25) {
                                                          var state_23908__$1 = state_23908;
                                                          var statearr_23946_23984 = state_23908__$1;
                                                          statearr_23946_23984[2] = null;
                                                          statearr_23946_23984[1] = 26;
                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                        } else {
                                                          if (state_val_23909 === 26) {
                                                            var inst_23898 = state_23908[2];
                                                            var state_23908__$1 = state_23908;
                                                            var statearr_23947_23985 = state_23908__$1;
                                                            statearr_23947_23985[2] = inst_23898;
                                                            statearr_23947_23985[1] = 22;
                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                          } else {
                                                            return null;
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__18829__auto__) {
        return function() {
          var state_machine__18830__auto__ = null;
          var state_machine__18830__auto____0 = function() {
            var statearr_23951 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
            statearr_23951[0] = state_machine__18830__auto__;
            statearr_23951[1] = 1;
            return statearr_23951;
          };
          var state_machine__18830__auto____1 = function(state_23908) {
            while (true) {
              var ret_value__18831__auto__ = function() {
                try {
                  while (true) {
                    var result__18832__auto__ = switch__18829__auto__.call(null, state_23908);
                    if (cljs.core.keyword_identical_QMARK_.call(null, result__18832__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                      continue;
                    } else {
                      return result__18832__auto__;
                    }
                    break;
                  }
                } catch (e23952) {
                  if (e23952 instanceof Object) {
                    var ex__18833__auto__ = e23952;
                    var statearr_23953_23986 = state_23908;
                    statearr_23953_23986[5] = ex__18833__auto__;
                    cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_23908);
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                      throw e23952;
                    } else {
                      return null;
                    }
                  }
                }
              }();
              if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__18831__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                var G__23987 = state_23908;
                state_23908 = G__23987;
                continue;
              } else {
                return ret_value__18831__auto__;
              }
              break;
            }
          };
          state_machine__18830__auto__ = function(state_23908) {
            switch(arguments.length) {
              case 0:
                return state_machine__18830__auto____0.call(this);
              case 1:
                return state_machine__18830__auto____1.call(this, state_23908);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__18830__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__18830__auto____0;
          state_machine__18830__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__18830__auto____1;
          return state_machine__18830__auto__;
        }();
      }(switch__18829__auto__);
    }();
    var state__18846__auto__ = function() {
      var statearr_23954 = f__18845__auto__.call(null);
      statearr_23954[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__18844__auto___23955;
      return statearr_23954;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__18846__auto__);
  });
  return m;
};
cljs.core.async.admix = function admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix = function unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix_all = function unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix);
};
cljs.core.async.toggle = function toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map);
};
cljs.core.async.solo_mode = function solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode);
};
cljs.core.async.Pub = function() {
  var obj23989 = {};
  return obj23989;
}();
cljs.core.async.sub_STAR_ = function sub_STAR_(p, v, ch, close_QMARK_) {
  if (function() {
    var and__15530__auto__ = p;
    if (and__15530__auto__) {
      return p.cljs$core$async$Pub$sub_STAR_$arity$4;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_);
  } else {
    var x__16169__auto__ = p == null ? null : p;
    return function() {
      var or__15542__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core.async.sub_STAR_["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
        }
      }
    }().call(null, p, v, ch, close_QMARK_);
  }
};
cljs.core.async.unsub_STAR_ = function unsub_STAR_(p, v, ch) {
  if (function() {
    var and__15530__auto__ = p;
    if (and__15530__auto__) {
      return p.cljs$core$async$Pub$unsub_STAR_$arity$3;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch);
  } else {
    var x__16169__auto__ = p == null ? null : p;
    return function() {
      var or__15542__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = cljs.core.async.unsub_STAR_["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
        }
      }
    }().call(null, p, v, ch);
  }
};
cljs.core.async.unsub_all_STAR_ = function() {
  var unsub_all_STAR_ = null;
  var unsub_all_STAR___1 = function(p) {
    if (function() {
      var and__15530__auto__ = p;
      if (and__15530__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1;
      } else {
        return and__15530__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p);
    } else {
      var x__16169__auto__ = p == null ? null : p;
      return function() {
        var or__15542__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__16169__auto__)];
        if (or__15542__auto__) {
          return or__15542__auto__;
        } else {
          var or__15542__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__15542__auto____$1) {
            return or__15542__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p);
    }
  };
  var unsub_all_STAR___2 = function(p, v) {
    if (function() {
      var and__15530__auto__ = p;
      if (and__15530__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2;
      } else {
        return and__15530__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v);
    } else {
      var x__16169__auto__ = p == null ? null : p;
      return function() {
        var or__15542__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__16169__auto__)];
        if (or__15542__auto__) {
          return or__15542__auto__;
        } else {
          var or__15542__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__15542__auto____$1) {
            return or__15542__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p, v);
    }
  };
  unsub_all_STAR_ = function(p, v) {
    switch(arguments.length) {
      case 1:
        return unsub_all_STAR___1.call(this, p);
      case 2:
        return unsub_all_STAR___2.call(this, p, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = unsub_all_STAR___1;
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = unsub_all_STAR___2;
  return unsub_all_STAR_;
}();
cljs.core.async.pub = function() {
  var pub = null;
  var pub__2 = function(ch, topic_fn) {
    return pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null));
  };
  var pub__3 = function(ch, topic_fn, buf_fn) {
    var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var ensure_mult = function(mults) {
      return function(topic) {
        var or__15542__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
        if (cljs.core.truth_(or__15542__auto__)) {
          return or__15542__auto__;
        } else {
          return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(or__15542__auto__, mults) {
            return function(p1__23990_SHARP_) {
              if (cljs.core.truth_(p1__23990_SHARP_.call(null, topic))) {
                return p1__23990_SHARP_;
              } else {
                return cljs.core.assoc.call(null, p1__23990_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))));
              }
            };
          }(or__15542__auto__, mults)), topic);
        }
      };
    }(mults);
    var p = function() {
      if (typeof cljs.core.async.t24105 !== "undefined") {
      } else {
        cljs.core.async.t24105 = function(ensure_mult, mults, buf_fn, topic_fn, ch, pub, meta24106) {
          this.ensure_mult = ensure_mult;
          this.mults = mults;
          this.buf_fn = buf_fn;
          this.topic_fn = topic_fn;
          this.ch = ch;
          this.pub = pub;
          this.meta24106 = meta24106;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393216;
        };
        cljs.core.async.t24105.cljs$lang$type = true;
        cljs.core.async.t24105.cljs$lang$ctorStr = "cljs.core.async/t24105";
        cljs.core.async.t24105.cljs$lang$ctorPrWriter = function(mults, ensure_mult) {
          return function(this__16109__auto__, writer__16110__auto__, opt__16111__auto__) {
            return cljs.core._write.call(null, writer__16110__auto__, "cljs.core.async/t24105");
          };
        }(mults, ensure_mult);
        cljs.core.async.t24105.prototype.cljs$core$async$Pub$ = true;
        cljs.core.async.t24105.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2, close_QMARK_) {
            var self__ = this;
            var p__$1 = this;
            var m = self__.ensure_mult.call(null, topic);
            return cljs.core.async.tap.call(null, m, ch__$2, close_QMARK_);
          };
        }(mults, ensure_mult);
        cljs.core.async.t24105.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2) {
            var self__ = this;
            var p__$1 = this;
            var temp__4092__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
            if (cljs.core.truth_(temp__4092__auto__)) {
              var m = temp__4092__auto__;
              return cljs.core.async.untap.call(null, m, ch__$2);
            } else {
              return null;
            }
          };
        }(mults, ensure_mult);
        cljs.core.async.t24105.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY);
          };
        }(mults, ensure_mult);
        cljs.core.async.t24105.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(mults, ensure_mult) {
          return function(_, topic) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic);
          };
        }(mults, ensure_mult);
        cljs.core.async.t24105.prototype.cljs$core$async$Mux$ = true;
        cljs.core.async.t24105.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return self__.ch;
          };
        }(mults, ensure_mult);
        cljs.core.async.t24105.prototype.cljs$core$IMeta$_meta$arity$1 = function(mults, ensure_mult) {
          return function(_24107) {
            var self__ = this;
            var _24107__$1 = this;
            return self__.meta24106;
          };
        }(mults, ensure_mult);
        cljs.core.async.t24105.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mults, ensure_mult) {
          return function(_24107, meta24106__$1) {
            var self__ = this;
            var _24107__$1 = this;
            return new cljs.core.async.t24105(self__.ensure_mult, self__.mults, self__.buf_fn, self__.topic_fn, self__.ch, self__.pub, meta24106__$1);
          };
        }(mults, ensure_mult);
        cljs.core.async.__GT_t24105 = function(mults, ensure_mult) {
          return function __GT_t24105(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta24106) {
            return new cljs.core.async.t24105(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta24106);
          };
        }(mults, ensure_mult);
      }
      return new cljs.core.async.t24105(ensure_mult, mults, buf_fn, topic_fn, ch, pub, null);
    }();
    var c__18844__auto___24219 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__18845__auto__ = function() {
        var switch__18829__auto__ = function(state_24175) {
          var state_val_24176 = state_24175[1];
          if (state_val_24176 === 1) {
            var state_24175__$1 = state_24175;
            var statearr_24177_24220 = state_24175__$1;
            statearr_24177_24220[2] = null;
            statearr_24177_24220[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_24176 === 2) {
              var state_24175__$1 = state_24175;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_24175__$1, 4, ch);
            } else {
              if (state_val_24176 === 3) {
                var inst_24173 = state_24175[2];
                var state_24175__$1 = state_24175;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_24175__$1, inst_24173);
              } else {
                if (state_val_24176 === 4) {
                  var inst_24110 = state_24175[7];
                  var inst_24110__$1 = state_24175[2];
                  var inst_24111 = inst_24110__$1 == null;
                  var state_24175__$1 = function() {
                    var statearr_24178 = state_24175;
                    statearr_24178[7] = inst_24110__$1;
                    return statearr_24178;
                  }();
                  if (cljs.core.truth_(inst_24111)) {
                    var statearr_24179_24221 = state_24175__$1;
                    statearr_24179_24221[1] = 5;
                  } else {
                    var statearr_24180_24222 = state_24175__$1;
                    statearr_24180_24222[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_24176 === 5) {
                    var inst_24117 = cljs.core.deref.call(null, mults);
                    var inst_24118 = cljs.core.vals.call(null, inst_24117);
                    var inst_24119 = cljs.core.seq.call(null, inst_24118);
                    var inst_24120 = inst_24119;
                    var inst_24121 = null;
                    var inst_24122 = 0;
                    var inst_24123 = 0;
                    var state_24175__$1 = function() {
                      var statearr_24181 = state_24175;
                      statearr_24181[8] = inst_24122;
                      statearr_24181[9] = inst_24123;
                      statearr_24181[10] = inst_24120;
                      statearr_24181[11] = inst_24121;
                      return statearr_24181;
                    }();
                    var statearr_24182_24223 = state_24175__$1;
                    statearr_24182_24223[2] = null;
                    statearr_24182_24223[1] = 8;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_24176 === 6) {
                      var inst_24158 = state_24175[12];
                      var inst_24110 = state_24175[7];
                      var inst_24158__$1 = topic_fn.call(null, inst_24110);
                      var inst_24159 = cljs.core.deref.call(null, mults);
                      var inst_24160 = cljs.core.get.call(null, inst_24159, inst_24158__$1);
                      var inst_24161 = cljs.core.async.muxch_STAR_.call(null, inst_24160);
                      var state_24175__$1 = function() {
                        var statearr_24183 = state_24175;
                        statearr_24183[12] = inst_24158__$1;
                        return statearr_24183;
                      }();
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_24175__$1, 19, inst_24161, inst_24110);
                    } else {
                      if (state_val_24176 === 7) {
                        var inst_24171 = state_24175[2];
                        var state_24175__$1 = state_24175;
                        var statearr_24184_24224 = state_24175__$1;
                        statearr_24184_24224[2] = inst_24171;
                        statearr_24184_24224[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_24176 === 8) {
                          var inst_24122 = state_24175[8];
                          var inst_24123 = state_24175[9];
                          var inst_24125 = inst_24123 < inst_24122;
                          var inst_24126 = inst_24125;
                          var state_24175__$1 = state_24175;
                          if (cljs.core.truth_(inst_24126)) {
                            var statearr_24188_24225 = state_24175__$1;
                            statearr_24188_24225[1] = 10;
                          } else {
                            var statearr_24189_24226 = state_24175__$1;
                            statearr_24189_24226[1] = 11;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_24176 === 9) {
                            var inst_24156 = state_24175[2];
                            var state_24175__$1 = state_24175;
                            var statearr_24190_24227 = state_24175__$1;
                            statearr_24190_24227[2] = inst_24156;
                            statearr_24190_24227[1] = 7;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_24176 === 10) {
                              var inst_24122 = state_24175[8];
                              var inst_24123 = state_24175[9];
                              var inst_24120 = state_24175[10];
                              var inst_24121 = state_24175[11];
                              var inst_24128 = cljs.core._nth.call(null, inst_24121, inst_24123);
                              var inst_24129 = cljs.core.async.muxch_STAR_.call(null, inst_24128);
                              var inst_24130 = cljs.core.async.close_BANG_.call(null, inst_24129);
                              var inst_24131 = inst_24123 + 1;
                              var tmp24185 = inst_24122;
                              var tmp24186 = inst_24120;
                              var tmp24187 = inst_24121;
                              var inst_24120__$1 = tmp24186;
                              var inst_24121__$1 = tmp24187;
                              var inst_24122__$1 = tmp24185;
                              var inst_24123__$1 = inst_24131;
                              var state_24175__$1 = function() {
                                var statearr_24191 = state_24175;
                                statearr_24191[8] = inst_24122__$1;
                                statearr_24191[9] = inst_24123__$1;
                                statearr_24191[10] = inst_24120__$1;
                                statearr_24191[11] = inst_24121__$1;
                                statearr_24191[13] = inst_24130;
                                return statearr_24191;
                              }();
                              var statearr_24192_24228 = state_24175__$1;
                              statearr_24192_24228[2] = null;
                              statearr_24192_24228[1] = 8;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_24176 === 11) {
                                var inst_24120 = state_24175[10];
                                var inst_24134 = state_24175[14];
                                var inst_24134__$1 = cljs.core.seq.call(null, inst_24120);
                                var state_24175__$1 = function() {
                                  var statearr_24193 = state_24175;
                                  statearr_24193[14] = inst_24134__$1;
                                  return statearr_24193;
                                }();
                                if (inst_24134__$1) {
                                  var statearr_24194_24229 = state_24175__$1;
                                  statearr_24194_24229[1] = 13;
                                } else {
                                  var statearr_24195_24230 = state_24175__$1;
                                  statearr_24195_24230[1] = 14;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_24176 === 12) {
                                  var inst_24154 = state_24175[2];
                                  var state_24175__$1 = state_24175;
                                  var statearr_24196_24231 = state_24175__$1;
                                  statearr_24196_24231[2] = inst_24154;
                                  statearr_24196_24231[1] = 9;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_24176 === 13) {
                                    var inst_24134 = state_24175[14];
                                    var inst_24136 = cljs.core.chunked_seq_QMARK_.call(null, inst_24134);
                                    var state_24175__$1 = state_24175;
                                    if (inst_24136) {
                                      var statearr_24197_24232 = state_24175__$1;
                                      statearr_24197_24232[1] = 16;
                                    } else {
                                      var statearr_24198_24233 = state_24175__$1;
                                      statearr_24198_24233[1] = 17;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_24176 === 14) {
                                      var state_24175__$1 = state_24175;
                                      var statearr_24199_24234 = state_24175__$1;
                                      statearr_24199_24234[2] = null;
                                      statearr_24199_24234[1] = 15;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_24176 === 15) {
                                        var inst_24152 = state_24175[2];
                                        var state_24175__$1 = state_24175;
                                        var statearr_24200_24235 = state_24175__$1;
                                        statearr_24200_24235[2] = inst_24152;
                                        statearr_24200_24235[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_24176 === 16) {
                                          var inst_24134 = state_24175[14];
                                          var inst_24138 = cljs.core.chunk_first.call(null, inst_24134);
                                          var inst_24139 = cljs.core.chunk_rest.call(null, inst_24134);
                                          var inst_24140 = cljs.core.count.call(null, inst_24138);
                                          var inst_24120 = inst_24139;
                                          var inst_24121 = inst_24138;
                                          var inst_24122 = inst_24140;
                                          var inst_24123 = 0;
                                          var state_24175__$1 = function() {
                                            var statearr_24201 = state_24175;
                                            statearr_24201[8] = inst_24122;
                                            statearr_24201[9] = inst_24123;
                                            statearr_24201[10] = inst_24120;
                                            statearr_24201[11] = inst_24121;
                                            return statearr_24201;
                                          }();
                                          var statearr_24202_24236 = state_24175__$1;
                                          statearr_24202_24236[2] = null;
                                          statearr_24202_24236[1] = 8;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_24176 === 17) {
                                            var inst_24134 = state_24175[14];
                                            var inst_24143 = cljs.core.first.call(null, inst_24134);
                                            var inst_24144 = cljs.core.async.muxch_STAR_.call(null, inst_24143);
                                            var inst_24145 = cljs.core.async.close_BANG_.call(null, inst_24144);
                                            var inst_24146 = cljs.core.next.call(null, inst_24134);
                                            var inst_24120 = inst_24146;
                                            var inst_24121 = null;
                                            var inst_24122 = 0;
                                            var inst_24123 = 0;
                                            var state_24175__$1 = function() {
                                              var statearr_24203 = state_24175;
                                              statearr_24203[8] = inst_24122;
                                              statearr_24203[9] = inst_24123;
                                              statearr_24203[10] = inst_24120;
                                              statearr_24203[11] = inst_24121;
                                              statearr_24203[15] = inst_24145;
                                              return statearr_24203;
                                            }();
                                            var statearr_24204_24237 = state_24175__$1;
                                            statearr_24204_24237[2] = null;
                                            statearr_24204_24237[1] = 8;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_24176 === 18) {
                                              var inst_24149 = state_24175[2];
                                              var state_24175__$1 = state_24175;
                                              var statearr_24205_24238 = state_24175__$1;
                                              statearr_24205_24238[2] = inst_24149;
                                              statearr_24205_24238[1] = 15;
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_24176 === 19) {
                                                var inst_24163 = state_24175[2];
                                                var state_24175__$1 = state_24175;
                                                if (cljs.core.truth_(inst_24163)) {
                                                  var statearr_24206_24239 = state_24175__$1;
                                                  statearr_24206_24239[1] = 20;
                                                } else {
                                                  var statearr_24207_24240 = state_24175__$1;
                                                  statearr_24207_24240[1] = 21;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } else {
                                                if (state_val_24176 === 20) {
                                                  var state_24175__$1 = state_24175;
                                                  var statearr_24208_24241 = state_24175__$1;
                                                  statearr_24208_24241[2] = null;
                                                  statearr_24208_24241[1] = 22;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                } else {
                                                  if (state_val_24176 === 21) {
                                                    var inst_24158 = state_24175[12];
                                                    var inst_24166 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_24158);
                                                    var state_24175__$1 = state_24175;
                                                    var statearr_24209_24242 = state_24175__$1;
                                                    statearr_24209_24242[2] = inst_24166;
                                                    statearr_24209_24242[1] = 22;
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                  } else {
                                                    if (state_val_24176 === 22) {
                                                      var inst_24168 = state_24175[2];
                                                      var state_24175__$1 = function() {
                                                        var statearr_24210 = state_24175;
                                                        statearr_24210[16] = inst_24168;
                                                        return statearr_24210;
                                                      }();
                                                      var statearr_24211_24243 = state_24175__$1;
                                                      statearr_24211_24243[2] = null;
                                                      statearr_24211_24243[1] = 2;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                    } else {
                                                      return null;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__18829__auto__) {
          return function() {
            var state_machine__18830__auto__ = null;
            var state_machine__18830__auto____0 = function() {
              var statearr_24215 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_24215[0] = state_machine__18830__auto__;
              statearr_24215[1] = 1;
              return statearr_24215;
            };
            var state_machine__18830__auto____1 = function(state_24175) {
              while (true) {
                var ret_value__18831__auto__ = function() {
                  try {
                    while (true) {
                      var result__18832__auto__ = switch__18829__auto__.call(null, state_24175);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__18832__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__18832__auto__;
                      }
                      break;
                    }
                  } catch (e24216) {
                    if (e24216 instanceof Object) {
                      var ex__18833__auto__ = e24216;
                      var statearr_24217_24244 = state_24175;
                      statearr_24217_24244[5] = ex__18833__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_24175);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e24216;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__18831__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__24245 = state_24175;
                  state_24175 = G__24245;
                  continue;
                } else {
                  return ret_value__18831__auto__;
                }
                break;
              }
            };
            state_machine__18830__auto__ = function(state_24175) {
              switch(arguments.length) {
                case 0:
                  return state_machine__18830__auto____0.call(this);
                case 1:
                  return state_machine__18830__auto____1.call(this, state_24175);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__18830__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__18830__auto____0;
            state_machine__18830__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__18830__auto____1;
            return state_machine__18830__auto__;
          }();
        }(switch__18829__auto__);
      }();
      var state__18846__auto__ = function() {
        var statearr_24218 = f__18845__auto__.call(null);
        statearr_24218[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__18844__auto___24219;
        return statearr_24218;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__18846__auto__);
    });
    return p;
  };
  pub = function(ch, topic_fn, buf_fn) {
    switch(arguments.length) {
      case 2:
        return pub__2.call(this, ch, topic_fn);
      case 3:
        return pub__3.call(this, ch, topic_fn, buf_fn);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pub.cljs$core$IFn$_invoke$arity$2 = pub__2;
  pub.cljs$core$IFn$_invoke$arity$3 = pub__3;
  return pub;
}();
cljs.core.async.sub = function() {
  var sub = null;
  var sub__3 = function(p, topic, ch) {
    return sub.call(null, p, topic, ch, true);
  };
  var sub__4 = function(p, topic, ch, close_QMARK_) {
    return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_);
  };
  sub = function(p, topic, ch, close_QMARK_) {
    switch(arguments.length) {
      case 3:
        return sub__3.call(this, p, topic, ch);
      case 4:
        return sub__4.call(this, p, topic, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sub.cljs$core$IFn$_invoke$arity$3 = sub__3;
  sub.cljs$core$IFn$_invoke$arity$4 = sub__4;
  return sub;
}();
cljs.core.async.unsub = function unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch);
};
cljs.core.async.unsub_all = function() {
  var unsub_all = null;
  var unsub_all__1 = function(p) {
    return cljs.core.async.unsub_all_STAR_.call(null, p);
  };
  var unsub_all__2 = function(p, topic) {
    return cljs.core.async.unsub_all_STAR_.call(null, p, topic);
  };
  unsub_all = function(p, topic) {
    switch(arguments.length) {
      case 1:
        return unsub_all__1.call(this, p);
      case 2:
        return unsub_all__2.call(this, p, topic);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all.cljs$core$IFn$_invoke$arity$1 = unsub_all__1;
  unsub_all.cljs$core$IFn$_invoke$arity$2 = unsub_all__2;
  return unsub_all;
}();
cljs.core.async.map = function() {
  var map = null;
  var map__2 = function(f, chs) {
    return map.call(null, f, chs, null);
  };
  var map__3 = function(f, chs, buf_or_n) {
    var chs__$1 = cljs.core.vec.call(null, chs);
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var cnt = cljs.core.count.call(null, chs__$1);
    var rets = cljs.core.object_array.call(null, cnt);
    var dchan = cljs.core.async.chan.call(null, 1);
    var dctr = cljs.core.atom.call(null, null);
    var done = cljs.core.mapv.call(null, function(chs__$1, out, cnt, rets, dchan, dctr) {
      return function(i) {
        return function(chs__$1, out, cnt, rets, dchan, dctr) {
          return function(ret) {
            rets[i] = ret;
            if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
              return cljs.core.async.put_BANG_.call(null, dchan, rets.slice(0));
            } else {
              return null;
            }
          };
        }(chs__$1, out, cnt, rets, dchan, dctr);
      };
    }(chs__$1, out, cnt, rets, dchan, dctr), cljs.core.range.call(null, cnt));
    var c__18844__auto___24382 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__18845__auto__ = function() {
        var switch__18829__auto__ = function(state_24352) {
          var state_val_24353 = state_24352[1];
          if (state_val_24353 === 1) {
            var state_24352__$1 = state_24352;
            var statearr_24354_24383 = state_24352__$1;
            statearr_24354_24383[2] = null;
            statearr_24354_24383[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_24353 === 2) {
              var inst_24315 = cljs.core.reset_BANG_.call(null, dctr, cnt);
              var inst_24316 = 0;
              var state_24352__$1 = function() {
                var statearr_24355 = state_24352;
                statearr_24355[7] = inst_24315;
                statearr_24355[8] = inst_24316;
                return statearr_24355;
              }();
              var statearr_24356_24384 = state_24352__$1;
              statearr_24356_24384[2] = null;
              statearr_24356_24384[1] = 4;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_24353 === 3) {
                var inst_24350 = state_24352[2];
                var state_24352__$1 = state_24352;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_24352__$1, inst_24350);
              } else {
                if (state_val_24353 === 4) {
                  var inst_24316 = state_24352[8];
                  var inst_24318 = inst_24316 < cnt;
                  var state_24352__$1 = state_24352;
                  if (cljs.core.truth_(inst_24318)) {
                    var statearr_24357_24385 = state_24352__$1;
                    statearr_24357_24385[1] = 6;
                  } else {
                    var statearr_24358_24386 = state_24352__$1;
                    statearr_24358_24386[1] = 7;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_24353 === 5) {
                    var inst_24336 = state_24352[2];
                    var state_24352__$1 = function() {
                      var statearr_24359 = state_24352;
                      statearr_24359[9] = inst_24336;
                      return statearr_24359;
                    }();
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_24352__$1, 12, dchan);
                  } else {
                    if (state_val_24353 === 6) {
                      var state_24352__$1 = state_24352;
                      var statearr_24360_24387 = state_24352__$1;
                      statearr_24360_24387[2] = null;
                      statearr_24360_24387[1] = 11;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_24353 === 7) {
                        var state_24352__$1 = state_24352;
                        var statearr_24361_24388 = state_24352__$1;
                        statearr_24361_24388[2] = null;
                        statearr_24361_24388[1] = 8;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_24353 === 8) {
                          var inst_24334 = state_24352[2];
                          var state_24352__$1 = state_24352;
                          var statearr_24362_24389 = state_24352__$1;
                          statearr_24362_24389[2] = inst_24334;
                          statearr_24362_24389[1] = 5;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_24353 === 9) {
                            var inst_24316 = state_24352[8];
                            var inst_24329 = state_24352[2];
                            var inst_24330 = inst_24316 + 1;
                            var inst_24316__$1 = inst_24330;
                            var state_24352__$1 = function() {
                              var statearr_24363 = state_24352;
                              statearr_24363[10] = inst_24329;
                              statearr_24363[8] = inst_24316__$1;
                              return statearr_24363;
                            }();
                            var statearr_24364_24390 = state_24352__$1;
                            statearr_24364_24390[2] = null;
                            statearr_24364_24390[1] = 4;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_24353 === 10) {
                              var inst_24320 = state_24352[2];
                              var inst_24321 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                              var state_24352__$1 = function() {
                                var statearr_24365 = state_24352;
                                statearr_24365[11] = inst_24320;
                                return statearr_24365;
                              }();
                              var statearr_24366_24391 = state_24352__$1;
                              statearr_24366_24391[2] = inst_24321;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_24352__$1);
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_24353 === 11) {
                                var inst_24316 = state_24352[8];
                                var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_24352, 10, Object, null, 9);
                                var inst_24325 = chs__$1.call(null, inst_24316);
                                var inst_24326 = done.call(null, inst_24316);
                                var inst_24327 = cljs.core.async.take_BANG_.call(null, inst_24325, inst_24326);
                                var state_24352__$1 = state_24352;
                                var statearr_24367_24392 = state_24352__$1;
                                statearr_24367_24392[2] = inst_24327;
                                cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_24352__$1);
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_24353 === 12) {
                                  var inst_24338 = state_24352[12];
                                  var inst_24338__$1 = state_24352[2];
                                  var inst_24339 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_24338__$1);
                                  var state_24352__$1 = function() {
                                    var statearr_24368 = state_24352;
                                    statearr_24368[12] = inst_24338__$1;
                                    return statearr_24368;
                                  }();
                                  if (cljs.core.truth_(inst_24339)) {
                                    var statearr_24369_24393 = state_24352__$1;
                                    statearr_24369_24393[1] = 13;
                                  } else {
                                    var statearr_24370_24394 = state_24352__$1;
                                    statearr_24370_24394[1] = 14;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_24353 === 13) {
                                    var inst_24341 = cljs.core.async.close_BANG_.call(null, out);
                                    var state_24352__$1 = state_24352;
                                    var statearr_24371_24395 = state_24352__$1;
                                    statearr_24371_24395[2] = inst_24341;
                                    statearr_24371_24395[1] = 15;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_24353 === 14) {
                                      var inst_24338 = state_24352[12];
                                      var inst_24343 = cljs.core.apply.call(null, f, inst_24338);
                                      var state_24352__$1 = state_24352;
                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_24352__$1, 16, out, inst_24343);
                                    } else {
                                      if (state_val_24353 === 15) {
                                        var inst_24348 = state_24352[2];
                                        var state_24352__$1 = state_24352;
                                        var statearr_24372_24396 = state_24352__$1;
                                        statearr_24372_24396[2] = inst_24348;
                                        statearr_24372_24396[1] = 3;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_24353 === 16) {
                                          var inst_24345 = state_24352[2];
                                          var state_24352__$1 = function() {
                                            var statearr_24373 = state_24352;
                                            statearr_24373[13] = inst_24345;
                                            return statearr_24373;
                                          }();
                                          var statearr_24374_24397 = state_24352__$1;
                                          statearr_24374_24397[2] = null;
                                          statearr_24374_24397[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__18829__auto__) {
          return function() {
            var state_machine__18830__auto__ = null;
            var state_machine__18830__auto____0 = function() {
              var statearr_24378 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_24378[0] = state_machine__18830__auto__;
              statearr_24378[1] = 1;
              return statearr_24378;
            };
            var state_machine__18830__auto____1 = function(state_24352) {
              while (true) {
                var ret_value__18831__auto__ = function() {
                  try {
                    while (true) {
                      var result__18832__auto__ = switch__18829__auto__.call(null, state_24352);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__18832__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__18832__auto__;
                      }
                      break;
                    }
                  } catch (e24379) {
                    if (e24379 instanceof Object) {
                      var ex__18833__auto__ = e24379;
                      var statearr_24380_24398 = state_24352;
                      statearr_24380_24398[5] = ex__18833__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_24352);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e24379;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__18831__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__24399 = state_24352;
                  state_24352 = G__24399;
                  continue;
                } else {
                  return ret_value__18831__auto__;
                }
                break;
              }
            };
            state_machine__18830__auto__ = function(state_24352) {
              switch(arguments.length) {
                case 0:
                  return state_machine__18830__auto____0.call(this);
                case 1:
                  return state_machine__18830__auto____1.call(this, state_24352);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__18830__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__18830__auto____0;
            state_machine__18830__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__18830__auto____1;
            return state_machine__18830__auto__;
          }();
        }(switch__18829__auto__);
      }();
      var state__18846__auto__ = function() {
        var statearr_24381 = f__18845__auto__.call(null);
        statearr_24381[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__18844__auto___24382;
        return statearr_24381;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__18846__auto__);
    });
    return out;
  };
  map = function(f, chs, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, chs);
      case 3:
        return map__3.call(this, f, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  return map;
}();
cljs.core.async.merge = function() {
  var merge = null;
  var merge__1 = function(chs) {
    return merge.call(null, chs, null);
  };
  var merge__2 = function(chs, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__18844__auto___24507 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__18845__auto__ = function() {
        var switch__18829__auto__ = function(state_24483) {
          var state_val_24484 = state_24483[1];
          if (state_val_24484 === 1) {
            var inst_24454 = cljs.core.vec.call(null, chs);
            var inst_24455 = inst_24454;
            var state_24483__$1 = function() {
              var statearr_24485 = state_24483;
              statearr_24485[7] = inst_24455;
              return statearr_24485;
            }();
            var statearr_24486_24508 = state_24483__$1;
            statearr_24486_24508[2] = null;
            statearr_24486_24508[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_24484 === 2) {
              var inst_24455 = state_24483[7];
              var inst_24457 = cljs.core.count.call(null, inst_24455);
              var inst_24458 = inst_24457 > 0;
              var state_24483__$1 = state_24483;
              if (cljs.core.truth_(inst_24458)) {
                var statearr_24487_24509 = state_24483__$1;
                statearr_24487_24509[1] = 4;
              } else {
                var statearr_24488_24510 = state_24483__$1;
                statearr_24488_24510[1] = 5;
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_24484 === 3) {
                var inst_24481 = state_24483[2];
                var state_24483__$1 = state_24483;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_24483__$1, inst_24481);
              } else {
                if (state_val_24484 === 4) {
                  var inst_24455 = state_24483[7];
                  var state_24483__$1 = state_24483;
                  return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_24483__$1, 7, inst_24455);
                } else {
                  if (state_val_24484 === 5) {
                    var inst_24477 = cljs.core.async.close_BANG_.call(null, out);
                    var state_24483__$1 = state_24483;
                    var statearr_24489_24511 = state_24483__$1;
                    statearr_24489_24511[2] = inst_24477;
                    statearr_24489_24511[1] = 6;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_24484 === 6) {
                      var inst_24479 = state_24483[2];
                      var state_24483__$1 = state_24483;
                      var statearr_24490_24512 = state_24483__$1;
                      statearr_24490_24512[2] = inst_24479;
                      statearr_24490_24512[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_24484 === 7) {
                        var inst_24463 = state_24483[8];
                        var inst_24462 = state_24483[9];
                        var inst_24462__$1 = state_24483[2];
                        var inst_24463__$1 = cljs.core.nth.call(null, inst_24462__$1, 0, null);
                        var inst_24464 = cljs.core.nth.call(null, inst_24462__$1, 1, null);
                        var inst_24465 = inst_24463__$1 == null;
                        var state_24483__$1 = function() {
                          var statearr_24491 = state_24483;
                          statearr_24491[8] = inst_24463__$1;
                          statearr_24491[10] = inst_24464;
                          statearr_24491[9] = inst_24462__$1;
                          return statearr_24491;
                        }();
                        if (cljs.core.truth_(inst_24465)) {
                          var statearr_24492_24513 = state_24483__$1;
                          statearr_24492_24513[1] = 8;
                        } else {
                          var statearr_24493_24514 = state_24483__$1;
                          statearr_24493_24514[1] = 9;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_24484 === 8) {
                          var inst_24455 = state_24483[7];
                          var inst_24463 = state_24483[8];
                          var inst_24464 = state_24483[10];
                          var inst_24462 = state_24483[9];
                          var inst_24467 = function() {
                            var c = inst_24464;
                            var v = inst_24463;
                            var vec__24460 = inst_24462;
                            var cs = inst_24455;
                            return function(c, v, vec__24460, cs, inst_24455, inst_24463, inst_24464, inst_24462, state_val_24484) {
                              return function(p1__24400_SHARP_) {
                                return cljs.core.not_EQ_.call(null, c, p1__24400_SHARP_);
                              };
                            }(c, v, vec__24460, cs, inst_24455, inst_24463, inst_24464, inst_24462, state_val_24484);
                          }();
                          var inst_24468 = cljs.core.filterv.call(null, inst_24467, inst_24455);
                          var inst_24455__$1 = inst_24468;
                          var state_24483__$1 = function() {
                            var statearr_24494 = state_24483;
                            statearr_24494[7] = inst_24455__$1;
                            return statearr_24494;
                          }();
                          var statearr_24495_24515 = state_24483__$1;
                          statearr_24495_24515[2] = null;
                          statearr_24495_24515[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_24484 === 9) {
                            var inst_24463 = state_24483[8];
                            var state_24483__$1 = state_24483;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_24483__$1, 11, out, inst_24463);
                          } else {
                            if (state_val_24484 === 10) {
                              var inst_24475 = state_24483[2];
                              var state_24483__$1 = state_24483;
                              var statearr_24497_24516 = state_24483__$1;
                              statearr_24497_24516[2] = inst_24475;
                              statearr_24497_24516[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_24484 === 11) {
                                var inst_24455 = state_24483[7];
                                var inst_24472 = state_24483[2];
                                var tmp24496 = inst_24455;
                                var inst_24455__$1 = tmp24496;
                                var state_24483__$1 = function() {
                                  var statearr_24498 = state_24483;
                                  statearr_24498[7] = inst_24455__$1;
                                  statearr_24498[11] = inst_24472;
                                  return statearr_24498;
                                }();
                                var statearr_24499_24517 = state_24483__$1;
                                statearr_24499_24517[2] = null;
                                statearr_24499_24517[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__18829__auto__) {
          return function() {
            var state_machine__18830__auto__ = null;
            var state_machine__18830__auto____0 = function() {
              var statearr_24503 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_24503[0] = state_machine__18830__auto__;
              statearr_24503[1] = 1;
              return statearr_24503;
            };
            var state_machine__18830__auto____1 = function(state_24483) {
              while (true) {
                var ret_value__18831__auto__ = function() {
                  try {
                    while (true) {
                      var result__18832__auto__ = switch__18829__auto__.call(null, state_24483);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__18832__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__18832__auto__;
                      }
                      break;
                    }
                  } catch (e24504) {
                    if (e24504 instanceof Object) {
                      var ex__18833__auto__ = e24504;
                      var statearr_24505_24518 = state_24483;
                      statearr_24505_24518[5] = ex__18833__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_24483);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e24504;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__18831__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__24519 = state_24483;
                  state_24483 = G__24519;
                  continue;
                } else {
                  return ret_value__18831__auto__;
                }
                break;
              }
            };
            state_machine__18830__auto__ = function(state_24483) {
              switch(arguments.length) {
                case 0:
                  return state_machine__18830__auto____0.call(this);
                case 1:
                  return state_machine__18830__auto____1.call(this, state_24483);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__18830__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__18830__auto____0;
            state_machine__18830__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__18830__auto____1;
            return state_machine__18830__auto__;
          }();
        }(switch__18829__auto__);
      }();
      var state__18846__auto__ = function() {
        var statearr_24506 = f__18845__auto__.call(null);
        statearr_24506[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__18844__auto___24507;
        return statearr_24506;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__18846__auto__);
    });
    return out;
  };
  merge = function(chs, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return merge__1.call(this, chs);
      case 2:
        return merge__2.call(this, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  merge.cljs$core$IFn$_invoke$arity$1 = merge__1;
  merge.cljs$core$IFn$_invoke$arity$2 = merge__2;
  return merge;
}();
cljs.core.async.into = function into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch);
};
cljs.core.async.take = function() {
  var take = null;
  var take__2 = function(n, ch) {
    return take.call(null, n, ch, null);
  };
  var take__3 = function(n, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__18844__auto___24612 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__18845__auto__ = function() {
        var switch__18829__auto__ = function(state_24589) {
          var state_val_24590 = state_24589[1];
          if (state_val_24590 === 1) {
            var inst_24566 = 0;
            var state_24589__$1 = function() {
              var statearr_24591 = state_24589;
              statearr_24591[7] = inst_24566;
              return statearr_24591;
            }();
            var statearr_24592_24613 = state_24589__$1;
            statearr_24592_24613[2] = null;
            statearr_24592_24613[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_24590 === 2) {
              var inst_24566 = state_24589[7];
              var inst_24568 = inst_24566 < n;
              var state_24589__$1 = state_24589;
              if (cljs.core.truth_(inst_24568)) {
                var statearr_24593_24614 = state_24589__$1;
                statearr_24593_24614[1] = 4;
              } else {
                var statearr_24594_24615 = state_24589__$1;
                statearr_24594_24615[1] = 5;
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_24590 === 3) {
                var inst_24586 = state_24589[2];
                var inst_24587 = cljs.core.async.close_BANG_.call(null, out);
                var state_24589__$1 = function() {
                  var statearr_24595 = state_24589;
                  statearr_24595[8] = inst_24586;
                  return statearr_24595;
                }();
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_24589__$1, inst_24587);
              } else {
                if (state_val_24590 === 4) {
                  var state_24589__$1 = state_24589;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_24589__$1, 7, ch);
                } else {
                  if (state_val_24590 === 5) {
                    var state_24589__$1 = state_24589;
                    var statearr_24596_24616 = state_24589__$1;
                    statearr_24596_24616[2] = null;
                    statearr_24596_24616[1] = 6;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_24590 === 6) {
                      var inst_24584 = state_24589[2];
                      var state_24589__$1 = state_24589;
                      var statearr_24597_24617 = state_24589__$1;
                      statearr_24597_24617[2] = inst_24584;
                      statearr_24597_24617[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_24590 === 7) {
                        var inst_24571 = state_24589[9];
                        var inst_24571__$1 = state_24589[2];
                        var inst_24572 = inst_24571__$1 == null;
                        var inst_24573 = cljs.core.not.call(null, inst_24572);
                        var state_24589__$1 = function() {
                          var statearr_24598 = state_24589;
                          statearr_24598[9] = inst_24571__$1;
                          return statearr_24598;
                        }();
                        if (inst_24573) {
                          var statearr_24599_24618 = state_24589__$1;
                          statearr_24599_24618[1] = 8;
                        } else {
                          var statearr_24600_24619 = state_24589__$1;
                          statearr_24600_24619[1] = 9;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_24590 === 8) {
                          var inst_24571 = state_24589[9];
                          var state_24589__$1 = state_24589;
                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_24589__$1, 11, out, inst_24571);
                        } else {
                          if (state_val_24590 === 9) {
                            var state_24589__$1 = state_24589;
                            var statearr_24601_24620 = state_24589__$1;
                            statearr_24601_24620[2] = null;
                            statearr_24601_24620[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_24590 === 10) {
                              var inst_24581 = state_24589[2];
                              var state_24589__$1 = state_24589;
                              var statearr_24602_24621 = state_24589__$1;
                              statearr_24602_24621[2] = inst_24581;
                              statearr_24602_24621[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_24590 === 11) {
                                var inst_24566 = state_24589[7];
                                var inst_24576 = state_24589[2];
                                var inst_24577 = inst_24566 + 1;
                                var inst_24566__$1 = inst_24577;
                                var state_24589__$1 = function() {
                                  var statearr_24603 = state_24589;
                                  statearr_24603[10] = inst_24576;
                                  statearr_24603[7] = inst_24566__$1;
                                  return statearr_24603;
                                }();
                                var statearr_24604_24622 = state_24589__$1;
                                statearr_24604_24622[2] = null;
                                statearr_24604_24622[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__18829__auto__) {
          return function() {
            var state_machine__18830__auto__ = null;
            var state_machine__18830__auto____0 = function() {
              var statearr_24608 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_24608[0] = state_machine__18830__auto__;
              statearr_24608[1] = 1;
              return statearr_24608;
            };
            var state_machine__18830__auto____1 = function(state_24589) {
              while (true) {
                var ret_value__18831__auto__ = function() {
                  try {
                    while (true) {
                      var result__18832__auto__ = switch__18829__auto__.call(null, state_24589);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__18832__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__18832__auto__;
                      }
                      break;
                    }
                  } catch (e24609) {
                    if (e24609 instanceof Object) {
                      var ex__18833__auto__ = e24609;
                      var statearr_24610_24623 = state_24589;
                      statearr_24610_24623[5] = ex__18833__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_24589);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e24609;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__18831__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__24624 = state_24589;
                  state_24589 = G__24624;
                  continue;
                } else {
                  return ret_value__18831__auto__;
                }
                break;
              }
            };
            state_machine__18830__auto__ = function(state_24589) {
              switch(arguments.length) {
                case 0:
                  return state_machine__18830__auto____0.call(this);
                case 1:
                  return state_machine__18830__auto____1.call(this, state_24589);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__18830__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__18830__auto____0;
            state_machine__18830__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__18830__auto____1;
            return state_machine__18830__auto__;
          }();
        }(switch__18829__auto__);
      }();
      var state__18846__auto__ = function() {
        var statearr_24611 = f__18845__auto__.call(null);
        statearr_24611[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__18844__auto___24612;
        return statearr_24611;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__18846__auto__);
    });
    return out;
  };
  take = function(n, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return take__2.call(this, n, ch);
      case 3:
        return take__3.call(this, n, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take.cljs$core$IFn$_invoke$arity$2 = take__2;
  take.cljs$core$IFn$_invoke$arity$3 = take__3;
  return take;
}();
cljs.core.async.unique = function() {
  var unique = null;
  var unique__1 = function(ch) {
    return unique.call(null, ch, null);
  };
  var unique__2 = function(ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__18844__auto___24721 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__18845__auto__ = function() {
        var switch__18829__auto__ = function(state_24696) {
          var state_val_24697 = state_24696[1];
          if (state_val_24697 === 1) {
            var inst_24673 = null;
            var state_24696__$1 = function() {
              var statearr_24698 = state_24696;
              statearr_24698[7] = inst_24673;
              return statearr_24698;
            }();
            var statearr_24699_24722 = state_24696__$1;
            statearr_24699_24722[2] = null;
            statearr_24699_24722[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_24697 === 2) {
              var state_24696__$1 = state_24696;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_24696__$1, 4, ch);
            } else {
              if (state_val_24697 === 3) {
                var inst_24693 = state_24696[2];
                var inst_24694 = cljs.core.async.close_BANG_.call(null, out);
                var state_24696__$1 = function() {
                  var statearr_24700 = state_24696;
                  statearr_24700[8] = inst_24693;
                  return statearr_24700;
                }();
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_24696__$1, inst_24694);
              } else {
                if (state_val_24697 === 4) {
                  var inst_24676 = state_24696[9];
                  var inst_24676__$1 = state_24696[2];
                  var inst_24677 = inst_24676__$1 == null;
                  var inst_24678 = cljs.core.not.call(null, inst_24677);
                  var state_24696__$1 = function() {
                    var statearr_24701 = state_24696;
                    statearr_24701[9] = inst_24676__$1;
                    return statearr_24701;
                  }();
                  if (inst_24678) {
                    var statearr_24702_24723 = state_24696__$1;
                    statearr_24702_24723[1] = 5;
                  } else {
                    var statearr_24703_24724 = state_24696__$1;
                    statearr_24703_24724[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_24697 === 5) {
                    var inst_24676 = state_24696[9];
                    var inst_24673 = state_24696[7];
                    var inst_24680 = cljs.core._EQ_.call(null, inst_24676, inst_24673);
                    var state_24696__$1 = state_24696;
                    if (inst_24680) {
                      var statearr_24704_24725 = state_24696__$1;
                      statearr_24704_24725[1] = 8;
                    } else {
                      var statearr_24705_24726 = state_24696__$1;
                      statearr_24705_24726[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_24697 === 6) {
                      var state_24696__$1 = state_24696;
                      var statearr_24707_24727 = state_24696__$1;
                      statearr_24707_24727[2] = null;
                      statearr_24707_24727[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_24697 === 7) {
                        var inst_24691 = state_24696[2];
                        var state_24696__$1 = state_24696;
                        var statearr_24708_24728 = state_24696__$1;
                        statearr_24708_24728[2] = inst_24691;
                        statearr_24708_24728[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_24697 === 8) {
                          var inst_24673 = state_24696[7];
                          var tmp24706 = inst_24673;
                          var inst_24673__$1 = tmp24706;
                          var state_24696__$1 = function() {
                            var statearr_24709 = state_24696;
                            statearr_24709[7] = inst_24673__$1;
                            return statearr_24709;
                          }();
                          var statearr_24710_24729 = state_24696__$1;
                          statearr_24710_24729[2] = null;
                          statearr_24710_24729[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_24697 === 9) {
                            var inst_24676 = state_24696[9];
                            var state_24696__$1 = state_24696;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_24696__$1, 11, out, inst_24676);
                          } else {
                            if (state_val_24697 === 10) {
                              var inst_24688 = state_24696[2];
                              var state_24696__$1 = state_24696;
                              var statearr_24711_24730 = state_24696__$1;
                              statearr_24711_24730[2] = inst_24688;
                              statearr_24711_24730[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_24697 === 11) {
                                var inst_24676 = state_24696[9];
                                var inst_24685 = state_24696[2];
                                var inst_24673 = inst_24676;
                                var state_24696__$1 = function() {
                                  var statearr_24712 = state_24696;
                                  statearr_24712[10] = inst_24685;
                                  statearr_24712[7] = inst_24673;
                                  return statearr_24712;
                                }();
                                var statearr_24713_24731 = state_24696__$1;
                                statearr_24713_24731[2] = null;
                                statearr_24713_24731[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__18829__auto__) {
          return function() {
            var state_machine__18830__auto__ = null;
            var state_machine__18830__auto____0 = function() {
              var statearr_24717 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_24717[0] = state_machine__18830__auto__;
              statearr_24717[1] = 1;
              return statearr_24717;
            };
            var state_machine__18830__auto____1 = function(state_24696) {
              while (true) {
                var ret_value__18831__auto__ = function() {
                  try {
                    while (true) {
                      var result__18832__auto__ = switch__18829__auto__.call(null, state_24696);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__18832__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__18832__auto__;
                      }
                      break;
                    }
                  } catch (e24718) {
                    if (e24718 instanceof Object) {
                      var ex__18833__auto__ = e24718;
                      var statearr_24719_24732 = state_24696;
                      statearr_24719_24732[5] = ex__18833__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_24696);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e24718;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__18831__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__24733 = state_24696;
                  state_24696 = G__24733;
                  continue;
                } else {
                  return ret_value__18831__auto__;
                }
                break;
              }
            };
            state_machine__18830__auto__ = function(state_24696) {
              switch(arguments.length) {
                case 0:
                  return state_machine__18830__auto____0.call(this);
                case 1:
                  return state_machine__18830__auto____1.call(this, state_24696);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__18830__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__18830__auto____0;
            state_machine__18830__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__18830__auto____1;
            return state_machine__18830__auto__;
          }();
        }(switch__18829__auto__);
      }();
      var state__18846__auto__ = function() {
        var statearr_24720 = f__18845__auto__.call(null);
        statearr_24720[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__18844__auto___24721;
        return statearr_24720;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__18846__auto__);
    });
    return out;
  };
  unique = function(ch, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return unique__1.call(this, ch);
      case 2:
        return unique__2.call(this, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unique.cljs$core$IFn$_invoke$arity$1 = unique__1;
  unique.cljs$core$IFn$_invoke$arity$2 = unique__2;
  return unique;
}();
cljs.core.async.partition = function() {
  var partition = null;
  var partition__2 = function(n, ch) {
    return partition.call(null, n, ch, null);
  };
  var partition__3 = function(n, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__18844__auto___24868 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__18845__auto__ = function() {
        var switch__18829__auto__ = function(state_24838) {
          var state_val_24839 = state_24838[1];
          if (state_val_24839 === 1) {
            var inst_24801 = new Array(n);
            var inst_24802 = inst_24801;
            var inst_24803 = 0;
            var state_24838__$1 = function() {
              var statearr_24840 = state_24838;
              statearr_24840[7] = inst_24802;
              statearr_24840[8] = inst_24803;
              return statearr_24840;
            }();
            var statearr_24841_24869 = state_24838__$1;
            statearr_24841_24869[2] = null;
            statearr_24841_24869[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_24839 === 2) {
              var state_24838__$1 = state_24838;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_24838__$1, 4, ch);
            } else {
              if (state_val_24839 === 3) {
                var inst_24836 = state_24838[2];
                var state_24838__$1 = state_24838;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_24838__$1, inst_24836);
              } else {
                if (state_val_24839 === 4) {
                  var inst_24806 = state_24838[9];
                  var inst_24806__$1 = state_24838[2];
                  var inst_24807 = inst_24806__$1 == null;
                  var inst_24808 = cljs.core.not.call(null, inst_24807);
                  var state_24838__$1 = function() {
                    var statearr_24842 = state_24838;
                    statearr_24842[9] = inst_24806__$1;
                    return statearr_24842;
                  }();
                  if (inst_24808) {
                    var statearr_24843_24870 = state_24838__$1;
                    statearr_24843_24870[1] = 5;
                  } else {
                    var statearr_24844_24871 = state_24838__$1;
                    statearr_24844_24871[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_24839 === 5) {
                    var inst_24802 = state_24838[7];
                    var inst_24803 = state_24838[8];
                    var inst_24806 = state_24838[9];
                    var inst_24811 = state_24838[10];
                    var inst_24810 = inst_24802[inst_24803] = inst_24806;
                    var inst_24811__$1 = inst_24803 + 1;
                    var inst_24812 = inst_24811__$1 < n;
                    var state_24838__$1 = function() {
                      var statearr_24845 = state_24838;
                      statearr_24845[11] = inst_24810;
                      statearr_24845[10] = inst_24811__$1;
                      return statearr_24845;
                    }();
                    if (cljs.core.truth_(inst_24812)) {
                      var statearr_24846_24872 = state_24838__$1;
                      statearr_24846_24872[1] = 8;
                    } else {
                      var statearr_24847_24873 = state_24838__$1;
                      statearr_24847_24873[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_24839 === 6) {
                      var inst_24803 = state_24838[8];
                      var inst_24824 = inst_24803 > 0;
                      var state_24838__$1 = state_24838;
                      if (cljs.core.truth_(inst_24824)) {
                        var statearr_24849_24874 = state_24838__$1;
                        statearr_24849_24874[1] = 12;
                      } else {
                        var statearr_24850_24875 = state_24838__$1;
                        statearr_24850_24875[1] = 13;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_24839 === 7) {
                        var inst_24834 = state_24838[2];
                        var state_24838__$1 = state_24838;
                        var statearr_24851_24876 = state_24838__$1;
                        statearr_24851_24876[2] = inst_24834;
                        statearr_24851_24876[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_24839 === 8) {
                          var inst_24802 = state_24838[7];
                          var inst_24811 = state_24838[10];
                          var tmp24848 = inst_24802;
                          var inst_24802__$1 = tmp24848;
                          var inst_24803 = inst_24811;
                          var state_24838__$1 = function() {
                            var statearr_24852 = state_24838;
                            statearr_24852[7] = inst_24802__$1;
                            statearr_24852[8] = inst_24803;
                            return statearr_24852;
                          }();
                          var statearr_24853_24877 = state_24838__$1;
                          statearr_24853_24877[2] = null;
                          statearr_24853_24877[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_24839 === 9) {
                            var inst_24802 = state_24838[7];
                            var inst_24816 = cljs.core.vec.call(null, inst_24802);
                            var state_24838__$1 = state_24838;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_24838__$1, 11, out, inst_24816);
                          } else {
                            if (state_val_24839 === 10) {
                              var inst_24822 = state_24838[2];
                              var state_24838__$1 = state_24838;
                              var statearr_24854_24878 = state_24838__$1;
                              statearr_24854_24878[2] = inst_24822;
                              statearr_24854_24878[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_24839 === 11) {
                                var inst_24818 = state_24838[2];
                                var inst_24819 = new Array(n);
                                var inst_24802 = inst_24819;
                                var inst_24803 = 0;
                                var state_24838__$1 = function() {
                                  var statearr_24855 = state_24838;
                                  statearr_24855[12] = inst_24818;
                                  statearr_24855[7] = inst_24802;
                                  statearr_24855[8] = inst_24803;
                                  return statearr_24855;
                                }();
                                var statearr_24856_24879 = state_24838__$1;
                                statearr_24856_24879[2] = null;
                                statearr_24856_24879[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_24839 === 12) {
                                  var inst_24802 = state_24838[7];
                                  var inst_24826 = cljs.core.vec.call(null, inst_24802);
                                  var state_24838__$1 = state_24838;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_24838__$1, 15, out, inst_24826);
                                } else {
                                  if (state_val_24839 === 13) {
                                    var state_24838__$1 = state_24838;
                                    var statearr_24857_24880 = state_24838__$1;
                                    statearr_24857_24880[2] = null;
                                    statearr_24857_24880[1] = 14;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_24839 === 14) {
                                      var inst_24831 = state_24838[2];
                                      var inst_24832 = cljs.core.async.close_BANG_.call(null, out);
                                      var state_24838__$1 = function() {
                                        var statearr_24858 = state_24838;
                                        statearr_24858[13] = inst_24831;
                                        return statearr_24858;
                                      }();
                                      var statearr_24859_24881 = state_24838__$1;
                                      statearr_24859_24881[2] = inst_24832;
                                      statearr_24859_24881[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_24839 === 15) {
                                        var inst_24828 = state_24838[2];
                                        var state_24838__$1 = state_24838;
                                        var statearr_24860_24882 = state_24838__$1;
                                        statearr_24860_24882[2] = inst_24828;
                                        statearr_24860_24882[1] = 14;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__18829__auto__) {
          return function() {
            var state_machine__18830__auto__ = null;
            var state_machine__18830__auto____0 = function() {
              var statearr_24864 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_24864[0] = state_machine__18830__auto__;
              statearr_24864[1] = 1;
              return statearr_24864;
            };
            var state_machine__18830__auto____1 = function(state_24838) {
              while (true) {
                var ret_value__18831__auto__ = function() {
                  try {
                    while (true) {
                      var result__18832__auto__ = switch__18829__auto__.call(null, state_24838);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__18832__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__18832__auto__;
                      }
                      break;
                    }
                  } catch (e24865) {
                    if (e24865 instanceof Object) {
                      var ex__18833__auto__ = e24865;
                      var statearr_24866_24883 = state_24838;
                      statearr_24866_24883[5] = ex__18833__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_24838);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e24865;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__18831__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__24884 = state_24838;
                  state_24838 = G__24884;
                  continue;
                } else {
                  return ret_value__18831__auto__;
                }
                break;
              }
            };
            state_machine__18830__auto__ = function(state_24838) {
              switch(arguments.length) {
                case 0:
                  return state_machine__18830__auto____0.call(this);
                case 1:
                  return state_machine__18830__auto____1.call(this, state_24838);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__18830__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__18830__auto____0;
            state_machine__18830__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__18830__auto____1;
            return state_machine__18830__auto__;
          }();
        }(switch__18829__auto__);
      }();
      var state__18846__auto__ = function() {
        var statearr_24867 = f__18845__auto__.call(null);
        statearr_24867[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__18844__auto___24868;
        return statearr_24867;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__18846__auto__);
    });
    return out;
  };
  partition = function(n, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, ch);
      case 3:
        return partition__3.call(this, n, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  return partition;
}();
cljs.core.async.partition_by = function() {
  var partition_by = null;
  var partition_by__2 = function(f, ch) {
    return partition_by.call(null, f, ch, null);
  };
  var partition_by__3 = function(f, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__18844__auto___25027 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__18845__auto__ = function() {
        var switch__18829__auto__ = function(state_24997) {
          var state_val_24998 = state_24997[1];
          if (state_val_24998 === 1) {
            var inst_24956 = [];
            var inst_24957 = inst_24956;
            var inst_24958 = new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", 4382193538);
            var state_24997__$1 = function() {
              var statearr_24999 = state_24997;
              statearr_24999[7] = inst_24958;
              statearr_24999[8] = inst_24957;
              return statearr_24999;
            }();
            var statearr_25000_25028 = state_24997__$1;
            statearr_25000_25028[2] = null;
            statearr_25000_25028[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_24998 === 2) {
              var state_24997__$1 = state_24997;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_24997__$1, 4, ch);
            } else {
              if (state_val_24998 === 3) {
                var inst_24995 = state_24997[2];
                var state_24997__$1 = state_24997;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_24997__$1, inst_24995);
              } else {
                if (state_val_24998 === 4) {
                  var inst_24961 = state_24997[9];
                  var inst_24961__$1 = state_24997[2];
                  var inst_24962 = inst_24961__$1 == null;
                  var inst_24963 = cljs.core.not.call(null, inst_24962);
                  var state_24997__$1 = function() {
                    var statearr_25001 = state_24997;
                    statearr_25001[9] = inst_24961__$1;
                    return statearr_25001;
                  }();
                  if (inst_24963) {
                    var statearr_25002_25029 = state_24997__$1;
                    statearr_25002_25029[1] = 5;
                  } else {
                    var statearr_25003_25030 = state_24997__$1;
                    statearr_25003_25030[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_24998 === 5) {
                    var inst_24965 = state_24997[10];
                    var inst_24961 = state_24997[9];
                    var inst_24958 = state_24997[7];
                    var inst_24965__$1 = f.call(null, inst_24961);
                    var inst_24966 = cljs.core._EQ_.call(null, inst_24965__$1, inst_24958);
                    var inst_24967 = cljs.core.keyword_identical_QMARK_.call(null, inst_24958, new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", 4382193538));
                    var inst_24968 = inst_24966 || inst_24967;
                    var state_24997__$1 = function() {
                      var statearr_25004 = state_24997;
                      statearr_25004[10] = inst_24965__$1;
                      return statearr_25004;
                    }();
                    if (cljs.core.truth_(inst_24968)) {
                      var statearr_25005_25031 = state_24997__$1;
                      statearr_25005_25031[1] = 8;
                    } else {
                      var statearr_25006_25032 = state_24997__$1;
                      statearr_25006_25032[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_24998 === 6) {
                      var inst_24957 = state_24997[8];
                      var inst_24982 = inst_24957.length;
                      var inst_24983 = inst_24982 > 0;
                      var state_24997__$1 = state_24997;
                      if (cljs.core.truth_(inst_24983)) {
                        var statearr_25008_25033 = state_24997__$1;
                        statearr_25008_25033[1] = 12;
                      } else {
                        var statearr_25009_25034 = state_24997__$1;
                        statearr_25009_25034[1] = 13;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_24998 === 7) {
                        var inst_24993 = state_24997[2];
                        var state_24997__$1 = state_24997;
                        var statearr_25010_25035 = state_24997__$1;
                        statearr_25010_25035[2] = inst_24993;
                        statearr_25010_25035[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_24998 === 8) {
                          var inst_24965 = state_24997[10];
                          var inst_24961 = state_24997[9];
                          var inst_24957 = state_24997[8];
                          var inst_24970 = inst_24957.push(inst_24961);
                          var tmp25007 = inst_24957;
                          var inst_24957__$1 = tmp25007;
                          var inst_24958 = inst_24965;
                          var state_24997__$1 = function() {
                            var statearr_25011 = state_24997;
                            statearr_25011[11] = inst_24970;
                            statearr_25011[7] = inst_24958;
                            statearr_25011[8] = inst_24957__$1;
                            return statearr_25011;
                          }();
                          var statearr_25012_25036 = state_24997__$1;
                          statearr_25012_25036[2] = null;
                          statearr_25012_25036[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_24998 === 9) {
                            var inst_24957 = state_24997[8];
                            var inst_24973 = cljs.core.vec.call(null, inst_24957);
                            var state_24997__$1 = state_24997;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_24997__$1, 11, out, inst_24973);
                          } else {
                            if (state_val_24998 === 10) {
                              var inst_24980 = state_24997[2];
                              var state_24997__$1 = state_24997;
                              var statearr_25013_25037 = state_24997__$1;
                              statearr_25013_25037[2] = inst_24980;
                              statearr_25013_25037[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_24998 === 11) {
                                var inst_24965 = state_24997[10];
                                var inst_24961 = state_24997[9];
                                var inst_24975 = state_24997[2];
                                var inst_24976 = [];
                                var inst_24977 = inst_24976.push(inst_24961);
                                var inst_24957 = inst_24976;
                                var inst_24958 = inst_24965;
                                var state_24997__$1 = function() {
                                  var statearr_25014 = state_24997;
                                  statearr_25014[7] = inst_24958;
                                  statearr_25014[8] = inst_24957;
                                  statearr_25014[12] = inst_24975;
                                  statearr_25014[13] = inst_24977;
                                  return statearr_25014;
                                }();
                                var statearr_25015_25038 = state_24997__$1;
                                statearr_25015_25038[2] = null;
                                statearr_25015_25038[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_24998 === 12) {
                                  var inst_24957 = state_24997[8];
                                  var inst_24985 = cljs.core.vec.call(null, inst_24957);
                                  var state_24997__$1 = state_24997;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_24997__$1, 15, out, inst_24985);
                                } else {
                                  if (state_val_24998 === 13) {
                                    var state_24997__$1 = state_24997;
                                    var statearr_25016_25039 = state_24997__$1;
                                    statearr_25016_25039[2] = null;
                                    statearr_25016_25039[1] = 14;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_24998 === 14) {
                                      var inst_24990 = state_24997[2];
                                      var inst_24991 = cljs.core.async.close_BANG_.call(null, out);
                                      var state_24997__$1 = function() {
                                        var statearr_25017 = state_24997;
                                        statearr_25017[14] = inst_24990;
                                        return statearr_25017;
                                      }();
                                      var statearr_25018_25040 = state_24997__$1;
                                      statearr_25018_25040[2] = inst_24991;
                                      statearr_25018_25040[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_24998 === 15) {
                                        var inst_24987 = state_24997[2];
                                        var state_24997__$1 = state_24997;
                                        var statearr_25019_25041 = state_24997__$1;
                                        statearr_25019_25041[2] = inst_24987;
                                        statearr_25019_25041[1] = 14;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__18829__auto__) {
          return function() {
            var state_machine__18830__auto__ = null;
            var state_machine__18830__auto____0 = function() {
              var statearr_25023 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_25023[0] = state_machine__18830__auto__;
              statearr_25023[1] = 1;
              return statearr_25023;
            };
            var state_machine__18830__auto____1 = function(state_24997) {
              while (true) {
                var ret_value__18831__auto__ = function() {
                  try {
                    while (true) {
                      var result__18832__auto__ = switch__18829__auto__.call(null, state_24997);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__18832__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__18832__auto__;
                      }
                      break;
                    }
                  } catch (e25024) {
                    if (e25024 instanceof Object) {
                      var ex__18833__auto__ = e25024;
                      var statearr_25025_25042 = state_24997;
                      statearr_25025_25042[5] = ex__18833__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_24997);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e25024;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__18831__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__25043 = state_24997;
                  state_24997 = G__25043;
                  continue;
                } else {
                  return ret_value__18831__auto__;
                }
                break;
              }
            };
            state_machine__18830__auto__ = function(state_24997) {
              switch(arguments.length) {
                case 0:
                  return state_machine__18830__auto____0.call(this);
                case 1:
                  return state_machine__18830__auto____1.call(this, state_24997);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__18830__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__18830__auto____0;
            state_machine__18830__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__18830__auto____1;
            return state_machine__18830__auto__;
          }();
        }(switch__18829__auto__);
      }();
      var state__18846__auto__ = function() {
        var statearr_25026 = f__18845__auto__.call(null);
        statearr_25026[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__18844__auto___25027;
        return statearr_25026;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__18846__auto__);
    });
    return out;
  };
  partition_by = function(f, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return partition_by__2.call(this, f, ch);
      case 3:
        return partition_by__3.call(this, f, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_by.cljs$core$IFn$_invoke$arity$2 = partition_by__2;
  partition_by.cljs$core$IFn$_invoke$arity$3 = partition_by__3;
  return partition_by;
}();
goog.provide("taoensso.sente");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("taoensso.encore");
goog.require("taoensso.encore");
goog.require("taoensso.encore");
goog.require("cljs.reader");
goog.require("cljs.reader");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
goog.require("clojure.string");
goog.require("clojure.string");
taoensso.sente.chan_QMARK_ = function chan_QMARK_(x) {
  return x instanceof cljs.core.async.impl.channels.ManyToManyChannel;
};
taoensso.sente.validate_event_form = function validate_event_form(x) {
  if (!cljs.core.vector_QMARK_.call(null, x)) {
    return new cljs.core.Keyword(null, "wrong-type", "wrong-type", 1225767628);
  } else {
    if (cljs.core.not.call(null, (new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [1, null, 2, null], null), null)).call(null, cljs.core.count.call(null, x)))) {
      return new cljs.core.Keyword(null, "wrong-length", "wrong-length", 2503597688);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var vec__21798 = x;
        var ev_id = cljs.core.nth.call(null, vec__21798, 0, null);
        var _ = cljs.core.nth.call(null, vec__21798, 1, null);
        if (!(ev_id instanceof cljs.core.Keyword)) {
          return new cljs.core.Keyword(null, "wrong-id-type", "wrong-id-type", 1493951486);
        } else {
          if (cljs.core.not.call(null, cljs.core.namespace.call(null, ev_id))) {
            return new cljs.core.Keyword(null, "unnamespaced-id", "unnamespaced-id", 1327792248);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return null;
            } else {
              return null;
            }
          }
        }
      } else {
        return null;
      }
    }
  }
};
taoensso.sente.event_QMARK_ = function event_QMARK_(x) {
  return taoensso.sente.validate_event_form.call(null, x) == null;
};
taoensso.sente.assert_event = function assert_event(x) {
  var temp__4092__auto__ = taoensso.sente.validate_event_form.call(null, x);
  if (cljs.core.truth_(temp__4092__auto__)) {
    var _QMARK_err = temp__4092__auto__;
    var err_fmt = [cljs.core.str(function() {
      var G__21800 = _QMARK_err;
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "else", "else", 1017020587), G__21800)) {
        return "Malformed event (unknown error).";
      } else {
        if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "unnamespaced-id", "unnamespaced-id", 1327792248), G__21800)) {
          return "Malformed event (`ev-id` should be a namespaced keyword).";
        } else {
          if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "wrong-id-type", "wrong-id-type", 1493951486), G__21800)) {
            return "Malformed event (`ev-id` should be a namespaced keyword).";
          } else {
            if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "wrong-length", "wrong-length", 2503597688), G__21800)) {
              return "Malformed event (wrong length).";
            } else {
              if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "wrong-type", "wrong-type", 1225767628), G__21800)) {
                return "Malformed event (wrong type).";
              } else {
                if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                  throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(_QMARK_err)].join(""));
                } else {
                  return null;
                }
              }
            }
          }
        }
      }
    }()), cljs.core.str(" Event should be of `[ev-id ?ev-data]` form: %s")].join("");
    throw cljs.core.ex_info.call(null, taoensso.encore.format.call(null, err_fmt, [cljs.core.str(x)].join("")), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "malformed-event", "malformed-event", 894090618), x], null));
  } else {
    return null;
  }
};
taoensso.sente.cb_success_QMARK_ = function cb_success_QMARK_(cb_reply) {
  return cljs.core.not.call(null, (new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword("chsk", "timeout", "chsk/timeout", 4193310845), null, new cljs.core.Keyword("chsk", "error", "chsk/error", 1304116950), null, new cljs.core.Keyword("chsk", "closed", "chsk/closed", 4144514162), null], null), null)).call(null, cb_reply));
};
taoensso.sente.unwrap_edn_msg_with__QMARK_cb__GT_clj = function unwrap_edn_msg_with__QMARK_cb__GT_clj(edn) {
  var msg = cljs.reader.read_string.call(null, edn);
  var _QMARK_cb_uuid = function() {
    var and__15530__auto__ = cljs.core.map_QMARK_.call(null, msg);
    if (and__15530__auto__) {
      return(new cljs.core.Keyword("chsk", "cb-uuid", "chsk/cb-uuid", 1730902389)).cljs$core$IFn$_invoke$arity$1(msg);
    } else {
      return and__15530__auto__;
    }
  }();
  var clj = cljs.core.not.call(null, _QMARK_cb_uuid) ? msg : (new cljs.core.Keyword("chsk", "clj", "chsk/clj", 1207886781)).cljs$core$IFn$_invoke$arity$1(msg);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clj, _QMARK_cb_uuid], null);
};
taoensso.sente.assert_send_args = function assert_send_args(x, _QMARK_timeout_ms, _QMARK_cb) {
  taoensso.sente.assert_event.call(null, x);
  if (_QMARK_timeout_ms == null && _QMARK_cb == null || taoensso.encore.nneg_int_QMARK_.call(null, _QMARK_timeout_ms)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(taoensso.encore.format.call(null, "cb requires a timeout; timeout-ms should be a +ive integer: %s", _QMARK_timeout_ms)), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", -1640527972, null), cljs.core.list(new cljs.core.Symbol(null, "and", "and", -1640434800, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", -1637150201, null), new cljs.core.Symbol(null, 
    "?timeout-ms", "?timeout-ms", -1583490870, null)), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", -1637150201, null), new cljs.core.Symbol(null, "?cb", "?cb", -1640467817, null))), cljs.core.list(new cljs.core.Symbol(null, "and", "and", -1640434800, null), cljs.core.list(new cljs.core.Symbol("encore", "nneg-int?", "encore/nneg-int?", -1421067858, null), new cljs.core.Symbol(null, "?timeout-ms", "?timeout-ms", -1583490870, null))))))].join(""));
  }
  if (_QMARK_cb == null || (cljs.core.ifn_QMARK_.call(null, _QMARK_cb) || taoensso.sente.chan_QMARK_.call(null, _QMARK_cb))) {
    return null;
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(taoensso.encore.format.call(null, "cb should be nil, an ifn, or a channel: %s", cljs.core.type.call(null, _QMARK_cb))), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", -1640527972, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", -1637150201, null), new cljs.core.Symbol(null, "?cb", "?cb", -1640467817, null)), cljs.core.list(new cljs.core.Symbol(null, 
    "ifn?", "ifn?", -1637301977, null), new cljs.core.Symbol(null, "?cb", "?cb", -1640467817, null)), cljs.core.list(new cljs.core.Symbol(null, "chan?", "chan?", -1545907994, null), new cljs.core.Symbol(null, "?cb", "?cb", -1640467817, null)))))].join(""));
  }
};
taoensso.sente.pull_unused_cb_fn_BANG_ = function pull_unused_cb_fn_BANG_(cbs_waiting_, cb_uuid) {
  if (cljs.core.truth_(cb_uuid)) {
    return cljs.core.first.call(null, cljs.core.swap_BANG_.call(null, cbs_waiting_, function(p__21803) {
      var vec__21804 = p__21803;
      var _ = cljs.core.nth.call(null, vec__21804, 0, null);
      var m = cljs.core.nth.call(null, vec__21804, 1, null);
      var temp__4090__auto__ = m.call(null, cb_uuid);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var f = temp__4090__auto__;
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f, cljs.core.dissoc.call(null, m, cb_uuid)], null);
      } else {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, m], null);
      }
    }));
  } else {
    return null;
  }
};
taoensso.sente.wrap_clj__GT_edn_msg_with__QMARK_cb = function wrap_clj__GT_edn_msg_with__QMARK_cb(cbs_waiting_, clj, _QMARK_timeout_ms, _QMARK_cb_fn) {
  var _QMARK_cb_uuid = cljs.core.truth_(_QMARK_cb_fn) ? taoensso.encore.uuid_str.call(null) : null;
  var msg = cljs.core.not.call(null, _QMARK_cb_uuid) ? clj : new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword("chsk", "clj", "chsk/clj", 1207886781), clj, new cljs.core.Keyword("chsk", "cb-uuid", "chsk/cb-uuid", 1730902389), _QMARK_cb_uuid], null);
  var edn = cljs.core.pr_str.call(null, msg);
  if (cljs.core.truth_(_QMARK_cb_uuid)) {
    cljs.core.swap_BANG_.call(null, cbs_waiting_, function(p__21831) {
      var vec__21832 = p__21831;
      var _ = cljs.core.nth.call(null, vec__21832, 0, null);
      var m = cljs.core.nth.call(null, vec__21832, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, cljs.core.assoc.call(null, m, _QMARK_cb_uuid, _QMARK_cb_fn)], null);
    });
    if (cljs.core.truth_(_QMARK_timeout_ms)) {
      var c__18844__auto___21857 = cljs.core.async.chan.call(null, 1);
      cljs.core.async.impl.dispatch.run.call(null, function() {
        var f__18845__auto__ = function() {
          var switch__18829__auto__ = function(state_21843) {
            var state_val_21844 = state_21843[1];
            if (state_val_21844 === 5) {
              var inst_21841 = state_21843[2];
              var state_21843__$1 = state_21843;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21843__$1, inst_21841);
            } else {
              if (state_val_21844 === 4) {
                var state_21843__$1 = state_21843;
                var statearr_21845_21858 = state_21843__$1;
                statearr_21845_21858[2] = null;
                statearr_21845_21858[1] = 5;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_21844 === 3) {
                  var inst_21836 = state_21843[7];
                  var inst_21838 = inst_21836.call(null, new cljs.core.Keyword("chsk", "timeout", "chsk/timeout", 4193310845));
                  var state_21843__$1 = state_21843;
                  var statearr_21846_21859 = state_21843__$1;
                  statearr_21846_21859[2] = inst_21838;
                  statearr_21846_21859[1] = 5;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_21844 === 2) {
                    var inst_21836 = state_21843[7];
                    var inst_21835 = state_21843[2];
                    var inst_21836__$1 = taoensso.sente.pull_unused_cb_fn_BANG_.call(null, cbs_waiting_, _QMARK_cb_uuid);
                    var state_21843__$1 = function() {
                      var statearr_21847 = state_21843;
                      statearr_21847[7] = inst_21836__$1;
                      statearr_21847[8] = inst_21835;
                      return statearr_21847;
                    }();
                    if (cljs.core.truth_(inst_21836__$1)) {
                      var statearr_21848_21860 = state_21843__$1;
                      statearr_21848_21860[1] = 3;
                    } else {
                      var statearr_21849_21861 = state_21843__$1;
                      statearr_21849_21861[1] = 4;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_21844 === 1) {
                      var inst_21833 = cljs.core.async.timeout.call(null, _QMARK_timeout_ms);
                      var state_21843__$1 = state_21843;
                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_21843__$1, 2, inst_21833);
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          };
          return function(switch__18829__auto__) {
            return function() {
              var state_machine__18830__auto__ = null;
              var state_machine__18830__auto____0 = function() {
                var statearr_21853 = [null, null, null, null, null, null, null, null, null];
                statearr_21853[0] = state_machine__18830__auto__;
                statearr_21853[1] = 1;
                return statearr_21853;
              };
              var state_machine__18830__auto____1 = function(state_21843) {
                while (true) {
                  var ret_value__18831__auto__ = function() {
                    try {
                      while (true) {
                        var result__18832__auto__ = switch__18829__auto__.call(null, state_21843);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__18832__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                          continue;
                        } else {
                          return result__18832__auto__;
                        }
                        break;
                      }
                    } catch (e21854) {
                      if (e21854 instanceof Object) {
                        var ex__18833__auto__ = e21854;
                        var statearr_21855_21862 = state_21843;
                        statearr_21855_21862[5] = ex__18833__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21843);
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                          throw e21854;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__18831__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                    var G__21863 = state_21843;
                    state_21843 = G__21863;
                    continue;
                  } else {
                    return ret_value__18831__auto__;
                  }
                  break;
                }
              };
              state_machine__18830__auto__ = function(state_21843) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__18830__auto____0.call(this);
                  case 1:
                    return state_machine__18830__auto____1.call(this, state_21843);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__18830__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__18830__auto____0;
              state_machine__18830__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__18830__auto____1;
              return state_machine__18830__auto__;
            }();
          }(switch__18829__auto__);
        }();
        var state__18846__auto__ = function() {
          var statearr_21856 = f__18845__auto__.call(null);
          statearr_21856[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__18844__auto___21857;
          return statearr_21856;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__18846__auto__);
      });
    } else {
    }
  } else {
  }
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [edn, _QMARK_cb_uuid], null);
};
taoensso.sente.IChSocket = function() {
  var obj21865 = {};
  return obj21865;
}();
taoensso.sente.chsk_send_BANG_ = function() {
  var chsk_send_BANG_ = null;
  var chsk_send_BANG___2 = function(chsk, ev) {
    if (function() {
      var and__15530__auto__ = chsk;
      if (and__15530__auto__) {
        return chsk.taoensso$sente$IChSocket$chsk_send_BANG_$arity$2;
      } else {
        return and__15530__auto__;
      }
    }()) {
      return chsk.taoensso$sente$IChSocket$chsk_send_BANG_$arity$2(chsk, ev);
    } else {
      var x__16169__auto__ = chsk == null ? null : chsk;
      return function() {
        var or__15542__auto__ = taoensso.sente.chsk_send_BANG_[goog.typeOf(x__16169__auto__)];
        if (or__15542__auto__) {
          return or__15542__auto__;
        } else {
          var or__15542__auto____$1 = taoensso.sente.chsk_send_BANG_["_"];
          if (or__15542__auto____$1) {
            return or__15542__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IChSocket.chsk-send!", chsk);
          }
        }
      }().call(null, chsk, ev);
    }
  };
  var chsk_send_BANG___4 = function(chsk, ev, _QMARK_timeout_ms, _QMARK_cb) {
    if (function() {
      var and__15530__auto__ = chsk;
      if (and__15530__auto__) {
        return chsk.taoensso$sente$IChSocket$chsk_send_BANG_$arity$4;
      } else {
        return and__15530__auto__;
      }
    }()) {
      return chsk.taoensso$sente$IChSocket$chsk_send_BANG_$arity$4(chsk, ev, _QMARK_timeout_ms, _QMARK_cb);
    } else {
      var x__16169__auto__ = chsk == null ? null : chsk;
      return function() {
        var or__15542__auto__ = taoensso.sente.chsk_send_BANG_[goog.typeOf(x__16169__auto__)];
        if (or__15542__auto__) {
          return or__15542__auto__;
        } else {
          var or__15542__auto____$1 = taoensso.sente.chsk_send_BANG_["_"];
          if (or__15542__auto____$1) {
            return or__15542__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IChSocket.chsk-send!", chsk);
          }
        }
      }().call(null, chsk, ev, _QMARK_timeout_ms, _QMARK_cb);
    }
  };
  chsk_send_BANG_ = function(chsk, ev, _QMARK_timeout_ms, _QMARK_cb) {
    switch(arguments.length) {
      case 2:
        return chsk_send_BANG___2.call(this, chsk, ev);
      case 4:
        return chsk_send_BANG___4.call(this, chsk, ev, _QMARK_timeout_ms, _QMARK_cb);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chsk_send_BANG_.cljs$core$IFn$_invoke$arity$2 = chsk_send_BANG___2;
  chsk_send_BANG_.cljs$core$IFn$_invoke$arity$4 = chsk_send_BANG___4;
  return chsk_send_BANG_;
}();
taoensso.sente.chsk_make_BANG_ = function chsk_make_BANG_(chsk) {
  if (function() {
    var and__15530__auto__ = chsk;
    if (and__15530__auto__) {
      return chsk.taoensso$sente$IChSocket$chsk_make_BANG_$arity$1;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return chsk.taoensso$sente$IChSocket$chsk_make_BANG_$arity$1(chsk);
  } else {
    var x__16169__auto__ = chsk == null ? null : chsk;
    return function() {
      var or__15542__auto__ = taoensso.sente.chsk_make_BANG_[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = taoensso.sente.chsk_make_BANG_["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChSocket.chsk-make!", chsk);
        }
      }
    }().call(null, chsk);
  }
};
taoensso.sente.chsk_reconnect_BANG_ = function chsk_reconnect_BANG_(chsk) {
  if (function() {
    var and__15530__auto__ = chsk;
    if (and__15530__auto__) {
      return chsk.taoensso$sente$IChSocket$chsk_reconnect_BANG_$arity$1;
    } else {
      return and__15530__auto__;
    }
  }()) {
    return chsk.taoensso$sente$IChSocket$chsk_reconnect_BANG_$arity$1(chsk);
  } else {
    var x__16169__auto__ = chsk == null ? null : chsk;
    return function() {
      var or__15542__auto__ = taoensso.sente.chsk_reconnect_BANG_[goog.typeOf(x__16169__auto__)];
      if (or__15542__auto__) {
        return or__15542__auto__;
      } else {
        var or__15542__auto____$1 = taoensso.sente.chsk_reconnect_BANG_["_"];
        if (or__15542__auto____$1) {
          return or__15542__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChSocket.chsk-reconnect!", chsk);
        }
      }
    }().call(null, chsk);
  }
};
taoensso.sente.merge_GT_chsk_state_BANG_ = function merge_GT_chsk_state_BANG_(p__21866, merge_state) {
  var map__21869 = p__21866;
  var map__21869__$1 = cljs.core.seq_QMARK_.call(null, map__21869) ? cljs.core.apply.call(null, cljs.core.hash_map, map__21869) : map__21869;
  var chsk = map__21869__$1;
  var state_ = cljs.core.get.call(null, map__21869__$1, new cljs.core.Keyword(null, "state_", "state_", 4416389472));
  var chs = cljs.core.get.call(null, map__21869__$1, new cljs.core.Keyword(null, "chs", "chs", 1014002720));
  var vec__21870 = taoensso.encore.swap_in_BANG_.call(null, state_, cljs.core.PersistentVector.EMPTY, function(old_state) {
    var new_state = cljs.core.merge.call(null, old_state, merge_state);
    return taoensso.encore.swapped.call(null, new_state, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [old_state, new_state], null));
  });
  var old_state = cljs.core.nth.call(null, vec__21870, 0, null);
  var new_state = cljs.core.nth.call(null, vec__21870, 1, null);
  if (cljs.core.not_EQ_.call(null, old_state, new_state)) {
    cljs.core.async.put_BANG_.call(null, (new cljs.core.Keyword(null, "state", "state", 1123661827)).cljs$core$IFn$_invoke$arity$1(chs), new_state);
    return new_state;
  } else {
    return null;
  }
};
taoensso.sente.wrap_cb_chan_as_fn = function wrap_cb_chan_as_fn(_QMARK_cb, ev) {
  if (_QMARK_cb == null || cljs.core.ifn_QMARK_.call(null, _QMARK_cb)) {
    return _QMARK_cb;
  } else {
    if (taoensso.sente.chan_QMARK_.call(null, _QMARK_cb)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "chan?", "chan?", -1545907994, null), new cljs.core.Symbol(null, "?cb", "?cb", -1640467817, null))))].join(""));
    }
    taoensso.sente.assert_event.call(null, ev);
    var vec__21872 = ev;
    var ev_id = cljs.core.nth.call(null, vec__21872, 0, null);
    var _ = cljs.core.nth.call(null, vec__21872, 1, null);
    var cb_ch = _QMARK_cb;
    return function(reply) {
      return cljs.core.async.put_BANG_.call(null, cb_ch, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, [cljs.core.str(taoensso.encore.fq_name.call(null, ev_id)), cljs.core.str(".cb")].join("")), reply], null));
    };
  }
};
taoensso.sente.receive_buffered_evs_BANG_ = function receive_buffered_evs_BANG_(ch_recv, clj) {
  if (cljs.core.vector_QMARK_.call(null, clj)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "vector?", "vector?", -1302740715, null), new cljs.core.Symbol(null, "clj", "clj", -1640432934, null))))].join(""));
  }
  var buffered_evs = clj;
  var seq__21877 = cljs.core.seq.call(null, buffered_evs);
  var chunk__21878 = null;
  var count__21879 = 0;
  var i__21880 = 0;
  while (true) {
    if (i__21880 < count__21879) {
      var ev = cljs.core._nth.call(null, chunk__21878, i__21880);
      taoensso.sente.assert_event.call(null, ev);
      cljs.core.async.put_BANG_.call(null, ch_recv, ev);
      var G__21881 = seq__21877;
      var G__21882 = chunk__21878;
      var G__21883 = count__21879;
      var G__21884 = i__21880 + 1;
      seq__21877 = G__21881;
      chunk__21878 = G__21882;
      count__21879 = G__21883;
      i__21880 = G__21884;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__21877);
      if (temp__4092__auto__) {
        var seq__21877__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__21877__$1)) {
          var c__16290__auto__ = cljs.core.chunk_first.call(null, seq__21877__$1);
          var G__21885 = cljs.core.chunk_rest.call(null, seq__21877__$1);
          var G__21886 = c__16290__auto__;
          var G__21887 = cljs.core.count.call(null, c__16290__auto__);
          var G__21888 = 0;
          seq__21877 = G__21885;
          chunk__21878 = G__21886;
          count__21879 = G__21887;
          i__21880 = G__21888;
          continue;
        } else {
          var ev = cljs.core.first.call(null, seq__21877__$1);
          taoensso.sente.assert_event.call(null, ev);
          cljs.core.async.put_BANG_.call(null, ch_recv, ev);
          var G__21889 = cljs.core.next.call(null, seq__21877__$1);
          var G__21890 = null;
          var G__21891 = 0;
          var G__21892 = 0;
          seq__21877 = G__21889;
          chunk__21878 = G__21890;
          count__21879 = G__21891;
          i__21880 = G__21892;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
taoensso.sente.ChWebSocket = function(url, chs, socket_, kalive_ms, kalive_timer_, kalive_due_QMARK__, cbs_waiting_, state_, __meta, __extmap) {
  this.url = url;
  this.chs = chs;
  this.socket_ = socket_;
  this.kalive_ms = kalive_ms;
  this.kalive_timer_ = kalive_timer_;
  this.kalive_due_QMARK__ = kalive_due_QMARK__;
  this.cbs_waiting_ = cbs_waiting_;
  this.state_ = state_;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 8) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
taoensso.sente.ChWebSocket.prototype.taoensso$sente$IChSocket$ = true;
taoensso.sente.ChWebSocket.prototype.taoensso$sente$IChSocket$chsk_send_BANG_$arity$2 = function(chsk, ev) {
  var self__ = this;
  var chsk__$1 = this;
  return taoensso.sente.chsk_send_BANG_.call(null, chsk__$1, ev, null, null);
};
taoensso.sente.ChWebSocket.prototype.taoensso$sente$IChSocket$chsk_send_BANG_$arity$4 = function(chsk, ev, _QMARK_timeout_ms, _QMARK_cb) {
  var self__ = this;
  var chsk__$1 = this;
  taoensso.sente.assert_send_args.call(null, ev, _QMARK_timeout_ms, _QMARK_cb);
  var _QMARK_cb_fn = taoensso.sente.wrap_cb_chan_as_fn.call(null, _QMARK_cb, ev);
  if (cljs.core.not.call(null, (new cljs.core.Keyword(null, "open?", "open?", 1119852199)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, self__.state_)))) {
    taoensso.encore.warnf.call(null, "Chsk send against closed chsk.");
    if (cljs.core.truth_(_QMARK_cb_fn)) {
      return _QMARK_cb_fn.call(null, new cljs.core.Keyword("chsk", "closed", "chsk/closed", 4144514162));
    } else {
      return null;
    }
  } else {
    var vec__21896 = taoensso.sente.wrap_clj__GT_edn_msg_with__QMARK_cb.call(null, self__.cbs_waiting_, ev, _QMARK_timeout_ms, _QMARK_cb_fn);
    var edn = cljs.core.nth.call(null, vec__21896, 0, null);
    var _QMARK_cb_uuid = cljs.core.nth.call(null, vec__21896, 1, null);
    try {
      cljs.core.deref.call(null, self__.socket_).send(edn);
      cljs.core.reset_BANG_.call(null, self__.kalive_due_QMARK__, false);
      return new cljs.core.Keyword(null, "apparent-success", "apparent-success", 1519477569);
    } catch (e21897) {
      if (e21897 instanceof Error) {
        var e = e21897;
        taoensso.encore.errorf.call(null, "Chsk send %s", e);
        if (cljs.core.truth_(_QMARK_cb_uuid)) {
          var cb_fn_STAR__21911 = function() {
            var or__15542__auto__ = taoensso.sente.pull_unused_cb_fn_BANG_.call(null, self__.cbs_waiting_, _QMARK_cb_uuid);
            if (cljs.core.truth_(or__15542__auto__)) {
              return or__15542__auto__;
            } else {
              return _QMARK_cb_fn;
            }
          }();
          cb_fn_STAR__21911.call(null, new cljs.core.Keyword("chsk", "error", "chsk/error", 1304116950));
        } else {
        }
        return false;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw e21897;
        } else {
          return null;
        }
      }
    }
  }
};
taoensso.sente.ChWebSocket.prototype.taoensso$sente$IChSocket$chsk_reconnect_BANG_$arity$1 = function(chsk) {
  var self__ = this;
  var chsk__$1 = this;
  var temp__4092__auto__ = cljs.core.deref.call(null, self__.socket_);
  if (cljs.core.truth_(temp__4092__auto__)) {
    var s = temp__4092__auto__;
    return s.close();
  } else {
    return null;
  }
};
taoensso.sente.ChWebSocket.prototype.taoensso$sente$IChSocket$chsk_make_BANG_$arity$1 = function(chsk) {
  var self__ = this;
  var chsk__$1 = this;
  var temp__4092__auto__ = function() {
    var or__15542__auto__ = window["WebSocket"];
    if (cljs.core.truth_(or__15542__auto__)) {
      return or__15542__auto__;
    } else {
      return window["MozWebSocket"];
    }
  }();
  if (cljs.core.truth_(temp__4092__auto__)) {
    var WebSocket = temp__4092__auto__;
    (function connect_BANG_(nattempt) {
      var retry_BANG_ = function() {
        var nattempt_STAR_ = nattempt + 1;
        window.clearInterval(cljs.core.deref.call(null, self__.kalive_timer_));
        taoensso.encore.warnf.call(null, "Chsk is closed: will try reconnect (%s).", nattempt_STAR_);
        return taoensso.encore.set_exp_backoff_timeout_BANG_.call(null, cljs.core.partial.call(null, connect_BANG_, nattempt_STAR_), nattempt_STAR_);
      };
      var temp__4090__auto__ = function() {
        try {
          return new WebSocket(self__.url);
        } catch (e21903) {
          if (e21903 instanceof Error) {
            var e = e21903;
            taoensso.encore.errorf.call(null, "WebSocket js/Error: %s", e);
            return false;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              throw e21903;
            } else {
              return null;
            }
          }
        }
      }();
      if (cljs.core.truth_(temp__4090__auto__)) {
        var socket = temp__4090__auto__;
        return cljs.core.reset_BANG_.call(null, self__.socket_, function() {
          var G__21904 = socket;
          G__21904["onerror"] = function(ws_ev) {
            return taoensso.encore.errorf.call(null, "WebSocket error: %s", ws_ev);
          };
          G__21904["onmessage"] = function(ws_ev) {
            var edn = ws_ev["data"];
            var vec__21905 = taoensso.sente.unwrap_edn_msg_with__QMARK_cb__GT_clj.call(null, edn);
            var clj = cljs.core.nth.call(null, vec__21905, 0, null);
            var _QMARK_cb_uuid = cljs.core.nth.call(null, vec__21905, 1, null);
            if (cljs.core._EQ_.call(null, cljs.core.first.call(null, clj), new cljs.core.Keyword("chsk", "handshake", "chsk/handshake", 1281878251))) {
              var vec__21906 = clj;
              var _ = cljs.core.nth.call(null, vec__21906, 0, null);
              var vec__21907 = cljs.core.nth.call(null, vec__21906, 1, null);
              var uid = cljs.core.nth.call(null, vec__21907, 0, null);
              var csrf_token = cljs.core.nth.call(null, vec__21907, 1, null);
              if (cljs.core.truth_(clojure.string.blank_QMARK_.call(null, csrf_token))) {
                taoensso.encore.warnf.call(null, "NO CSRF TOKEN AVAILABLE");
              } else {
              }
              return taoensso.sente.merge_GT_chsk_state_BANG_.call(null, chsk__$1, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "open?", "open?", 1119852199), true, new cljs.core.Keyword(null, "uid", "uid", 1014020034), uid, new cljs.core.Keyword(null, "csrf-token", "csrf-token", 4176868610), csrf_token], null));
            } else {
              if (cljs.core.truth_(_QMARK_cb_uuid)) {
                var temp__4090__auto____$1 = taoensso.sente.pull_unused_cb_fn_BANG_.call(null, self__.cbs_waiting_, _QMARK_cb_uuid);
                if (cljs.core.truth_(temp__4090__auto____$1)) {
                  var cb_fn = temp__4090__auto____$1;
                  return cb_fn.call(null, clj);
                } else {
                  return taoensso.encore.warnf.call(null, "Cb reply w/o local cb-fn: %s", clj);
                }
              } else {
                var buffered_evs = clj;
                return taoensso.sente.receive_buffered_evs_BANG_.call(null, (new cljs.core.Keyword(null, "recv", "recv", 1017400664)).cljs$core$IFn$_invoke$arity$1(self__.chs), buffered_evs);
              }
            }
          };
          G__21904["onopen"] = function(_ws_ev) {
            return cljs.core.reset_BANG_.call(null, self__.kalive_timer_, window.setInterval(function() {
              if (cljs.core.truth_(cljs.core.deref.call(null, self__.kalive_due_QMARK__))) {
                taoensso.sente.chsk_send_BANG_.call(null, chsk__$1, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("chsk", "ws-ping", "chsk/ws-ping", 2788090655)], null));
              } else {
              }
              return cljs.core.reset_BANG_.call(null, self__.kalive_due_QMARK__, true);
            }, self__.kalive_ms));
          };
          G__21904["onclose"] = function(_ws_ev) {
            taoensso.sente.merge_GT_chsk_state_BANG_.call(null, chsk__$1, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "open?", "open?", 1119852199), false], null));
            return retry_BANG_.call(null);
          };
          return G__21904;
        }());
      } else {
        return retry_BANG_.call(null);
      }
    }).call(null, 0);
    return chsk__$1;
  } else {
    return null;
  }
};
taoensso.sente.ChWebSocket.prototype.cljs$core$IHash$_hash$arity$1 = function(this__16123__auto__) {
  var self__ = this;
  var this__16123__auto____$1 = this;
  var h__15953__auto__ = self__.__hash;
  if (!(h__15953__auto__ == null)) {
    return h__15953__auto__;
  } else {
    var h__15953__auto____$1 = cljs.core.hash_imap.call(null, this__16123__auto____$1);
    self__.__hash = h__15953__auto____$1;
    return h__15953__auto____$1;
  }
};
taoensso.sente.ChWebSocket.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__16128__auto__, k__16129__auto__) {
  var self__ = this;
  var this__16128__auto____$1 = this;
  return cljs.core._lookup.call(null, this__16128__auto____$1, k__16129__auto__, null);
};
taoensso.sente.ChWebSocket.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__16130__auto__, k21894, else__16131__auto__) {
  var self__ = this;
  var this__16130__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k21894, new cljs.core.Keyword(null, "url", "url", 1014020321))) {
    return self__.url;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k21894, new cljs.core.Keyword(null, "chs", "chs", 1014002720))) {
      return self__.chs;
    } else {
      if (cljs.core.keyword_identical_QMARK_.call(null, k21894, new cljs.core.Keyword(null, "socket_", "socket_", 3270165182))) {
        return self__.socket_;
      } else {
        if (cljs.core.keyword_identical_QMARK_.call(null, k21894, new cljs.core.Keyword(null, "kalive-ms", "kalive-ms", 2622924675))) {
          return self__.kalive_ms;
        } else {
          if (cljs.core.keyword_identical_QMARK_.call(null, k21894, new cljs.core.Keyword(null, "kalive-timer_", "kalive-timer_", 1172590103))) {
            return self__.kalive_timer_;
          } else {
            if (cljs.core.keyword_identical_QMARK_.call(null, k21894, new cljs.core.Keyword(null, "kalive-due?_", "kalive-due?_", 3498447387))) {
              return self__.kalive_due_QMARK__;
            } else {
              if (cljs.core.keyword_identical_QMARK_.call(null, k21894, new cljs.core.Keyword(null, "cbs-waiting_", "cbs-waiting_", 4586265821))) {
                return self__.cbs_waiting_;
              } else {
                if (cljs.core.keyword_identical_QMARK_.call(null, k21894, new cljs.core.Keyword(null, "state_", "state_", 4416389472))) {
                  return self__.state_;
                } else {
                  if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                    return cljs.core.get.call(null, self__.__extmap, k21894, else__16131__auto__);
                  } else {
                    return null;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
taoensso.sente.ChWebSocket.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__16135__auto__, k__16136__auto__, G__21893) {
  var self__ = this;
  var this__16135__auto____$1 = this;
  var pred__21908 = cljs.core.keyword_identical_QMARK_;
  var expr__21909 = k__16136__auto__;
  if (cljs.core.truth_(pred__21908.call(null, new cljs.core.Keyword(null, "url", "url", 1014020321), expr__21909))) {
    return new taoensso.sente.ChWebSocket(G__21893, self__.chs, self__.socket_, self__.kalive_ms, self__.kalive_timer_, self__.kalive_due_QMARK__, self__.cbs_waiting_, self__.state_, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__21908.call(null, new cljs.core.Keyword(null, "chs", "chs", 1014002720), expr__21909))) {
      return new taoensso.sente.ChWebSocket(self__.url, G__21893, self__.socket_, self__.kalive_ms, self__.kalive_timer_, self__.kalive_due_QMARK__, self__.cbs_waiting_, self__.state_, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__21908.call(null, new cljs.core.Keyword(null, "socket_", "socket_", 3270165182), expr__21909))) {
        return new taoensso.sente.ChWebSocket(self__.url, self__.chs, G__21893, self__.kalive_ms, self__.kalive_timer_, self__.kalive_due_QMARK__, self__.cbs_waiting_, self__.state_, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__21908.call(null, new cljs.core.Keyword(null, "kalive-ms", "kalive-ms", 2622924675), expr__21909))) {
          return new taoensso.sente.ChWebSocket(self__.url, self__.chs, self__.socket_, G__21893, self__.kalive_timer_, self__.kalive_due_QMARK__, self__.cbs_waiting_, self__.state_, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__21908.call(null, new cljs.core.Keyword(null, "kalive-timer_", "kalive-timer_", 1172590103), expr__21909))) {
            return new taoensso.sente.ChWebSocket(self__.url, self__.chs, self__.socket_, self__.kalive_ms, G__21893, self__.kalive_due_QMARK__, self__.cbs_waiting_, self__.state_, self__.__meta, self__.__extmap, null);
          } else {
            if (cljs.core.truth_(pred__21908.call(null, new cljs.core.Keyword(null, "kalive-due?_", "kalive-due?_", 3498447387), expr__21909))) {
              return new taoensso.sente.ChWebSocket(self__.url, self__.chs, self__.socket_, self__.kalive_ms, self__.kalive_timer_, G__21893, self__.cbs_waiting_, self__.state_, self__.__meta, self__.__extmap, null);
            } else {
              if (cljs.core.truth_(pred__21908.call(null, new cljs.core.Keyword(null, "cbs-waiting_", "cbs-waiting_", 4586265821), expr__21909))) {
                return new taoensso.sente.ChWebSocket(self__.url, self__.chs, self__.socket_, self__.kalive_ms, self__.kalive_timer_, self__.kalive_due_QMARK__, G__21893, self__.state_, self__.__meta, self__.__extmap, null);
              } else {
                if (cljs.core.truth_(pred__21908.call(null, new cljs.core.Keyword(null, "state_", "state_", 4416389472), expr__21909))) {
                  return new taoensso.sente.ChWebSocket(self__.url, self__.chs, self__.socket_, self__.kalive_ms, self__.kalive_timer_, self__.kalive_due_QMARK__, self__.cbs_waiting_, G__21893, self__.__meta, self__.__extmap, null);
                } else {
                  return new taoensso.sente.ChWebSocket(self__.url, self__.chs, self__.socket_, self__.kalive_ms, self__.kalive_timer_, self__.kalive_due_QMARK__, self__.cbs_waiting_, self__.state_, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__16136__auto__, G__21893), null);
                }
              }
            }
          }
        }
      }
    }
  }
};
taoensso.sente.ChWebSocket.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__16142__auto__, writer__16143__auto__, opts__16144__auto__) {
  var self__ = this;
  var this__16142__auto____$1 = this;
  var pr_pair__16145__auto__ = function(keyval__16146__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__16143__auto__, cljs.core.pr_writer, "", " ", "", opts__16144__auto__, keyval__16146__auto__);
  };
  return cljs.core.pr_sequential_writer.call(null, writer__16143__auto__, pr_pair__16145__auto__, "#taoensso.sente.ChWebSocket{", ", ", "}", opts__16144__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "url", "url", 1014020321), self__.url], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "chs", "chs", 1014002720), self__.chs], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "socket_", "socket_", 3270165182), self__.socket_], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "kalive-ms", "kalive-ms", 2622924675), self__.kalive_ms], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "kalive-timer_", "kalive-timer_", 1172590103), self__.kalive_timer_], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "kalive-due?_", "kalive-due?_", 3498447387), self__.kalive_due_QMARK__], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "cbs-waiting_", "cbs-waiting_", 4586265821), self__.cbs_waiting_], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state_", "state_", 4416389472), self__.state_], null)], null), self__.__extmap));
};
taoensso.sente.ChWebSocket.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__16133__auto__, entry__16134__auto__) {
  var self__ = this;
  var this__16133__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__16134__auto__)) {
    return cljs.core._assoc.call(null, this__16133__auto____$1, cljs.core._nth.call(null, entry__16134__auto__, 0), cljs.core._nth.call(null, entry__16134__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__16133__auto____$1, entry__16134__auto__);
  }
};
taoensso.sente.ChWebSocket.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__16140__auto__) {
  var self__ = this;
  var this__16140__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "url", "url", 1014020321), self__.url], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "chs", "chs", 1014002720), self__.chs], null), new cljs.core.PersistentVector(null, 2, 
  5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "socket_", "socket_", 3270165182), self__.socket_], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "kalive-ms", "kalive-ms", 2622924675), self__.kalive_ms], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "kalive-timer_", "kalive-timer_", 1172590103), self__.kalive_timer_], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "kalive-due?_", "kalive-due?_", 3498447387), self__.kalive_due_QMARK__], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "cbs-waiting_", "cbs-waiting_", 4586265821), self__.cbs_waiting_], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state_", "state_", 4416389472), self__.state_], 
  null)], null), self__.__extmap));
};
taoensso.sente.ChWebSocket.prototype.cljs$core$ICounted$_count$arity$1 = function(this__16132__auto__) {
  var self__ = this;
  var this__16132__auto____$1 = this;
  return 8 + cljs.core.count.call(null, self__.__extmap);
};
taoensso.sente.ChWebSocket.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__16124__auto__, other__16125__auto__) {
  var self__ = this;
  var this__16124__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__15530__auto__ = other__16125__auto__;
    if (cljs.core.truth_(and__15530__auto__)) {
      return this__16124__auto____$1.constructor === other__16125__auto__.constructor && cljs.core.equiv_map.call(null, this__16124__auto____$1, other__16125__auto__);
    } else {
      return and__15530__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
taoensso.sente.ChWebSocket.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__16127__auto__, G__21893) {
  var self__ = this;
  var this__16127__auto____$1 = this;
  return new taoensso.sente.ChWebSocket(self__.url, self__.chs, self__.socket_, self__.kalive_ms, self__.kalive_timer_, self__.kalive_due_QMARK__, self__.cbs_waiting_, self__.state_, G__21893, self__.__extmap, self__.__hash);
};
taoensso.sente.ChWebSocket.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__16122__auto__) {
  var self__ = this;
  var this__16122__auto____$1 = this;
  return new taoensso.sente.ChWebSocket(self__.url, self__.chs, self__.socket_, self__.kalive_ms, self__.kalive_timer_, self__.kalive_due_QMARK__, self__.cbs_waiting_, self__.state_, self__.__meta, self__.__extmap, self__.__hash);
};
taoensso.sente.ChWebSocket.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__16126__auto__) {
  var self__ = this;
  var this__16126__auto____$1 = this;
  return self__.__meta;
};
taoensso.sente.ChWebSocket.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__16137__auto__, k__16138__auto__) {
  var self__ = this;
  var this__16137__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null, "kalive-timer_", "kalive-timer_", 1172590103), null, new cljs.core.Keyword(null, "kalive-due?_", "kalive-due?_", 3498447387), null, new cljs.core.Keyword(null, "chs", "chs", 1014002720), null, new cljs.core.Keyword(null, "kalive-ms", "kalive-ms", 2622924675), null, new cljs.core.Keyword(null, "cbs-waiting_", "cbs-waiting_", 4586265821), null, new cljs.core.Keyword(null, 
  "state_", "state_", 4416389472), null, new cljs.core.Keyword(null, "url", "url", 1014020321), null, new cljs.core.Keyword(null, "socket_", "socket_", 3270165182), null], null), null), k__16138__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__16137__auto____$1), self__.__meta), k__16138__auto__);
  } else {
    return new taoensso.sente.ChWebSocket(self__.url, self__.chs, self__.socket_, self__.kalive_ms, self__.kalive_timer_, self__.kalive_due_QMARK__, self__.cbs_waiting_, self__.state_, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__16138__auto__)), null);
  }
};
taoensso.sente.ChWebSocket.cljs$lang$type = true;
taoensso.sente.ChWebSocket.cljs$lang$ctorPrSeq = function(this__16162__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "taoensso.sente/ChWebSocket");
};
taoensso.sente.ChWebSocket.cljs$lang$ctorPrWriter = function(this__16162__auto__, writer__16163__auto__) {
  return cljs.core._write.call(null, writer__16163__auto__, "taoensso.sente/ChWebSocket");
};
taoensso.sente.__GT_ChWebSocket = function __GT_ChWebSocket(url, chs, socket_, kalive_ms, kalive_timer_, kalive_due_QMARK__, cbs_waiting_, state_) {
  return new taoensso.sente.ChWebSocket(url, chs, socket_, kalive_ms, kalive_timer_, kalive_due_QMARK__, cbs_waiting_, state_);
};
taoensso.sente.map__GT_ChWebSocket = function map__GT_ChWebSocket(G__21895) {
  return new taoensso.sente.ChWebSocket((new cljs.core.Keyword(null, "url", "url", 1014020321)).cljs$core$IFn$_invoke$arity$1(G__21895), (new cljs.core.Keyword(null, "chs", "chs", 1014002720)).cljs$core$IFn$_invoke$arity$1(G__21895), (new cljs.core.Keyword(null, "socket_", "socket_", 3270165182)).cljs$core$IFn$_invoke$arity$1(G__21895), (new cljs.core.Keyword(null, "kalive-ms", "kalive-ms", 2622924675)).cljs$core$IFn$_invoke$arity$1(G__21895), (new cljs.core.Keyword(null, "kalive-timer_", "kalive-timer_", 
  1172590103)).cljs$core$IFn$_invoke$arity$1(G__21895), (new cljs.core.Keyword(null, "kalive-due?_", "kalive-due?_", 3498447387)).cljs$core$IFn$_invoke$arity$1(G__21895), (new cljs.core.Keyword(null, "cbs-waiting_", "cbs-waiting_", 4586265821)).cljs$core$IFn$_invoke$arity$1(G__21895), (new cljs.core.Keyword(null, "state_", "state_", 4416389472)).cljs$core$IFn$_invoke$arity$1(G__21895), null, cljs.core.dissoc.call(null, G__21895, new cljs.core.Keyword(null, "url", "url", 1014020321), new cljs.core.Keyword(null, 
  "chs", "chs", 1014002720), new cljs.core.Keyword(null, "socket_", "socket_", 3270165182), new cljs.core.Keyword(null, "kalive-ms", "kalive-ms", 2622924675), new cljs.core.Keyword(null, "kalive-timer_", "kalive-timer_", 1172590103), new cljs.core.Keyword(null, "kalive-due?_", "kalive-due?_", 3498447387), new cljs.core.Keyword(null, "cbs-waiting_", "cbs-waiting_", 4586265821), new cljs.core.Keyword(null, "state_", "state_", 4416389472)));
};
taoensso.sente.ChAjaxSocket = function(url, chs, timeout, ajax_client_uuid, curr_xhr_, state_, __meta, __extmap) {
  this.url = url;
  this.chs = chs;
  this.timeout = timeout;
  this.ajax_client_uuid = ajax_client_uuid;
  this.curr_xhr_ = curr_xhr_;
  this.state_ = state_;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 6) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
taoensso.sente.ChAjaxSocket.prototype.taoensso$sente$IChSocket$ = true;
taoensso.sente.ChAjaxSocket.prototype.taoensso$sente$IChSocket$chsk_send_BANG_$arity$2 = function(chsk, ev) {
  var self__ = this;
  var chsk__$1 = this;
  return taoensso.sente.chsk_send_BANG_.call(null, chsk__$1, ev, null, null);
};
taoensso.sente.ChAjaxSocket.prototype.taoensso$sente$IChSocket$chsk_send_BANG_$arity$4 = function(chsk, ev, _QMARK_timeout_ms, _QMARK_cb) {
  var self__ = this;
  var chsk__$1 = this;
  taoensso.sente.assert_send_args.call(null, ev, _QMARK_timeout_ms, _QMARK_cb);
  var _QMARK_cb_fn = taoensso.sente.wrap_cb_chan_as_fn.call(null, _QMARK_cb, ev);
  if (cljs.core.not.call(null, (new cljs.core.Keyword(null, "open?", "open?", 1119852199)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, self__.state_)))) {
    taoensso.encore.warnf.call(null, "Chsk send against closed chsk.");
    if (cljs.core.truth_(_QMARK_cb_fn)) {
      return _QMARK_cb_fn.call(null, new cljs.core.Keyword("chsk", "closed", "chsk/closed", 4144514162));
    } else {
      return null;
    }
  } else {
    taoensso.encore.ajax_lite.call(null, self__.url, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "method", "method", 4231316563), new cljs.core.Keyword(null, "post", "post", 1017351186), new cljs.core.Keyword(null, "timeout", "timeout", 3994960083), _QMARK_timeout_ms, new cljs.core.Keyword(null, "resp-type", "resp-type", 3288017545), new cljs.core.Keyword(null, "text", "text", 1017460895), new cljs.core.Keyword(null, "params", "params", 4313443576), function() {
      var dummy_cb_QMARK_ = cljs.core.not.call(null, _QMARK_cb_fn);
      var msg = !dummy_cb_QMARK_ ? ev : new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword("chsk", "clj", "chsk/clj", 1207886781), ev, new cljs.core.Keyword("chsk", "dummy-cb?", "chsk/dummy-cb?", 4088721351), true], null);
      var edn = cljs.core.pr_str.call(null, msg);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "_", "_", 1013904337), taoensso.encore.now_udt.call(null), new cljs.core.Keyword(null, "edn", "edn", 1014004513), edn, new cljs.core.Keyword(null, "csrf-token", "csrf-token", 4176868610), (new cljs.core.Keyword(null, "csrf-token", "csrf-token", 4176868610)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, self__.state_))], null);
    }()], null), function ajax_cb(p__21915) {
      var map__21917 = p__21915;
      var map__21917__$1 = cljs.core.seq_QMARK_.call(null, map__21917) ? cljs.core.apply.call(null, cljs.core.hash_map, map__21917) : map__21917;
      var error = cljs.core.get.call(null, map__21917__$1, new cljs.core.Keyword(null, "error", "error", 1110689146));
      var content = cljs.core.get.call(null, map__21917__$1, new cljs.core.Keyword(null, "content", "content", 1965434859));
      if (cljs.core.truth_(error)) {
        if (cljs.core._EQ_.call(null, error, new cljs.core.Keyword(null, "timeout", "timeout", 3994960083))) {
          if (cljs.core.truth_(_QMARK_cb_fn)) {
            return _QMARK_cb_fn.call(null, new cljs.core.Keyword("chsk", "timeout", "chsk/timeout", 4193310845));
          } else {
            return null;
          }
        } else {
          taoensso.sente.merge_GT_chsk_state_BANG_.call(null, chsk__$1, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "open?", "open?", 1119852199), false], null));
          if (cljs.core.truth_(_QMARK_cb_fn)) {
            return _QMARK_cb_fn.call(null, new cljs.core.Keyword("chsk", "error", "chsk/error", 1304116950));
          } else {
            return null;
          }
        }
      } else {
        var resp_edn = content;
        var resp_clj = cljs.reader.read_string.call(null, resp_edn);
        if (cljs.core.truth_(_QMARK_cb_fn)) {
          _QMARK_cb_fn.call(null, resp_clj);
        } else {
          if (cljs.core.not_EQ_.call(null, resp_clj, new cljs.core.Keyword("chsk", "cb-dummy-200", "chsk/cb-dummy-200", 3717035459))) {
            taoensso.encore.warnf.call(null, "Cb reply w/o local cb-fn: %s", resp_clj);
          } else {
          }
        }
        return taoensso.sente.merge_GT_chsk_state_BANG_.call(null, chsk__$1, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "open?", "open?", 1119852199), true], null));
      }
    });
    return new cljs.core.Keyword(null, "apparent-success", "apparent-success", 1519477569);
  }
};
taoensso.sente.ChAjaxSocket.prototype.taoensso$sente$IChSocket$chsk_reconnect_BANG_$arity$1 = function(chsk) {
  var self__ = this;
  var chsk__$1 = this;
  var temp__4092__auto__ = cljs.core.deref.call(null, self__.curr_xhr_);
  if (cljs.core.truth_(temp__4092__auto__)) {
    var x = temp__4092__auto__;
    return x.abort();
  } else {
    return null;
  }
};
taoensso.sente.ChAjaxSocket.prototype.taoensso$sente$IChSocket$chsk_make_BANG_$arity$1 = function(chsk) {
  var self__ = this;
  var chsk__$1 = this;
  (function async_poll_for_update_BANG_(nattempt) {
    var retry_BANG_ = function() {
      var nattempt_STAR_ = nattempt + 1;
      taoensso.encore.warnf.call(null, "Chsk is closed: will try reconnect (%s).", nattempt_STAR_);
      return taoensso.encore.set_exp_backoff_timeout_BANG_.call(null, cljs.core.partial.call(null, async_poll_for_update_BANG_, nattempt_STAR_), nattempt_STAR_);
    };
    var ajax_req_BANG_ = function(retry_BANG_) {
      return function() {
        return cljs.core.reset_BANG_.call(null, self__.curr_xhr_, taoensso.encore.ajax_lite.call(null, self__.url, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "method", "method", 4231316563), new cljs.core.Keyword(null, "get", "get", 1014006472), new cljs.core.Keyword(null, "timeout", "timeout", 3994960083), self__.timeout, new cljs.core.Keyword(null, "resp-type", "resp-type", 3288017545), new cljs.core.Keyword(null, "text", "text", 1017460895), new cljs.core.Keyword(null, 
        "params", "params", 4313443576), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "_", "_", 1013904337), taoensso.encore.now_udt.call(null), new cljs.core.Keyword(null, "ajax-client-uuid", "ajax-client-uuid", 2569162690), self__.ajax_client_uuid], null)], null), function(retry_BANG_) {
          return function ajax_cb(p__21925) {
            var map__21929 = p__21925;
            var map__21929__$1 = cljs.core.seq_QMARK_.call(null, map__21929) ? cljs.core.apply.call(null, cljs.core.hash_map, map__21929) : map__21929;
            var error = cljs.core.get.call(null, map__21929__$1, new cljs.core.Keyword(null, "error", "error", 1110689146));
            var content = cljs.core.get.call(null, map__21929__$1, new cljs.core.Keyword(null, "content", "content", 1965434859));
            if (cljs.core.truth_(error)) {
              if (cljs.core._EQ_.call(null, error, new cljs.core.Keyword(null, "timeout", "timeout", 3994960083)) || cljs.core._EQ_.call(null, error, new cljs.core.Keyword(null, "abort", "abort", 1106515618))) {
                return async_poll_for_update_BANG_.call(null, 0);
              } else {
                taoensso.sente.merge_GT_chsk_state_BANG_.call(null, chsk__$1, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "open?", "open?", 1119852199), false], null));
                return retry_BANG_.call(null);
              }
            } else {
              var edn = content;
              var clj = cljs.reader.read_string.call(null, edn);
              if (cljs.core._EQ_.call(null, cljs.core.first.call(null, clj), new cljs.core.Keyword("chsk", "handshake", "chsk/handshake", 1281878251))) {
                var vec__21930_21935 = clj;
                var __21936 = cljs.core.nth.call(null, vec__21930_21935, 0, null);
                var vec__21931_21937 = cljs.core.nth.call(null, vec__21930_21935, 1, null);
                var uid_21938 = cljs.core.nth.call(null, vec__21931_21937, 0, null);
                var csrf_token_21939 = cljs.core.nth.call(null, vec__21931_21937, 1, null);
                if (cljs.core.truth_(clojure.string.blank_QMARK_.call(null, csrf_token_21939))) {
                  taoensso.encore.warnf.call(null, "NO CSRF TOKEN AVAILABLE");
                } else {
                }
                taoensso.sente.merge_GT_chsk_state_BANG_.call(null, chsk__$1, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "open?", "open?", 1119852199), true, new cljs.core.Keyword(null, "uid", "uid", 1014020034), uid_21938, new cljs.core.Keyword(null, "csrf-token", "csrf-token", 4176868610), csrf_token_21939], null));
              } else {
                var buffered_evs_21940 = clj;
                taoensso.sente.receive_buffered_evs_BANG_.call(null, (new cljs.core.Keyword(null, "recv", "recv", 1017400664)).cljs$core$IFn$_invoke$arity$1(self__.chs), buffered_evs_21940);
                taoensso.sente.merge_GT_chsk_state_BANG_.call(null, chsk__$1, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "open?", "open?", 1119852199), true], null));
              }
              return async_poll_for_update_BANG_.call(null, 0);
            }
          };
        }(retry_BANG_)));
      };
    }(retry_BANG_);
    var temp__4090__auto__ = window["Pace"];
    if (cljs.core.truth_(temp__4090__auto__)) {
      var pace = temp__4090__auto__;
      return pace.ignore(ajax_req_BANG_);
    } else {
      return ajax_req_BANG_.call(null);
    }
  }).call(null, 0);
  return chsk__$1;
};
taoensso.sente.ChAjaxSocket.prototype.cljs$core$IHash$_hash$arity$1 = function(this__16123__auto__) {
  var self__ = this;
  var this__16123__auto____$1 = this;
  var h__15953__auto__ = self__.__hash;
  if (!(h__15953__auto__ == null)) {
    return h__15953__auto__;
  } else {
    var h__15953__auto____$1 = cljs.core.hash_imap.call(null, this__16123__auto____$1);
    self__.__hash = h__15953__auto____$1;
    return h__15953__auto____$1;
  }
};
taoensso.sente.ChAjaxSocket.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__16128__auto__, k__16129__auto__) {
  var self__ = this;
  var this__16128__auto____$1 = this;
  return cljs.core._lookup.call(null, this__16128__auto____$1, k__16129__auto__, null);
};
taoensso.sente.ChAjaxSocket.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__16130__auto__, k21913, else__16131__auto__) {
  var self__ = this;
  var this__16130__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k21913, new cljs.core.Keyword(null, "url", "url", 1014020321))) {
    return self__.url;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k21913, new cljs.core.Keyword(null, "chs", "chs", 1014002720))) {
      return self__.chs;
    } else {
      if (cljs.core.keyword_identical_QMARK_.call(null, k21913, new cljs.core.Keyword(null, "timeout", "timeout", 3994960083))) {
        return self__.timeout;
      } else {
        if (cljs.core.keyword_identical_QMARK_.call(null, k21913, new cljs.core.Keyword(null, "ajax-client-uuid", "ajax-client-uuid", 2569162690))) {
          return self__.ajax_client_uuid;
        } else {
          if (cljs.core.keyword_identical_QMARK_.call(null, k21913, new cljs.core.Keyword(null, "curr-xhr_", "curr-xhr_", 1620082506))) {
            return self__.curr_xhr_;
          } else {
            if (cljs.core.keyword_identical_QMARK_.call(null, k21913, new cljs.core.Keyword(null, "state_", "state_", 4416389472))) {
              return self__.state_;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return cljs.core.get.call(null, self__.__extmap, k21913, else__16131__auto__);
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
taoensso.sente.ChAjaxSocket.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__16135__auto__, k__16136__auto__, G__21912) {
  var self__ = this;
  var this__16135__auto____$1 = this;
  var pred__21932 = cljs.core.keyword_identical_QMARK_;
  var expr__21933 = k__16136__auto__;
  if (cljs.core.truth_(pred__21932.call(null, new cljs.core.Keyword(null, "url", "url", 1014020321), expr__21933))) {
    return new taoensso.sente.ChAjaxSocket(G__21912, self__.chs, self__.timeout, self__.ajax_client_uuid, self__.curr_xhr_, self__.state_, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__21932.call(null, new cljs.core.Keyword(null, "chs", "chs", 1014002720), expr__21933))) {
      return new taoensso.sente.ChAjaxSocket(self__.url, G__21912, self__.timeout, self__.ajax_client_uuid, self__.curr_xhr_, self__.state_, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__21932.call(null, new cljs.core.Keyword(null, "timeout", "timeout", 3994960083), expr__21933))) {
        return new taoensso.sente.ChAjaxSocket(self__.url, self__.chs, G__21912, self__.ajax_client_uuid, self__.curr_xhr_, self__.state_, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__21932.call(null, new cljs.core.Keyword(null, "ajax-client-uuid", "ajax-client-uuid", 2569162690), expr__21933))) {
          return new taoensso.sente.ChAjaxSocket(self__.url, self__.chs, self__.timeout, G__21912, self__.curr_xhr_, self__.state_, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__21932.call(null, new cljs.core.Keyword(null, "curr-xhr_", "curr-xhr_", 1620082506), expr__21933))) {
            return new taoensso.sente.ChAjaxSocket(self__.url, self__.chs, self__.timeout, self__.ajax_client_uuid, G__21912, self__.state_, self__.__meta, self__.__extmap, null);
          } else {
            if (cljs.core.truth_(pred__21932.call(null, new cljs.core.Keyword(null, "state_", "state_", 4416389472), expr__21933))) {
              return new taoensso.sente.ChAjaxSocket(self__.url, self__.chs, self__.timeout, self__.ajax_client_uuid, self__.curr_xhr_, G__21912, self__.__meta, self__.__extmap, null);
            } else {
              return new taoensso.sente.ChAjaxSocket(self__.url, self__.chs, self__.timeout, self__.ajax_client_uuid, self__.curr_xhr_, self__.state_, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__16136__auto__, G__21912), null);
            }
          }
        }
      }
    }
  }
};
taoensso.sente.ChAjaxSocket.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__16142__auto__, writer__16143__auto__, opts__16144__auto__) {
  var self__ = this;
  var this__16142__auto____$1 = this;
  var pr_pair__16145__auto__ = function(keyval__16146__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__16143__auto__, cljs.core.pr_writer, "", " ", "", opts__16144__auto__, keyval__16146__auto__);
  };
  return cljs.core.pr_sequential_writer.call(null, writer__16143__auto__, pr_pair__16145__auto__, "#taoensso.sente.ChAjaxSocket{", ", ", "}", opts__16144__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "url", "url", 1014020321), self__.url], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "chs", "chs", 1014002720), self__.chs], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "timeout", "timeout", 3994960083), self__.timeout], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ajax-client-uuid", "ajax-client-uuid", 2569162690), self__.ajax_client_uuid], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "curr-xhr_", "curr-xhr_", 1620082506), self__.curr_xhr_], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state_", "state_", 4416389472), self__.state_], null)], null), self__.__extmap));
};
taoensso.sente.ChAjaxSocket.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__16133__auto__, entry__16134__auto__) {
  var self__ = this;
  var this__16133__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__16134__auto__)) {
    return cljs.core._assoc.call(null, this__16133__auto____$1, cljs.core._nth.call(null, entry__16134__auto__, 0), cljs.core._nth.call(null, entry__16134__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__16133__auto____$1, entry__16134__auto__);
  }
};
taoensso.sente.ChAjaxSocket.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__16140__auto__) {
  var self__ = this;
  var this__16140__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "url", "url", 1014020321), self__.url], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "chs", "chs", 1014002720), self__.chs], null), new cljs.core.PersistentVector(null, 2, 
  5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "timeout", "timeout", 3994960083), self__.timeout], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ajax-client-uuid", "ajax-client-uuid", 2569162690), self__.ajax_client_uuid], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "curr-xhr_", "curr-xhr_", 1620082506), self__.curr_xhr_], null), 
  new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state_", "state_", 4416389472), self__.state_], null)], null), self__.__extmap));
};
taoensso.sente.ChAjaxSocket.prototype.cljs$core$ICounted$_count$arity$1 = function(this__16132__auto__) {
  var self__ = this;
  var this__16132__auto____$1 = this;
  return 6 + cljs.core.count.call(null, self__.__extmap);
};
taoensso.sente.ChAjaxSocket.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__16124__auto__, other__16125__auto__) {
  var self__ = this;
  var this__16124__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__15530__auto__ = other__16125__auto__;
    if (cljs.core.truth_(and__15530__auto__)) {
      return this__16124__auto____$1.constructor === other__16125__auto__.constructor && cljs.core.equiv_map.call(null, this__16124__auto____$1, other__16125__auto__);
    } else {
      return and__15530__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
taoensso.sente.ChAjaxSocket.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__16127__auto__, G__21912) {
  var self__ = this;
  var this__16127__auto____$1 = this;
  return new taoensso.sente.ChAjaxSocket(self__.url, self__.chs, self__.timeout, self__.ajax_client_uuid, self__.curr_xhr_, self__.state_, G__21912, self__.__extmap, self__.__hash);
};
taoensso.sente.ChAjaxSocket.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__16122__auto__) {
  var self__ = this;
  var this__16122__auto____$1 = this;
  return new taoensso.sente.ChAjaxSocket(self__.url, self__.chs, self__.timeout, self__.ajax_client_uuid, self__.curr_xhr_, self__.state_, self__.__meta, self__.__extmap, self__.__hash);
};
taoensso.sente.ChAjaxSocket.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__16126__auto__) {
  var self__ = this;
  var this__16126__auto____$1 = this;
  return self__.__meta;
};
taoensso.sente.ChAjaxSocket.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__16137__auto__, k__16138__auto__) {
  var self__ = this;
  var this__16137__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "chs", "chs", 1014002720), null, new cljs.core.Keyword(null, "timeout", "timeout", 3994960083), null, new cljs.core.Keyword(null, "curr-xhr_", "curr-xhr_", 1620082506), null, new cljs.core.Keyword(null, "state_", "state_", 4416389472), null, new cljs.core.Keyword(null, "url", "url", 1014020321), null, new cljs.core.Keyword(null, "ajax-client-uuid", 
  "ajax-client-uuid", 2569162690), null], null), null), k__16138__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__16137__auto____$1), self__.__meta), k__16138__auto__);
  } else {
    return new taoensso.sente.ChAjaxSocket(self__.url, self__.chs, self__.timeout, self__.ajax_client_uuid, self__.curr_xhr_, self__.state_, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__16138__auto__)), null);
  }
};
taoensso.sente.ChAjaxSocket.cljs$lang$type = true;
taoensso.sente.ChAjaxSocket.cljs$lang$ctorPrSeq = function(this__16162__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "taoensso.sente/ChAjaxSocket");
};
taoensso.sente.ChAjaxSocket.cljs$lang$ctorPrWriter = function(this__16162__auto__, writer__16163__auto__) {
  return cljs.core._write.call(null, writer__16163__auto__, "taoensso.sente/ChAjaxSocket");
};
taoensso.sente.__GT_ChAjaxSocket = function __GT_ChAjaxSocket(url, chs, timeout, ajax_client_uuid, curr_xhr_, state_) {
  return new taoensso.sente.ChAjaxSocket(url, chs, timeout, ajax_client_uuid, curr_xhr_, state_);
};
taoensso.sente.map__GT_ChAjaxSocket = function map__GT_ChAjaxSocket(G__21914) {
  return new taoensso.sente.ChAjaxSocket((new cljs.core.Keyword(null, "url", "url", 1014020321)).cljs$core$IFn$_invoke$arity$1(G__21914), (new cljs.core.Keyword(null, "chs", "chs", 1014002720)).cljs$core$IFn$_invoke$arity$1(G__21914), (new cljs.core.Keyword(null, "timeout", "timeout", 3994960083)).cljs$core$IFn$_invoke$arity$1(G__21914), (new cljs.core.Keyword(null, "ajax-client-uuid", "ajax-client-uuid", 2569162690)).cljs$core$IFn$_invoke$arity$1(G__21914), (new cljs.core.Keyword(null, "curr-xhr_", 
  "curr-xhr_", 1620082506)).cljs$core$IFn$_invoke$arity$1(G__21914), (new cljs.core.Keyword(null, "state_", "state_", 4416389472)).cljs$core$IFn$_invoke$arity$1(G__21914), null, cljs.core.dissoc.call(null, G__21914, new cljs.core.Keyword(null, "url", "url", 1014020321), new cljs.core.Keyword(null, "chs", "chs", 1014002720), new cljs.core.Keyword(null, "timeout", "timeout", 3994960083), new cljs.core.Keyword(null, "ajax-client-uuid", "ajax-client-uuid", 2569162690), new cljs.core.Keyword(null, "curr-xhr_", 
  "curr-xhr_", 1620082506), new cljs.core.Keyword(null, "state_", "state_", 4416389472)));
};
taoensso.sente.chsk_url = function() {
  var chsk_url__delegate = function(path, p__21941) {
    var vec__21944 = p__21941;
    var websocket_QMARK_ = cljs.core.nth.call(null, vec__21944, 0, null);
    var map__21945 = taoensso.encore.get_window_location.call(null);
    var map__21945__$1 = cljs.core.seq_QMARK_.call(null, map__21945) ? cljs.core.apply.call(null, cljs.core.hash_map, map__21945) : map__21945;
    var pathname = cljs.core.get.call(null, map__21945__$1, new cljs.core.Keyword(null, "pathname", "pathname", 2249078690));
    var host = cljs.core.get.call(null, map__21945__$1, new cljs.core.Keyword(null, "host", "host", 1017112858));
    var protocol = cljs.core.get.call(null, map__21945__$1, new cljs.core.Keyword(null, "protocol", "protocol", 4319707658));
    return[cljs.core.str(cljs.core.not.call(null, websocket_QMARK_) ? protocol : cljs.core._EQ_.call(null, protocol, "https:") ? "wss:" : "ws:"), cljs.core.str("//"), cljs.core.str(host), cljs.core.str(function() {
      var or__15542__auto__ = path;
      if (cljs.core.truth_(or__15542__auto__)) {
        return or__15542__auto__;
      } else {
        return pathname;
      }
    }())].join("");
  };
  var chsk_url = function(path, var_args) {
    var p__21941 = null;
    if (arguments.length > 1) {
      p__21941 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return chsk_url__delegate.call(this, path, p__21941);
  };
  chsk_url.cljs$lang$maxFixedArity = 1;
  chsk_url.cljs$lang$applyTo = function(arglist__21946) {
    var path = cljs.core.first(arglist__21946);
    var p__21941 = cljs.core.rest(arglist__21946);
    return chsk_url__delegate(path, p__21941);
  };
  chsk_url.cljs$core$IFn$_invoke$arity$variadic = chsk_url__delegate;
  return chsk_url;
}();
taoensso.sente.make_channel_socket_BANG_ = function() {
  var make_channel_socket_BANG___delegate = function(url, p__21947) {
    var vec__21950 = p__21947;
    var map__21951 = cljs.core.nth.call(null, vec__21950, 0, null);
    var map__21951__$1 = cljs.core.seq_QMARK_.call(null, map__21951) ? cljs.core.apply.call(null, cljs.core.hash_map, map__21951) : map__21951;
    var lp_timeout = cljs.core.get.call(null, map__21951__$1, new cljs.core.Keyword(null, "lp-timeout", "lp-timeout", 4791954826), 38E3);
    var ws_kalive_ms = cljs.core.get.call(null, map__21951__$1, new cljs.core.Keyword(null, "ws-kalive-ms", "ws-kalive-ms", 4354717138), 38E3);
    var recv_buf_or_n = cljs.core.get.call(null, map__21951__$1, new cljs.core.Keyword(null, "recv-buf-or-n", "recv-buf-or-n", 1549384087), cljs.core.async.sliding_buffer.call(null, 2048));
    var type = cljs.core.get.call(null, map__21951__$1, new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "auto", "auto", 1016910113));
    var _deprecated_more_opts = cljs.core.nth.call(null, vec__21950, 1, null);
    if (cljs.core.truth_((new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "auto", "auto", 1016910113), null, new cljs.core.Keyword(null, "ws", "ws", 1013908046), null, new cljs.core.Keyword(null, "ajax", "ajax", 1016898962), null], null), null)).call(null, type))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "auto", "auto", 1016910113), null, new cljs.core.Keyword(null, "ws", "ws", 1013908046), null, new cljs.core.Keyword(null, "ajax", "ajax", 1016898962), null], null), null), new cljs.core.Symbol(null, "type", "type", -1636955917, null))))].join(""));
    }
    if (!(_deprecated_more_opts == null)) {
      taoensso.encore.warnf.call(null, "`make-channel-socket!` fn signature CHANGED with Sente v0.10.0.");
    } else {
    }
    var chs = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "state", "state", 1123661827), cljs.core.async.chan.call(null, cljs.core.async.sliding_buffer.call(null, 1)), new cljs.core.Keyword(null, "recv", "recv", 1017400664), cljs.core.async.chan.call(null, recv_buf_or_n), new cljs.core.Keyword(null, "internal", "internal", 1584314927), cljs.core.async.chan.call(null, recv_buf_or_n)], null);
    var chsk = function() {
      var or__15542__auto__ = function() {
        var and__15530__auto__ = cljs.core.not_EQ_.call(null, type, new cljs.core.Keyword(null, "ajax", "ajax", 1016898962));
        if (and__15530__auto__) {
          return taoensso.sente.chsk_make_BANG_.call(null, taoensso.sente.map__GT_ChWebSocket.call(null, new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null, "url", "url", 1014020321), taoensso.sente.chsk_url.call(null, url, new cljs.core.Keyword(null, "ws", "ws", 1013908046)), new cljs.core.Keyword(null, "chs", "chs", 1014002720), chs, new cljs.core.Keyword(null, "socket_", "socket_", 3270165182), cljs.core.atom.call(null, null), new cljs.core.Keyword(null, "kalive-ms", "kalive-ms", 
          2622924675), ws_kalive_ms, new cljs.core.Keyword(null, "kalive-timer_", "kalive-timer_", 1172590103), cljs.core.atom.call(null, null), new cljs.core.Keyword(null, "kalive-due?_", "kalive-due?_", 3498447387), cljs.core.atom.call(null, true), new cljs.core.Keyword(null, "cbs-waiting_", "cbs-waiting_", 4586265821), cljs.core.atom.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, cljs.core.PersistentArrayMap.EMPTY], null)), new cljs.core.Keyword(null, 
          "state_", "state_", 4416389472), cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "ws", "ws", 1013908046), new cljs.core.Keyword(null, "open?", "open?", 1119852199), false], null))], null)));
        } else {
          return and__15530__auto__;
        }
      }();
      if (cljs.core.truth_(or__15542__auto__)) {
        return or__15542__auto__;
      } else {
        var and__15530__auto__ = cljs.core.not_EQ_.call(null, type, new cljs.core.Keyword(null, "ws", "ws", 1013908046));
        if (and__15530__auto__) {
          var ajax_client_uuid = taoensso.encore.uuid_str.call(null);
          return taoensso.sente.chsk_make_BANG_.call(null, taoensso.sente.map__GT_ChAjaxSocket.call(null, new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "url", "url", 1014020321), taoensso.sente.chsk_url.call(null, url), new cljs.core.Keyword(null, "chs", "chs", 1014002720), chs, new cljs.core.Keyword(null, "timeout", "timeout", 3994960083), lp_timeout, new cljs.core.Keyword(null, "ajax-client-uuid", "ajax-client-uuid", 2569162690), ajax_client_uuid, new cljs.core.Keyword(null, 
          "curr-xhr_", "curr-xhr_", 1620082506), cljs.core.atom.call(null, null), new cljs.core.Keyword(null, "state_", "state_", 4416389472), cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "ajax", "ajax", 1016898962), new cljs.core.Keyword(null, "open?", "open?", 1119852199), false], null))], null)));
        } else {
          return and__15530__auto__;
        }
      }
    }();
    var ever_opened_QMARK__ = cljs.core.atom.call(null, false);
    var state_STAR_ = function(chs, chsk, ever_opened_QMARK__) {
      return function(state) {
        if (cljs.core.truth_(function() {
          var or__15542__auto__ = cljs.core.not.call(null, (new cljs.core.Keyword(null, "open?", "open?", 1119852199)).cljs$core$IFn$_invoke$arity$1(state));
          if (or__15542__auto__) {
            return or__15542__auto__;
          } else {
            return cljs.core.deref.call(null, ever_opened_QMARK__);
          }
        }())) {
          return state;
        } else {
          cljs.core.reset_BANG_.call(null, ever_opened_QMARK__, true);
          return cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "first-open?", "first-open?", 3183196490), true);
        }
      };
    }(chs, chsk, ever_opened_QMARK__);
    if (cljs.core.truth_(chsk)) {
      return new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "chsk", "chsk", 1016957167), chsk, new cljs.core.Keyword(null, "send-fn", "send-fn", 2993769631), cljs.core.partial.call(null, taoensso.sente.chsk_send_BANG_, chsk), new cljs.core.Keyword(null, "state", "state", 1123661827), (new cljs.core.Keyword(null, "state_", "state_", 4416389472)).cljs$core$IFn$_invoke$arity$1(chsk), new cljs.core.Keyword(null, "ch-recv", "ch-recv", 1704942016), cljs.core.async.merge.call(null, 
      new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.async.map_LT_.call(null, function(ev) {
        if (taoensso.sente.event_QMARK_.call(null, ev)) {
        } else {
          throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "event?", "event?", 1363106462, null), new cljs.core.Symbol(null, "ev", "ev", -1640528278, null))))].join(""));
        }
        return ev;
      }, (new cljs.core.Keyword(null, "internal", "internal", 1584314927)).cljs$core$IFn$_invoke$arity$1(chs)), cljs.core.async.map_LT_.call(null, function(state) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("chsk", "state", "chsk/state", 1318408525), state_STAR_.call(null, state)], null);
      }, (new cljs.core.Keyword(null, "state", "state", 1123661827)).cljs$core$IFn$_invoke$arity$1(chs)), cljs.core.async.map_LT_.call(null, function(ev) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("chsk", "recv", "chsk/recv", 1214957308), ev], null);
      }, (new cljs.core.Keyword(null, "recv", "recv", 1017400664)).cljs$core$IFn$_invoke$arity$1(chs))], null))], null);
    } else {
      return null;
    }
  };
  var make_channel_socket_BANG_ = function(url, var_args) {
    var p__21947 = null;
    if (arguments.length > 1) {
      p__21947 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return make_channel_socket_BANG___delegate.call(this, url, p__21947);
  };
  make_channel_socket_BANG_.cljs$lang$maxFixedArity = 1;
  make_channel_socket_BANG_.cljs$lang$applyTo = function(arglist__21952) {
    var url = cljs.core.first(arglist__21952);
    var p__21947 = cljs.core.rest(arglist__21952);
    return make_channel_socket_BANG___delegate(url, p__21947);
  };
  make_channel_socket_BANG_.cljs$core$IFn$_invoke$arity$variadic = make_channel_socket_BANG___delegate;
  return make_channel_socket_BANG_;
}();
taoensso.sente.start_chsk_router_loop_BANG_ = function start_chsk_router_loop_BANG_(event_handler, ch) {
  var ctrl_ch = cljs.core.async.chan.call(null);
  var c__18844__auto___22029 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__18845__auto__ = function() {
      var switch__18829__auto__ = function(state_22012) {
        var state_val_22013 = state_22012[1];
        if (state_val_22013 === 7) {
          var inst_22008 = state_22012[2];
          var state_22012__$1 = state_22012;
          var statearr_22014_22030 = state_22012__$1;
          statearr_22014_22030[2] = inst_22008;
          statearr_22014_22030[1] = 3;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_22013 === 6) {
            var inst_21997 = state_22012[7];
            var inst_22003 = cljs.core.nth.call(null, inst_21997, 0, null);
            var inst_22004 = cljs.core.nth.call(null, inst_21997, 1, null);
            var inst_22005 = event_handler.call(null, inst_21997, ch);
            var state_22012__$1 = function() {
              var statearr_22015 = state_22012;
              statearr_22015[8] = inst_22005;
              statearr_22015[9] = inst_22004;
              statearr_22015[10] = inst_22003;
              return statearr_22015;
            }();
            var statearr_22016_22031 = state_22012__$1;
            statearr_22016_22031[2] = null;
            statearr_22016_22031[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_22013 === 5) {
              var state_22012__$1 = state_22012;
              var statearr_22017_22032 = state_22012__$1;
              statearr_22017_22032[2] = new cljs.core.Keyword("taoensso.sente", "stop", "taoensso.sente/stop", 4001192801);
              statearr_22017_22032[1] = 7;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_22013 === 4) {
                var inst_21996 = state_22012[2];
                var inst_21997 = cljs.core.nth.call(null, inst_21996, 0, null);
                var inst_21998 = cljs.core.nth.call(null, inst_21996, 1, null);
                var inst_21999 = inst_21998 === ctrl_ch;
                var state_22012__$1 = function() {
                  var statearr_22018 = state_22012;
                  statearr_22018[7] = inst_21997;
                  return statearr_22018;
                }();
                if (cljs.core.truth_(inst_21999)) {
                  var statearr_22019_22033 = state_22012__$1;
                  statearr_22019_22033[1] = 5;
                } else {
                  var statearr_22020_22034 = state_22012__$1;
                  statearr_22020_22034[1] = 6;
                }
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_22013 === 3) {
                  var inst_22010 = state_22012[2];
                  var state_22012__$1 = state_22012;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_22012__$1, inst_22010);
                } else {
                  if (state_val_22013 === 2) {
                    var inst_21993 = [ch, ctrl_ch];
                    var inst_21994 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, inst_21993, null);
                    var state_22012__$1 = state_22012;
                    return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_22012__$1, 4, inst_21994);
                  } else {
                    if (state_val_22013 === 1) {
                      var state_22012__$1 = state_22012;
                      var statearr_22021_22035 = state_22012__$1;
                      statearr_22021_22035[2] = null;
                      statearr_22021_22035[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__18829__auto__) {
        return function() {
          var state_machine__18830__auto__ = null;
          var state_machine__18830__auto____0 = function() {
            var statearr_22025 = [null, null, null, null, null, null, null, null, null, null, null];
            statearr_22025[0] = state_machine__18830__auto__;
            statearr_22025[1] = 1;
            return statearr_22025;
          };
          var state_machine__18830__auto____1 = function(state_22012) {
            while (true) {
              var ret_value__18831__auto__ = function() {
                try {
                  while (true) {
                    var result__18832__auto__ = switch__18829__auto__.call(null, state_22012);
                    if (cljs.core.keyword_identical_QMARK_.call(null, result__18832__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                      continue;
                    } else {
                      return result__18832__auto__;
                    }
                    break;
                  }
                } catch (e22026) {
                  if (e22026 instanceof Object) {
                    var ex__18833__auto__ = e22026;
                    var statearr_22027_22036 = state_22012;
                    statearr_22027_22036[5] = ex__18833__auto__;
                    cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_22012);
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                      throw e22026;
                    } else {
                      return null;
                    }
                  }
                }
              }();
              if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__18831__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                var G__22037 = state_22012;
                state_22012 = G__22037;
                continue;
              } else {
                return ret_value__18831__auto__;
              }
              break;
            }
          };
          state_machine__18830__auto__ = function(state_22012) {
            switch(arguments.length) {
              case 0:
                return state_machine__18830__auto____0.call(this);
              case 1:
                return state_machine__18830__auto____1.call(this, state_22012);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__18830__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__18830__auto____0;
          state_machine__18830__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__18830__auto____1;
          return state_machine__18830__auto__;
        }();
      }(switch__18829__auto__);
    }();
    var state__18846__auto__ = function() {
      var statearr_22028 = f__18845__auto__.call(null);
      statearr_22028[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__18844__auto___22029;
      return statearr_22028;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__18846__auto__);
  });
  return function stop_BANG_() {
    return cljs.core.async.close_BANG_.call(null, ctrl_ch);
  };
};
goog.provide("cljs.core.match");
goog.require("cljs.core");
cljs.core.match.backtrack = new Error;
goog.provide("faiz.main");
goog.require("cljs.core");
goog.require("taoensso.encore");
goog.require("cljs.core.async");
goog.require("taoensso.sente");
goog.require("taoensso.sente");
goog.require("taoensso.sente");
goog.require("taoensso.encore");
goog.require("taoensso.encore");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
goog.require("cljs.core.match");
goog.require("clojure.string");
goog.require("clojure.string");
var map__21767_21768 = taoensso.sente.make_channel_socket_BANG_.call(null, "/chsk", new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1017479852), cljs.core.rand.call(null) >= 0.5 ? new cljs.core.Keyword(null, "ajax", "ajax", 1016898962) : new cljs.core.Keyword(null, "auto", "auto", 1016910113)], null));
var map__21767_21769__$1 = cljs.core.seq_QMARK_.call(null, map__21767_21768) ? cljs.core.apply.call(null, cljs.core.hash_map, map__21767_21768) : map__21767_21768;
var state_21770 = cljs.core.get.call(null, map__21767_21769__$1, new cljs.core.Keyword(null, "state", "state", 1123661827));
var send_fn_21771 = cljs.core.get.call(null, map__21767_21769__$1, new cljs.core.Keyword(null, "send-fn", "send-fn", 2993769631));
var ch_recv_21772 = cljs.core.get.call(null, map__21767_21769__$1, new cljs.core.Keyword(null, "ch-recv", "ch-recv", 1704942016));
var chsk_21773 = cljs.core.get.call(null, map__21767_21769__$1, new cljs.core.Keyword(null, "chsk", "chsk", 1016957167));
faiz.main.chsk = chsk_21773;
faiz.main.ch_chsk = ch_recv_21772;
faiz.main.chsk_send_BANG_ = send_fn_21771;
faiz.main.chsk_state = state_21770;
taoensso.encore.logf.call(null, "ClojureScript appears to have loaded correctly.");
faiz.main.event_handler = function event_handler(p__21774, _) {
  var vec__21786 = p__21774;
  var id = cljs.core.nth.call(null, vec__21786, 0, null);
  var data = cljs.core.nth.call(null, vec__21786, 1, null);
  var ev = vec__21786;
  taoensso.encore.logf.call(null, "Event: %s", ev);
  try {
    if (cljs.core.keyword_identical_QMARK_.call(null, id, new cljs.core.Keyword("chsk", "state", "chsk/state", 1318408525))) {
      try {
        if (function() {
          var G__21795 = data;
          if (G__21795) {
            var bit__16192__auto__ = G__21795.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__16192__auto__ || G__21795.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__21795.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__21795);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__21795);
          }
        }()) {
          try {
            var data_first_open_QMARK___21791 = cljs.core.get.call(null, data, new cljs.core.Keyword(null, "first-open?", "first-open?", 3183196490), new cljs.core.Keyword("clojure.core.match", "not-found", "clojure.core.match/not-found", 594371962));
            if (data_first_open_QMARK___21791 === true) {
              return taoensso.encore.logf.call(null, "Channel socket successfully established!");
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                throw cljs.core.match.backtrack;
              } else {
                return null;
              }
            }
          } catch (e21796) {
            if (e21796 instanceof Error) {
              var e__6811__auto__ = e21796;
              if (e__6811__auto__ === cljs.core.match.backtrack) {
                throw cljs.core.match.backtrack;
              } else {
                throw e__6811__auto__;
              }
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                throw e21796;
              } else {
                return null;
              }
            }
          }
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            throw cljs.core.match.backtrack;
          } else {
            return null;
          }
        }
      } catch (e21794) {
        if (e21794 instanceof Error) {
          var e__6811__auto__ = e21794;
          if (e__6811__auto__ === cljs.core.match.backtrack) {
            throw cljs.core.match.backtrack;
          } else {
            throw e__6811__auto__;
          }
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            throw e21794;
          } else {
            return null;
          }
        }
      }
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw cljs.core.match.backtrack;
      } else {
        return null;
      }
    }
  } catch (e21792) {
    if (e21792 instanceof Error) {
      var e__6811__auto__ = e21792;
      if (e__6811__auto__ === cljs.core.match.backtrack) {
        try {
          if (cljs.core.keyword_identical_QMARK_.call(null, id, new cljs.core.Keyword("chsk", "state", "chsk/state", 1318408525))) {
            var new_state = data;
            return taoensso.encore.logf.call(null, "Chsk state change: %s", new_state);
          } else {
            if (cljs.core.keyword_identical_QMARK_.call(null, id, new cljs.core.Keyword("chsk", "recv", "chsk/recv", 1214957308))) {
              var payload = data;
              return taoensso.encore.logf.call(null, "Push event from server: %s", payload);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                throw cljs.core.match.backtrack;
              } else {
                return null;
              }
            }
          }
        } catch (e21793) {
          if (e21793 instanceof Error) {
            var e__6811__auto____$1 = e21793;
            if (e__6811__auto____$1 === cljs.core.match.backtrack) {
              return taoensso.encore.logf.call(null, "Unmatched event: %s", ev);
            } else {
              throw e__6811__auto____$1;
            }
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              throw e21793;
            } else {
              return null;
            }
          }
        }
      } else {
        throw e__6811__auto__;
      }
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw e21792;
      } else {
        return null;
      }
    }
  }
};
if (typeof faiz.main.chsk_router !== "undefined") {
} else {
  faiz.main.chsk_router = taoensso.sente.start_chsk_router_loop_BANG_.call(null, faiz.main.event_handler, faiz.main.ch_chsk);
}
;